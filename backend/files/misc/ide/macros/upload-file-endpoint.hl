
// Macro for Hyper IDE that creates an upload file endpoint.
.name:Creates an upload file endpoint
.description:"Macro for Hyper IDE that creates an 'upload file' HTTP PUT endpoint for you that assumes the file is sent as multipart/form-data. This macros will by default persist the files uploaded in the '/etc/MODULE_NAME/' folder, so you might want to run the 'ensure etc folder' macro too."
.arguments
   .
      name:module
      type:string
      description:"Name of module to create an 'upload file endpoint' for"
      mandatory:bool:true
   .
      name:auth
      type:string
      description:Comma separated list of roles users must belong to in order to invoke endpoint
      mandatory:bool:true
   .
      name:name
      type:string
      description:Name of your endpoint that becomes the last parts of its URL
      mandatory:bool:true
      default:upload-file

// Lambda object executed as macro is actually executed.
.lambda

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/module
   validators.regex:x:@.arguments/*/module
      regex:^[a-zA-Z0-9_-]+$
   validators.mandatory:x:@.arguments/*/name
   validators.regex:x:@.arguments/*/name
      regex:^[a-zA-Z0-9_-]+$

   // Figuring out module's complete path.
   .module-path
   set-value:x:@.module-path
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/

   // Making sure that module exists.
   if
      not
         io.folder.exists:x:@.module-path
      .lambda

         // No such module
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' does not exist"
         throw:x:-
            public:bool:true
            status:int:404

   // Making sure that module does not already have an 'xxx.put.hl' file.
   strings.concat
      get-value:x:@.module-path
      get-value:x:@.arguments/*/name
      .:.put.hl
   if
      io.file.exists:x:@strings.concat
      .lambda

         // File already exists.
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' already has a '"
            get-value:x:@.arguments/*/name
            .:".put.hl' file and hence we cannot create another"
         throw:x:-
            public:bool:true
            status:int:404

   // Copying main 'upload-file.put.hl' template file from 'misc/idea/templates' folder.
   io.file.copy:/misc/ide/templates/upload-file.put.hl
      get-value:x:@strings.concat

   /*
    * Opening 'xxx.put.hl' file such that we can correctly decorate it
    * according to arguments specified by caller.
    */
   io.file.load:x:@strings.concat
   hyper2lambda:x:@io.file.load
      comments:true

   // Substituting parameters.
   if
      or
         eq
            get-value:x:@.arguments/*/auth
            .
         eq
            get-value:x:@.arguments/*/auth
            .:
         not
            exists:x:@.arguments/*/auth
      .lambda

         // No [auth] specified.
         remove-nodes:x:@hyper2lambda/**/=[[auth]]
   else

      // Auth specified.
      set-value:x:@hyper2lambda/**/=[[auth]]
         get-value:x:@.arguments/*/auth
   set-value:x:@hyper2lambda/**/=[[module]]
      get-value:x:@.arguments/*/module

   // Then transforming file to Hyperlambda and saving it again.
   lambda2hyper:x:@hyper2lambda/*
      comments:true
   io.file.save:x:@strings.concat
      get-value:x:@lambda2hyper

   // Making sure we inform caller that he needs to refresh his folders.
   set-value:x:@.lambda
      strings.concat
         .:folders-changed|
         get-value:x:@strings.concat/@strings.concat
