
// Macro for Hyper IDE that creates documentation for a module's endpoints.
.name:Documents all endpoints in module
.description:"Macro for Hyper IDE that creates Markdown documentation for a module's endpoints, and stores the documentation in an ENDPOINTS.md file at root of the module's folder."
.arguments
   .
      name:module
      type:string
      description:"Name of module to create a 'download file endpoint' for"
      mandatory:bool:true

// Lambda object executed as macro is actually executed.
.lambda

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/module
   validators.regex:x:@.arguments/*/module
      regex:^[a-zA-Z0-9_-]+$

   // Figuring out module's complete path.
   .module-path
   set-value:x:@.module-path
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/

   // Making sure that module exists.
   if
      not
         io.folder.exists:x:@.module-path
      .lambda

         // No such module
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' does not exist"
         throw:x:-
            public:bool:true
            status:int:404

   // Making sure that module does not already have a 'ENDPOINTS.md' file.
   strings.concat
      get-value:x:@.module-path
      .:ENDPOINTS.md
   if
      io.file.exists:x:@strings.concat
      .lambda

         // File already exists.
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' already has an 'ENDPOINTS.md' file and hence we cannot create another"
         throw:x:-
            public:bool:true
            status:int:404

   // Figuring out base URL to endpoints belonging to module.
   .base-url
   set-value:x:@.base-url
      strings.concat
         .:magic
         get-value:x:@.module-path

   // Retrieving all endpoints and filtering out those not belonging to specified module.
   endpoints.list
   .endpoints
   for-each:x:@endpoints.list/*
      if
         strings.starts-with:x:@.dp/#/*/path
            get-value:x:@.base-url
         .lambda
            add:x:@.endpoints
               get-nodes:x:@.dp/#

   // Now we have all endpoints belonging to module, and we can start creating documentation.
   .documentation:"# Endpoints\r\n\r\nThis documentation was automatically generated by Magic by reading meta data from your endpoints, and automatically generating documentation for individual endpoints.\r\n"
   for-each:x:@.endpoints/*
      .description:
      if
         and
            exists:x:@.dp/#/*/description
            not
               eq
                  get-value:x:@.dp/#/*/description
                  .
         .lambda
            set-value:x:@.description
               strings.replace:x:@.dp/#/*/description
                  .:[
                  .:\[
            set-value:x:@.description
               strings.replace:x:@.description
                  .:]
                  .:\]
      set-value:x:@.documentation
         strings.concat
            get-value:x:@.documentation
            .:"\r\n"
            .:"## "
            get-value:x:@.dp/#/*/verb
            .:" - "
            get-value:x:@.dp/#/*/path
            .:"\r\n\r\n"
            get-value:x:@.description
            .:"\r\n\r\n* __Type__ - "
            get-value:x:@.dp/#/*/type
            .:"\r\n* __Produces__ - "
            get-value:x:@.dp/#/*/produces
      if
         exists:x:@.dp/#/*/consumes
         .lambda
            set-value:x:@.documentation
               strings.concat
                  get-value:x:@.documentation
                  .:"\r\n* __Consumes__ - "
                  get-value:x:@.dp/#/*/consumes
      if
         exists:x:@.dp/#/*/auth
         .lambda
            set-value:x:@.documentation
               strings.concat
                  get-value:x:@.documentation
                  .:"\r\n* __Authorisation__ -"
            for-each:x:@.dp/#/*/auth/*
               set-value:x:@.documentation
                  strings.concat
                     get-value:x:@.documentation
                     .:" `"
                     get-value:x:@.dp/#
                     .:`
            set-value:x:@.documentation
               strings.concat
                  get-value:x:@.documentation
                  .:@"
"
      if
         exists:x:@.dp/#/*/input/*
         .lambda
            set-value:x:@.documentation
               strings.concat
                  get-value:x:@.documentation
                  .:@"
### Input
"
            for-each:x:@.dp/#/*/input/*
               set-value:x:@.documentation
                  strings.concat
                     get-value:x:@.documentation
                     .:@"
"
                     .:* __
                     get-value:x:@.dp/#/*/name
                     .:__ - `
                     get-value:x:@.dp/#/*/type
                     .:`
            set-value:x:@.documentation
               strings.concat
                  get-value:x:@.documentation
                  .:@"
"
      if
         exists:x:@.dp/#/*/output/*
         .lambda
            set-value:x:@.documentation
               strings.concat
                  get-value:x:@.documentation
                  .:@"
### Output
"
            for-each:x:@.dp/#/*/output/*
               set-value:x:@.documentation
                  strings.concat
                     get-value:x:@.documentation
                     .:@"
"
                     .:* __
                     get-value:x:@.dp/#/*/name
                     .:__
               if
                  and
                     exists:x:@.dp/#/*/type
                     not
                        eq
                           get-value:x:@.dp/#/*/type
                           .
                  .lambda
                     set-value:x:@.documentation
                        strings.concat
                           get-value:x:@.documentation
                           .:" - `"
                           get-value:x:@.dp/#/*/type
                           .:`
            set-value:x:@.documentation
               strings.concat
                  get-value:x:@.documentation
                  .:@"
"

   // Saving file as ENDPOINTS.md now that we have its entire content.
   io.file.save:x:@strings.concat
      get-value:x:@.documentation

   // Making sure we inform caller that he needs to refresh his folders.
   set-value:x:@.lambda
      strings.concat
         .:folders-changed|
         get-value:x:@strings.concat/@strings.concat
