
/*
 * HTTP PUT database endpoint, providing a template endpoint
 * for updating a single record in your database.
 */
.arguments
   pk1:long
   column1:string
.description:HTTP PUT database endpoint, providing a template endpoint for updating a single record in your database
.type:crud-update

// Sanity checking invocation
validators.mandatory:x:@.arguments/*/pk1
validators.mandatory:x:@.arguments/*/column1

// Verifying user is authorised to access endpoint.
auth.ticket.verify:root

// Connecting to database.
data.connect:[generic|foo_bar]

   /*
    * Decorating [data.update] with primary key condition, making sure
    * we remove it afterwards to make it simpler to decorate invocation
    * with new values afterwards.
    */
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/pk1
   remove-nodes:x:@.arguments/*/pk1

   // Decorating [data.update] with new values for record.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*

   // Connecting to database.
   data.update
      table:table1
      values
      where
         and

   /*
    * Checking that above invocation updated more than 0 records,
    * and if not, making sure we return 404 to caller.
    */
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda

         // Oops, no such record.
         response.status.set:404
         return
            result:Record not found

   /*
    * Returning 202 Item updated to caller, and the number of affected
    * records.
    */
   response.status.set:202
   unwrap:x:+/*
   return
      affected:x:@data.update
