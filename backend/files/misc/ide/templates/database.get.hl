
/*
 * HTTP GET database endpoint, providing a template endpoint
 * for retrieving records from your database.
 * 
 * Exchange 'foo_bar', 'table1', 'column1', and 'column2' with
 * your database name, table, and column names.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   operator:string
   column1.eq:string
   column1.like:string
   column2.eq:long
   column2.neq:long
   column2.lt:long
   column2.mt:long
   column2.lteq:long
   column2.mteq:long
.description:HTTP GET database endpoint, providing a template endpoint for retrieving records from your database
.type:crud-read

// Verifying user is authorised to access endpoint.
auth.ticket.verify:root

/*
 * Sanity checking invocation and adding boolean comparison operator into
 * [data.read] invocation.
 */
validators.enum:x:@.arguments/*/operator
   .:or
   .:and
if
   exists:x:@.arguments/*/operator
   .lambda

      /*
       * Explicit operator given, exchanging default [and]
       * with whatever was supplied by caller.
       */
      set-name:x:../*/data.connect/*/data.read/*/where/*
         get-value:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|foo_bar]

   /*
    * Decorating [data.read] invocation with special arguments,
    * and removing these afterwards such that we don't add them
    * as column criteria.
    */
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/operator
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Adding filtering criteria into [data.read] invocation.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Invoking [data.read] now parametrised.
   data.read
      table:table1
      columns
         column1
         column2
      where
         and

   // Returning result of above invocation to caller.
   return-nodes:x:@data.read/*
