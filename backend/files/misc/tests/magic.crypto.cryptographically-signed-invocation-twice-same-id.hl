
/*
 * Manually created assumption that verifies we can invoke 'self'
 * using a cryptographically signed invocation.
 */
description:Assumes that invoking a cryptographically signed endpoint (localhost) works as expected
.lambda

   // Notice, we only execute this test on localhost.
   request.host
   if
      not
         strings.starts-with:x:@request.host
            .:localhost
      .lambda
         return
            result:success

   // Common URL for all invocations.
   .url
   set-value:x:@.url
      strings.concat
         request.scheme
         .:"://"
         request.host
         .:/magic/system/crypto/eval-id
   unwrap:x:./**/signal/*/url

   /*
    * Invoking self as a cryptographically signed invocation, to
    * make sure cryptographically signed invocations works, and that
    * we have imported our own server key as a 'client key'.
    * 
    * First we create a unique request ID.
    */
   guid.new
   set-value:x:./**/signal/**/.lambda/*/.request-id
      strings.concat
         .:test.
         convert:x:@guid.new
            type:string

   // Then we invoke ourselves using a cryptographically signed invocation.
   signal:magic.crypto.http.eval
      url:x:@.url
      .lambda

         /*
          * The request is needs to be a unique value, on a per
          * request level
          */
         .request-id
         return:success

   // Assuming result of above invocation is success.
   if
      or
         not
            eq
               get-value:x:@signal
               .:int:200
         not
            eq
               get-value:x:@signal/*/content
               .:success
      .lambda
         throw:Invocation did not return the assumed result

   /*
    * Then we invoke ourselves using a cryptographically signed invocation.
    * 
    * But this time it will fail, since we are reusing the same [.request-id].
    */
   .success:bool:false
   try
      signal:magic.crypto.http.eval
         url:x:@.url
         .lambda

            /*
             * The request is needs to be a unique value, on a per
             * request level
             */
            .request-id
            return:success
   .catch

      // Success, we expected an exception to occur this time.
      set-value:x:@.success
         .:bool:true

   // Assuming result of above invocation is failure.
   if
      not
         get-value:x:@.success
      .lambda
         throw:Invocation did not return the assumed result
