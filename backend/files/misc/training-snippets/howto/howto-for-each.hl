// How to for-each loop?

/*
 * A for-each loop iterates through each node resulting from an expression,
 * and adds a reference to the currently iterated node as a [.dp] pointer.
 *
 * The code below iterates through each children of [.array] and logs its
 * value.
 */

// Our [for-each] loop's array of elements to iterate through.
.array
   item_1:Hello from [for-each] 1
   item_2:Hello from [for-each] 2
   item_3:Hello from [for-each] 3

// Looping through each child of [.array]
for-each:x:@.array/*

   // Creating a log item with the iterated node's value.
   log.info:x:@.dp/#

/*
 * Notice the [.dp] pointer in our above code, and the /# iterator.
 * The [.dp] pointer will be a reference to the currently iterated node,
 * and the /# iterator returns the value of the [.dp] node by reference.
 *
 * This allows you to iterate through an expression leading to a list
 * of nodes, for then to change their values, since the iterated node
 * found in [.dp] is passed into your [for-each] by reference.
 *
 * The code below is looping similarly to the above code, but instead
 * of creating a log entry, it is changing the iterated node's value
 * to '[for-each] was here'.
 */

// Our [for-each] loop's array of elements to iterate through.
.array
   item_1:Item no 1
   item_2:Item no 2
   item_3:Item no 3

// Looping through each child of [.array]
for-each:x:@.array/*

   // Updating the value of currently iterated node.
   set-value:x:@.dp/#
      .:[for-each] was here
