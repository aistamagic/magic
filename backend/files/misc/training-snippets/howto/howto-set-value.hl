// How to set value of node?

/*
 * Since Hyperlambda doesn't have 'variables' in the traditional sense,
 * and don't even contain 'arrays' as a construct the same way other
 * programming languages does, but rather exclusively relies upon graph objects,
 * with a name/value/children structure - This begs the question of how you can
 * dynamically set a value of a node, to treat it logically the same way
 * you would use a variable in other programming languages.
 *
 * In the following code we illustrate how this process works by changing
 * the value of [.variable] to 'success' using [set-value] combined with
 * static values.
 */

// This will be changed to 'success' further down in our code.
.variable:original_value

// Changing above [.variable] value to success.
set-value:x:@.variable
   .:success

/*
 * You can also reference values or names of other nodes, such as the
 * following Hyperlambda illustrates, that is using [set-value] combined
 * with lambda expressions.
 */

// This will be changed to 'new_value_1' further down in our code.
.var_1:original_value_1

// This becomes the source for the expression in our [get-value] invocation further down.
.src:new_value_1

// Changing above [.variable] value to success.
set-value:x:@.variable
   get-value:x:@.src

/*
 * Using constructs such as the above you can assign values to nodes as
 * you need, serving the same purpose of variables from traditional programming
 * languages, albeit using different semantics.
 */
