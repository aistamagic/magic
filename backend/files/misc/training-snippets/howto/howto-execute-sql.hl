// How to execute SQL?

/*
 * To execute SQL there are several slots you can choose from, some of
 * whom are listed below;
 *
 * - [data.select] - Selects a record set
 * - [data.scalar] - Selects a single 'scalar' value
 * - [data.execute] - Executes the SQL returning result
 *
 * To select or retrieve data from your database, you would typically use
 * [data.select], such as illustrated below. If you want to for instance
 * count items, or only retrieve a single value from your database, you
 * would typically use [data.scalar]. If you want to execute some SQL
 * where you don't care about the result, such as for instance inserting,
 * deleting of updating an item in some table, you would typically use
 * [data.execute].
 *
 * Below are examples of all 3 slots, allowing you to test all of the
 * 3 above slots if you have the sakila database installed.
 */

// Connecting to our sakila database.
data.connect:sakila

   // Returning first_name and last_name from actor table limiting result to 10 records.
   data.select:select first_name, last_name from actor limit 10

   // Updating actor who's first_name is 'John Doe'.
   data.execute:"update actor set first_name = @new_name where first_name = 'John Doe'"
      new_name:Peter Junior

   // Counting how many actor records we have.
   data.scalar:select count(*) from actor

/*
 * Notice, all of the 3 above slots can optionally be given parameters.
 * This allows you to avoid issues related to SQL injection or SQL inserting
 * attacks. An example of adding an SQL parameter and referencing it
 * in the SQL itself can be seen in the above [data.execute] invocation,
 * where '@new_name' inside your SQL will be substituted with 'Peter Junior'
 * as your SQL is being executed.
 */
