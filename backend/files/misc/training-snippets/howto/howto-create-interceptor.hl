// How to create interceptor endpoint?

/*
 * An interceptor or API gateway endpoint allows you to encapsulate some
 * existing endpoint, and inject your own functionality either before or
 * after invoking the encapsulated HTTP endpoint. Logically this is
 * the same as inheriting from a class in OOP and using polymorphism
 * to override one of your base classes methods and execute logic
 * before you call your original base class method.
 *
 * The code below accepts a name and email argument, for then to use
 * these arguments in its [.before] lambda object, before passing
 * in these arguments to some_website/some_api_endpoint URL using
 * an HTTP POST invocation, and returning whatever the HTTP POST
 * invocation resulted in to the client.
 */

// This endpoint can only accept name and email arguments.
.arguments
   name:string
   email:string

// Endpoint we're intercepting.
.endpoint:"https://some_website/some_api_endpoint"

/*
 * Lambda object executed as an "intercepted lambda object"
 * before invoking the original HTTP endpoint we're intercepting.
 */
.before

   // Inside of this lambda object we can use the name and email arguments.

// Executing [.before] lambda object passing in name and email arguments.
add:x:./*/eval
   get-nodes:x:@.arguments/*/name
   get-nodes:x:@.arguments/*/email
eval:x:@.before

// Invoking the intercepted HTTP endpoint.
unwrap:x:./*/http.post/*/payload/*
http.post:x:@.endpoint
   convert:true
   payload
      name:x:@.arguments/*/name
      email:x:@.arguments/*/email

// Return result of [http.post] to client.
add:x:+
   get-nodes:x:@http.post/*/content/*
return
