// How to create variable?

/*
 * Technically Hyperlambda doesn't have variables, but allows you to reference
 * any nodes in your graph object, facilitating for meta programming, where
 * snippets of Hyperlambda code can semantically change lambda objects,
 * and such dynamically build execution trees, changing and re-wiring its
 * own logic as it is executing.
 *
 * However, if you want to create a 'variable' that you do not want to invoke
 * as a slot, you can prefix the name of the node with a period (.) character.
 * This results in that the Hyperlambda execution engine will ignore that
 * node, and not trying to invoke it as a slot.
 *
 * The last parts are crucial, since by default Hyperlambda will try
 * to invoke every single node in front of its execution pointer as
 * if it was a slot. Below is an example of such a 'variable' with the
 * name of [.foo] and the value of 'bar'.
 */

// A variable named '.foo' with a value of 'bar'.
.foo:bar

/*
 * If you execute the above as Hyperlambda, nothing will happen, which
 * is kind of the point. However, try to remove the period (.) character
 * and execute it again, at which point you will be given en exception.
 * The reason for this exception is because Hyperlambda will try to
 * invoke [foo] as a slot. The [foo] slot again does not exist, resulting
 * in a 'null reference slot invocation' exception.
 */
