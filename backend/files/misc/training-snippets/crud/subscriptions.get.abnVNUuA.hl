
// CRUD read endpoint with paging, ordering, filtering selecting records from your subscriptions table in your stripe database returning subscription, username, payment_method, meta, price, product, completed filtering on subscription, username, payment_method, meta, price, product, completed with authentication and authorisation for admin,guest,root,translator roles with reCAPTCHA value of 0.8 with public HTTP caching for 300 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   recaptcha:string
   subscriptions.subscription.like:string
   subscriptions.subscription.mt:string
   subscriptions.subscription.lt:string
   subscriptions.subscription.mteq:string
   subscriptions.subscription.lteq:string
   subscriptions.subscription.neq:string
   subscriptions.subscription.eq:string
   subscriptions.payment_method.like:string
   subscriptions.payment_method.mt:string
   subscriptions.payment_method.lt:string
   subscriptions.payment_method.mteq:string
   subscriptions.payment_method.lteq:string
   subscriptions.payment_method.neq:string
   subscriptions.payment_method.eq:string
   subscriptions.meta.like:string
   subscriptions.meta.mt:string
   subscriptions.meta.lt:string
   subscriptions.meta.mteq:string
   subscriptions.meta.lteq:string
   subscriptions.meta.neq:string
   subscriptions.meta.eq:string
   subscriptions.price.like:string
   subscriptions.price.mt:string
   subscriptions.price.lt:string
   subscriptions.price.mteq:string
   subscriptions.price.lteq:string
   subscriptions.price.neq:string
   subscriptions.price.eq:string
   subscriptions.product.like:string
   subscriptions.product.mt:string
   subscriptions.product.lt:string
   subscriptions.product.mteq:string
   subscriptions.product.lteq:string
   subscriptions.product.neq:string
   subscriptions.product.eq:string
   subscriptions.completed.like:string
   subscriptions.completed.mt:string
   subscriptions.completed.lt:string
   subscriptions.completed.mteq:string
   subscriptions.completed.lteq:string
   subscriptions.completed.neq:string
   subscriptions.completed.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root,translator

// Opening up our database connection.
data.connect:stripe

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:subscriptions
      columns
         subscriptions.subscription
         subscriptions.payment_method
         subscriptions.meta
         subscriptions.price
         subscriptions.product
         subscriptions.completed
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
