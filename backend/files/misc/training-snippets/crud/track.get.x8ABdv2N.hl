
// CRUD read endpoint with filtering selecting records from your Track table in your chinook database returning TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice filtering on TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice with authentication and authorisation for admin,guest roles with reCAPTCHA value of 0.5
.arguments
   recaptcha:string
   Track.TrackId.eq:long
   Track.Name.like:string
   Track.Name.eq:string
   Track.AlbumId.eq:long
   Track.MediaTypeId.eq:long
   Track.GenreId.eq:long
   Track.Composer.like:string
   Track.Composer.eq:string
   Track.Milliseconds.eq:long
   Track.Bytes.eq:long
   Track.UnitPrice.eq:decimal

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest

// Opening up our database connection.
data.connect:chinook

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:Track
      columns
         Track.TrackId
         Track.Name
         Track.AlbumId
         Track.MediaTypeId
         Track.GenreId
         Track.Composer
         Track.Milliseconds
         Track.Bytes
         Track.UnitPrice
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
