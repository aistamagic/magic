
// CRUD create endpoint inserting one record into your subscriptions table in your stripe database taking subscription, username, payment_method, meta, price, product, completed with logging with authentication and authorisation for admin,guest,root,translator roles with reCAPTCHA value of 0.8 publishing stripe.subscriptions.post socket message when invoked
.arguments
   recaptcha:string
   subscription:string
   payment_method:string
   meta:string
   price:string
   product:string
   completed:string

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.8

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root,translator

// Logging invocation.
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:stripe.subscriptions entry created
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Opening up database connection.
data.connect:stripe

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      table:subscriptions
      return-id:bool:false
      values

   // Returning the correct status code.
   response.status.set:201

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   add:x:./*/sockets.signal
      get-nodes:x:@auth.ticket.verify
   set-name:x:./*/sockets.signal/*/auth.ticket.verify
      .:roles
   sockets.signal:stripe.subscriptions.post
      args

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      result:success
