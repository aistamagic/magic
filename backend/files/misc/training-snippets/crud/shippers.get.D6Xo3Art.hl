
// CRUD read endpoint with paging, ordering, filtering selecting records from your Shippers table in your northwind database returning ShipperID, CompanyName, Phone filtering on ShipperID, CompanyName, Phone with reCAPTCHA value of 0.5 with public HTTP caching for 35 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   recaptcha:string
   Shippers.ShipperID.eq:long
   Shippers.CompanyName.like:string
   Shippers.CompanyName.eq:string
   Shippers.Phone.like:string
   Shippers.Phone.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=35

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Opening up our database connection.
data.connect:northwind

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:Shippers
      columns
         Shippers.ShipperID
         Shippers.CompanyName
         Shippers.Phone
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
