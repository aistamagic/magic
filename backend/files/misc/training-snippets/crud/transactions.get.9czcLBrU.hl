
// CRUD read endpoint with paging, ordering, filtering selecting records from your transactions table in your stripe database returning transaction, created, username, amount, invoice, type, payment_method, affiliate filtering on transaction, created, username, amount, invoice, type, payment_method, affiliate with authentication and authorisation for admin,guest,root,translator roles with reCAPTCHA value of 0.6 with public HTTP caching for 300 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   recaptcha:string
   transactions.transaction.like:string
   transactions.transaction.mt:string
   transactions.transaction.lt:string
   transactions.transaction.mteq:string
   transactions.transaction.lteq:string
   transactions.transaction.neq:string
   transactions.transaction.eq:string
   transactions.created.mt:date
   transactions.created.lt:date
   transactions.created.mteq:date
   transactions.created.lteq:date
   transactions.created.neq:date
   transactions.created.eq:date
   transactions.amount.mt:long
   transactions.amount.lt:long
   transactions.amount.mteq:long
   transactions.amount.lteq:long
   transactions.amount.neq:long
   transactions.amount.eq:long
   transactions.invoice.like:string
   transactions.invoice.mt:string
   transactions.invoice.lt:string
   transactions.invoice.mteq:string
   transactions.invoice.lteq:string
   transactions.invoice.neq:string
   transactions.invoice.eq:string
   transactions.type.like:string
   transactions.type.mt:string
   transactions.type.lt:string
   transactions.type.mteq:string
   transactions.type.lteq:string
   transactions.type.neq:string
   transactions.type.eq:string
   transactions.payment_method.like:string
   transactions.payment_method.mt:string
   transactions.payment_method.lt:string
   transactions.payment_method.mteq:string
   transactions.payment_method.lteq:string
   transactions.payment_method.neq:string
   transactions.payment_method.eq:string
   transactions.affiliate.like:string
   transactions.affiliate.mt:string
   transactions.affiliate.lt:string
   transactions.affiliate.mteq:string
   transactions.affiliate.lteq:string
   transactions.affiliate.neq:string
   transactions.affiliate.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root,translator

// Opening up our database connection.
data.connect:stripe

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:transactions
      columns
         transactions.transaction
         transactions.created
         transactions.amount
         transactions.invoice
         transactions.type
         transactions.payment_method
         transactions.affiliate
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
