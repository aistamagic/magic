
// CRUD read endpoint with ordering, filtering selecting records from your Invoice table in your chinook database returning InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total filtering on InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total with authentication and authorisation for admin roles
.arguments
   order:string
   direction:string
   Invoice.InvoiceId.eq:long
   Invoice.CustomerId.eq:long
   Invoice.InvoiceDate.eq:date
   Invoice.BillingAddress.like:string
   Invoice.BillingAddress.eq:string
   Invoice.BillingCity.like:string
   Invoice.BillingCity.eq:string
   Invoice.BillingState.like:string
   Invoice.BillingState.eq:string
   Invoice.BillingCountry.like:string
   Invoice.BillingCountry.eq:string
   Invoice.BillingPostalCode.like:string
   Invoice.BillingPostalCode.eq:string
   Invoice.Total.eq:decimal

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:chinook

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:Invoice
      columns
         Invoice.InvoiceId
         Invoice.CustomerId
         Invoice.InvoiceDate
         Invoice.BillingAddress
         Invoice.BillingCity
         Invoice.BillingState
         Invoice.BillingCountry
         Invoice.BillingPostalCode
         Invoice.Total
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
