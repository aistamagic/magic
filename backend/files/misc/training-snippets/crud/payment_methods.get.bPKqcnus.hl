
// CRUD read endpoint with paging, ordering, filtering selecting records from your payment_methods table in your stripe database returning payment_method, username, card_no, card_type, hidden filtering on payment_method, username, card_no, card_type, hidden with private HTTP caching for 15 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   payment_methods.payment_method.like:string
   payment_methods.payment_method.eq:string
   payment_methods.card_no.like:string
   payment_methods.card_no.eq:string
   payment_methods.card_type.like:string
   payment_methods.card_type.eq:string
   payment_methods.hidden.like:string
   payment_methods.hidden.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=15

// Opening up our database connection.
data.connect:stripe

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:payment_methods
      columns
         payment_methods.payment_method
         payment_methods.card_no
         payment_methods.card_type
         payment_methods.hidden
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
