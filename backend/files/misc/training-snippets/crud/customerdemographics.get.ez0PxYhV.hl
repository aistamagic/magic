
// CRUD read endpoint with filtering selecting records from your CustomerDemographics table in your northwind database returning CustomerTypeID, CustomerDesc filtering on CustomerTypeID, CustomerDesc with authentication and authorisation for admin,guest roles with reCAPTCHA value of 0.3
.arguments
   recaptcha:string
   CustomerDemographics.CustomerTypeID.like:string
   CustomerDemographics.CustomerTypeID.eq:string
   CustomerDemographics.CustomerDesc.like:string
   CustomerDemographics.CustomerDesc.eq:string

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.3

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest

// Opening up our database connection.
data.connect:northwind

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:CustomerDemographics
      columns
         CustomerDemographics.CustomerTypeID
         CustomerDemographics.CustomerDesc
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
