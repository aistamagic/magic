
// CRUD delete endpoint deleting one record from your subscriptions table in your stripe database with subscription matching argument with logging with authentication and authorisation for admin,guest,root,translator roles with reCAPTCHA value of 0.8 publishing stripe.subscriptions.delete socket message when invoked
.arguments
   recaptcha:string
   subscription:string

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.8

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root,translator

// Logging invocation.
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:stripe.subscriptions entry deleted
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/subscription

// Opening up our database connection.
data.connect:stripe

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      table:subscriptions
      where
         and

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   add:x:./*/sockets.signal
      get-nodes:x:@auth.ticket.verify
   set-name:x:./*/sockets.signal/*/auth.ticket.verify
      .:roles
   sockets.signal:stripe.subscriptions.delete
      args

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
