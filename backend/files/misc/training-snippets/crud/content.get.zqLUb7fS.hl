
// CRUD read endpoint with paging, ordering, filtering selecting records from your content table in your headless_cms database returning content_id, title, body, created_at, updated_at filtering on content_id, title, body, created_at, updated_at with reCAPTCHA value of 0.9
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   recaptcha:string
   content.content_id.eq:long
   content.title.like:string
   content.title.eq:string
   content.body.like:string
   content.body.eq:string
   content.created_at.eq:date
   content.updated_at.eq:date

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.9

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Opening up our database connection.
data.connect:headless_cms

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:content
      columns
         content.content_id
         content.title
         content.body
         content.created_at
         content.updated_at
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
