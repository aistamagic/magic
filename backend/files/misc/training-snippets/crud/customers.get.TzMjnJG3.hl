
// CRUD read endpoint with paging, ordering, filtering selecting records from your customers table in your stripe database returning username, customer_id filtering on username, customer_id with reCAPTCHA value of 0.5 with private HTTP caching for 15 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   recaptcha:string
   customers.customer_id.like:string
   customers.customer_id.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=15

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Opening up our database connection.
data.connect:stripe

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:customers
      columns
         customers.customer_id
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
