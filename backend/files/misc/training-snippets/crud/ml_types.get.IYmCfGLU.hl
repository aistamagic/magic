
// CRUD read endpoint with paging, sorting, filtering selecting records from your ml_types table in your magic database returning type, model, max_tokens, temperature filtering on type, model, max_tokens, temperature with authentication and authorisation for root roles
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   ml_types.type.like:string
   ml_types.type.eq:string
   ml_types.model.like:string
   ml_types.model.eq:string
   ml_types.max_tokens.eq:long
   ml_types.temperature.eq:double

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:magic

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:ml_types
      columns
         ml_types.type
         ml_types.model
         ml_types.max_tokens
         ml_types.temperature
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
