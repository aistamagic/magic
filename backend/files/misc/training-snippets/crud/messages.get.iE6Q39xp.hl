
// CRUD read endpoint with paging, ordering, filtering selecting records from your messages table in your tickets database returning id, ticket, created, user, description filtering on id, ticket, created, user, description with authentication and authorisation for admin,root,translator roles with public HTTP caching for 180 seconds
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   messages.id.mt:long
   messages.id.lt:long
   messages.id.mteq:long
   messages.id.lteq:long
   messages.id.neq:long
   messages.id.eq:long
   messages.ticket.mt:long
   messages.ticket.lt:long
   messages.ticket.mteq:long
   messages.ticket.lteq:long
   messages.ticket.neq:long
   messages.ticket.eq:long
   messages.created.mt:date
   messages.created.lt:date
   messages.created.mteq:date
   messages.created.lteq:date
   messages.created.neq:date
   messages.created.eq:date
   messages.description.like:string
   messages.description.mt:string
   messages.description.lt:string
   messages.description.mteq:string
   messages.description.lteq:string
   messages.description.neq:string
   messages.description.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=180

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,root,translator

// Opening up our database connection.
data.connect:tickets

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:messages
      columns
         messages.id
         messages.ticket
         messages.created
         messages.description
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
