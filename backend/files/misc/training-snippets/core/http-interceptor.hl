
// HTTP POST interceptor endpoint invoking your-app.com/your-endpoint passing in all arguments to your-app.com/your-endpoint invoking [.before] before and [.after] after
.arguments:*
.description:HTTP POST interceptor endpoint invoking your-app.com/your-endpoint passing in all arguments to your-app.com/your-endpoint invoking [.before] before and [.after] after

// Endpoint we're intercepting.
.endpoint:"https://your-app.com/your-endpoint"

/*
 * Retrieving Authorization header to transmit to
 * intercepted endpoint.
 */
request.headers.get:Authorization

/*
 * Lambda object executed as an "intercepted lambda object"
 * before invocation to HTTP endpoint.
 */
.before

/*
 * This is where you would parametrise your above [.before] object
 * with for instance arguments given by the client, before the
 * invocation to [eval] below.
 */

// Evaluating [.before] lambda object.
eval:x:@.before

// Forwarding arguments given to endpoint to intercepted endpoint.
add:x:../*/http.post/*/payload
   get-nodes:x:@.arguments/*

/*
 * Checking if we've got an Authorization HTTP header,
 * at which point we forward it to the original HTTP endpoint.
 */
if
   not-null:x:@request.headers.get
   .lambda
      add:x:../*/http.post/*/headers
         .
            Authorization:x:@request.headers.get

// Invoking the intercepted HTTP endpoint.
http.post:x:@.endpoint
   headers
      Content-Type:application/json
   convert:true
   payload

// Sanity checking invocation to endpoint.
if
   not
      and
         mte:x:@http.post
            .:int:200
         lt:x:@http.post
            .:int:400
   .lambda
      log.error:Something went wrong as we invoked our intercepted HTTP endpoint
         endpoint:x:@.endpoint
         status:x:@http.post
         result:x:@http.post/*/content
      throw:Intercepted endpoint did not return success
         public:true
         status:502

/*
 * Lambda object to execute after invocation to
 * intercepted endpoint.
 */
.after

/*
 * This is where you would parametrise your above [.after] object
 * with for instance arguments given by the client, before the
 * invocation to [eval] below.
 */

// Evaluating [.before] lambda object.
eval:x:@.after

// Return result to caller.
add:x:+
   get-nodes:x:@http.post/*/content/*
return
