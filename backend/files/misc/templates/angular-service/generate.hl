
// Generates an Angular HTTP service frontend for you wrapping the given [endpoints].
.description:@"Generates an Angular frontend HTTP client service according to the given arguments.
The frontend will have one method group for each of your grouped CRUD methods."

/*
 * Retrieves main folder we're currently working in, to allow
 * for retrieving files relative to our current "working directory".
 */
io.path.get-folder:x:@.filename

/*
 * Transforming our CRUD methods, such that they become slightly more structured.
 * 
 * This is later used to generate our components, since we create one component for each
 * CRUD type of endpoint that we were given as input.
 */
.crud-methods
add:x:+/*
   get-nodes:x:@.arguments/*
add:x:@.crud-methods
   io.file.execute:/misc/templates/common/structure-endpoints.hl

/*
 * Creating our HTTP Client service method implementations,
 * by invoking a helper file responsible for parsing arguments,
 * and creating our TypeScript HTTP client methods accordingly.
 */
.http-service-methods
add:x:+/*
   get-nodes:x:@.crud-methods/*
set-value:x:@.http-service-methods
   io.file.execute:/misc/templates/common/create-angular-service-methods.hl

// This will contain all template files.
.main-files

// Loads all files in "main" Angular template folder recursively.
unwrap:x:+/*/*/*
add:x:@.main-files
   signal:magic.io.file.load-recursively
      strings.concat
         .:x:@io.path.get-folder
         .:templates/main/

/*
 * Removing "root" parts of our folder names in [.main-files], to make a
 * more friendly folder structure that we return to caller.
 */
strings.trim-start:x:@io.path.get-folder
   .:/
for-each:x:@.main-files/*
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         strings.concat
            get-value:x:@strings.trim-start
            .:templates/main
         get-value:x:@.arguments/*/name

/*
 * Iterating through each [.main-files] and doing substitutions
 * according to specifications and META data.
 */
for-each:x:@.main-files/*/*

   // Replacing all [[apiUrl]] occurrencies.
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[apiUrl]]
         get-value:x:@.arguments/*/apiUrl

   // Replacing all [[environmentDomain]] occurrencies.
   strings.split:x:@.arguments/*/apiUrl
      .:"://"
   strings.split:x:-/1
      .:/
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[environmentDomain]]
         get-value:x:@strings.split/0

   // Replacing all [[http-client-service-method-implementations]] occurrencies.
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[http-client-service-method-implementations]]
         get-value:x:@.http-service-methods

// Adding all generated files to return value.
add:x:../*/return-nodes
   get-nodes:x:@.main-files/*
add:x:../*/return-nodes
   get-nodes:x:@.components/*

// Applying copyright, if given.
if
   and
      not
         eq
            get-value:x:@.arguments/*/copyright
            .:
      not
         eq
            get-value:x:@.arguments/*/copyright
            .
   .lambda

      // Copyright notice was supplied.
      for-each:x:../*/return-nodes/*
         if
            or
               strings.ends-with:x:@.dp/#
                  .:.ts
               strings.ends-with:x:@.dp/#
                  .:.js
               strings.ends-with:x:@.dp/#
                  .:.css
               strings.ends-with:x:@.dp/#
                  .:.scss
               strings.ends-with:x:@.dp/#
                  .:.sass
            .lambda

               /*
                * Currently iterated file is of a type that can tolerate
                * having a copyright header comment.
                */
               set-value:x:@.dp/#/*
                  strings.concat
                     .:@"/*
"
                     .:" * "
                     get-value:x:@.arguments/*/copyright
                     .:@"
 */
"
                     get-value:x:@.dp/#/*

// Returning all generated files to caller.
return-nodes
