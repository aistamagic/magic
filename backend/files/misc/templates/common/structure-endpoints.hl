
/*
 * Internal helper file to retrieve all CRUD methods, structured format,
 * according to specified [.arguments].
 * 
 * Notice, this file simply creates a slightly more organized graph object from
 * the HTTP methods that happens to be of HTTP CRUD type, and only if there
 * exists a "crud-read" type of endpoint, at the very least.
 */
.result

/*
 * Iterating through each CRUD endpoint.
 * 
 * Notice, CRUD [type] of "crud-read" is the "driver", and decides whether
 * or not we should create a component in the first place at all.
 */
for-each:x:@.arguments/*/endpoints/*/*/type/=crud-read/.

   // Figuring out a valid component name, component filename, etc.
   strings.split:x:@.dp/#/*/path
      .:/
   remove-nodes:x:@strings.split/0
   remove-nodes:x:@strings.split/0
   strings.join:x:@strings.split/*
      .:/
   strings.replace-not-of:x:@strings.join
      .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/_0987654321
      .:_
   strings.replace-not-of:x:@strings.join
      .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
      .:_

   // Component selector.
   strings.concat
      .:app-
      get-value:x:@strings.replace-not-of

   // Component name.
   strings.capitalize:x:@strings.replace-not-of
   strings.concat
      get-value:x:@strings.capitalize
      .:Component

   // Component filename.
   strings.concat
      get-value:x:@strings.replace-not-of
      .:.component

   // Its "edit" component name.
   strings.concat
      .:Edit
      get-value:x:@strings.capitalize
      .:Component

   // Its "edit" component filename.
   strings.concat
      .:edit.
      get-value:x:@strings.replace-not-of
      .:.component

   // The component's header
   strings.capitalize:x:@strings.split/0/-

   // Table name
   strings.replace:x:@strings.join
      .:/
      .:.
   remove-nodes:x:@strings.split/0
   strings.join:x:@strings.split/*
      .:/
   strings.replace:x:@strings.join
      .:/
      .:.

   // Buffer to hold our endpoints data.
   unwrap:x:+/*/*
   .endpoint
      .
         url:x:@.dp/#/*/path
         component-selector:x:@strings.concat/@strings.concat/@strings.concat/@strings.concat/@strings.concat
         component-name:x:@strings.concat/@strings.concat/@strings.concat/@strings.concat
         component-filename:x:@strings.concat/@strings.concat/@strings.concat
         component-folder:x:@strings.replace-not-of/@strings.replace-not-of
         table-name:x:@strings.replace/@strings.replace
         database-name:x:@strings.replace
         component-header:x:@strings.capitalize
         component-edit-name:x:@strings.concat/@strings.concat
         component-edit-filename:x:@strings.concat
         component-routing-url:x:@strings.replace-not-of/@strings.replace-not-of
         verbs

   // Finding all related endpoints.
   for-each:x:@.arguments/*/endpoints/*
      if
         eq
            get-value:x:@.dp/#/*/path
            get-value:x:@for-each/@.dp/#/*/path
         .lambda

            // Figuring out HTTP client service method name.
            .method
            switch:x:@.dp/#/*/verb
               case:delete
                  set-value:x:@.method
                     .:delete
               case:post
                  set-value:x:@.method
                     .:create
               case:put
                  set-value:x:@.method
                     .:update
               case:get
                  set-value:x:@.method
                     .:read
            strings.split:x:@.dp/#/*/path
               .:/
            remove-nodes:x:@strings.split/0
            remove-nodes:x:@strings.split/0
            strings.join:x:@strings.split/*
               .:_
            strings.concat
               strings.replace-not-of:x:@strings.join
                  .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
                  .:_
               .:.
               get-value:x:@.method

            // Adding input and output arguments to endpoint.
            add:x:./**/input
               get-nodes:x:@.dp/#/*/input/*
            add:x:./**/output
               get-nodes:x:@.dp/#/*/output/*

            /*
             * Setting correct verb, unwrapping service method name,
             * and adding currently iterated HTTP verb to temporary [.endpoint],
             * that we later return to caller.
             */
            set-name:x:+/+/*/*
               get-value:x:@.dp/#/*/verb
            unwrap:x:+/*/*/*/service-method-name
            add:x:@.endpoint/*/*/verbs
               .
                  verb-name
                     service-method-name:x:@strings.concat
                     input
                     output
                     auth

            // Adding each role that are allowed to access URL/verb combination.
            for-each:x:@.dp/#/*/auth/*
               unwrap:x:+/*/*
               add:x:@.endpoint/*/*/verbs/0/-/*/auth
                  .
                     .:x:@.dp/#
      else-if
         and
            eq
               strings.concat
                  get-value:x:@for-each/@.dp/#/*/path
                  .:-count
               get-value:x:@.dp/#/*/path
            eq
               get-value:x:@.dp/#/*/type
               .:crud-count
         .lambda

            // Component's "count" method.
            strings.split:x:@for-each/@.dp/#/*/path
               .:/
            strings.replace-not-of:x:@strings.join/@strings.join
               .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
               .:_
            strings.concat
               get-value:x:@strings.replace-not-of
               .:.count
            unwrap:x:+/*/*
            insert-before:x:@.endpoint/0/-/*/verbs
               .
                  count-method:x:@strings.concat

   // Adding endpoint to temporary [.result] node above.
   add:x:@.result
      get-nodes:x:@.endpoint/*

// Returning results to caller.
return-nodes:x:@.result/*
