
/*
 * Internal helper file to create service method implementations (Angular style),
 * according to specified [.arguments].
 * 
 * Notice, this file creates a service method for every single HTTP endpoint caller
 * has told us he wants to wrap. The files expects its [.arguments] to be in
 * structured format, as created by the structure-endpoint.hl file.
 */

// Iterating through each service endpoint.
.http-service-methods
for-each:x:@.arguments/*

   // Creating main property for service class.
   .interface:ICrudEntity
   if
      and
         not
            exists:x:@.dp/#/*/verbs/*/put
         not
            exists:x:@.dp/#/*/verbs/*/post
         not
            exists:x:@.dp/#/*/verbs/*/delete
      .lambda
         set-value:x:@.interface
            .:IREntity
   else-if
      and
         not
            exists:x:@.dp/#/*/verbs/*/put
         not
            exists:x:@.dp/#/*/verbs/*/post
      .lambda
         set-value:x:@.interface
            .:IRdEntity
   else-if
      and
         not
            exists:x:@.dp/#/*/verbs/*/put
         not
            exists:x:@.dp/#/*/verbs/*/delete
      .lambda
         set-value:x:@.interface
            .:ICrEntity
   else-if
      and
         not
            exists:x:@.dp/#/*/verbs/*/post
         not
            exists:x:@.dp/#/*/verbs/*/delete
      .lambda
         set-value:x:@.interface
            .:IRuEntity
   else-if
      not
         exists:x:@.dp/#/*/verbs/*/delete
      .lambda
         set-value:x:@.interface
            .:ICruEntity
   else-if
      not
         exists:x:@.dp/#/*/verbs/*/post
      .lambda
         set-value:x:@.interface
            .:IRudEntity
   else-if
      not
         exists:x:@.dp/#/*/verbs/*/put
      .lambda
         set-value:x:@.interface
            .:ICrdEntity
   .method
   set-value:x:@.method
      strings.concat
         .:@"
  /**
   * HTTP CRUD service methods for your '"
         strings.replace:x:@.dp/#/*/component-folder
            .:/
            .:_
         .:@"' entities.
   */
  get "
         strings.replace:x:@.dp/#/*/component-folder
            .:/
            .:_
         .:"() : "
         get-value:x:@.interface
         .:@" {
    return {
"

   // Iterating through each HTTP verb in method group.
   for-each:x:@.dp/#/*/verbs/*
      get-name:x:@.dp/#
      switch:x:-
         case:post

            // Adding 'create' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      create: (args: any) => {
        return this.httpClient.post<CreateResponse>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"',
          args);
      },
"
         case:get

            // Adding 'read' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      read: (filter: any) => {
        return this.httpClient.get<any[]>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"' +
          this.getQueryArgs(filter));
      },
"

            // Adding 'count' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      count: (filter: any) => {
        return this.httpClient.get<CountResponse>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"-count' +
          this.getQueryArgs(filter));
      },
"
         case:put

            // Adding 'update' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      update: (args: any) => {
        return this.httpClient.put<UpdateResponse>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"',
          args);
      },
"
         case:delete

            // Adding 'delete' method to method group.
            set-value:x:@.method
               strings.concat
                  get-value:x:@.method
                  .:@"
      delete: (filter: any) => {
        return this.httpClient.delete<DeleteResponse>(
          environment.apiUrl +
          '"
                  get-value:x:@.dp/#/././*/url
                  .:@"' +
          this.getQueryArgs(filter));
      },
"

   // Closing main property for service class, and trimming superflous characters.
   set-value:x:@.method
      strings.concat
         strings.trim-end:x:@.method
            .:@"
,"
         .:@"
    }
  }
"

   // Appending currently iterated method groupd to returned value.
   set-value:x:@.http-service-methods
      strings.concat
         get-value:x:@.http-service-methods
         get-value:x:@.method

// Returning TypeScript for method implementations to caller.
return-value:x:@.http-service-methods
