
/*
 * Internal helper file that creates our components according to
 * which endpoints we have at our disposal.
 * 
 * The file will perform substitutions according to a [[xx]] pattern,
 * substituting values in our component templates, return a list of
 * substituted specialized template files, depending upon which arguments
 * you supply.
 * 
 * The file expects [root-folder] argument being the root folder for the
 * generator template currently being used.
 */

/*
 * This is our buffer element, and will contain all component
 * files, that are eventually returned to caller at the bottom
 * of the file.
 */
.components

/*
 * Loading form control file, that contains the declaration
 * for a single form control.
 */
.form-control-file
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/misc/form-control.ts
set-value:x:@.form-control-file
   io.file.load:x:@strings.concat

/*
 * Loading column file, that contains the HTML markup for a single
 * column, including its specialized versions for specific types.
 */
.column-file
   long
   date
   bool
   lookup
   image
   file
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/column/column.html
set-value:x:@.column-file
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/column/column.long.html
set-value:x:@.column-file/*/long
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/column/column.date.html
set-value:x:@.column-file/*/date
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/column/column.bool.html
set-value:x:@.column-file/*/bool
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/column/column.lookup.html
set-value:x:@.column-file/*/lookup
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/column/column.image.html
set-value:x:@.column-file/*/image
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/column/column.file.html
set-value:x:@.column-file/*/file
   io.file.load:x:@strings.concat

/*
 * Loading view details file, that contains the declaration
 * for viewing a single element's details, including its specialized versions
 * for specific types.
 */
.view-details-file
   date
   bool
   lookup
   image
   file
   email
   url
   phone
   youtube
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.html
set-value:x:@.view-details-file
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.date.html
set-value:x:@.view-details-file/*/date
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.bool.html
set-value:x:@.view-details-file/*/bool
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.lookup.html
set-value:x:@.view-details-file/*/lookup
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.image.html
set-value:x:@.view-details-file/*/image
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.file.html
set-value:x:@.view-details-file/*/file
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.email.html
set-value:x:@.view-details-file/*/email
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.url.html
set-value:x:@.view-details-file/*/url
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.phone.html
set-value:x:@.view-details-file/*/phone
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/view-details/view-details.youtube.html
set-value:x:@.view-details-file/*/youtube
   io.file.load:x:@strings.concat

/*
 * Loading form field file, that contains the input necessary to
 * edit a single column's value during editing, including its specializaed type overrides.
 */
.form-field-file
   long
   textarea
   bool
   date
   decimal
   selector
   autocomplete
   image
   file
   username_lookup
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.html
set-value:x:@.form-field-file
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.long.html
set-value:x:@.form-field-file/*/long
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.decimal.html
set-value:x:@.form-field-file/*/decimal
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.bool.html
set-value:x:@.form-field-file/*/bool
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.date.html
set-value:x:@.form-field-file/*/date
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.selector.html
set-value:x:@.form-field-file/*/selector
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.autocomplete.html
set-value:x:@.form-field-file/*/autocomplete
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.image.html
set-value:x:@.form-field-file/*/image
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.file.html
set-value:x:@.form-field-file/*/file
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.textarea.html
set-value:x:@.form-field-file/*/textarea
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-field/form-field.username_lookup.html
set-value:x:@.form-field-file/*/username_lookup
   io.file.load:x:@strings.concat

/*
 * Loading form control instantiations file, that instantiates
 * a single form control somehow, including its specialized type versions.
 */
.form-control-instantiation-file
   string
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-control-instantiations/form-control-instantiations.ts
set-value:x:@.form-control-instantiation-file
   io.file.load:x:@strings.concat
strings.concat
   get-value:x:@.arguments/*/root-folder
   .:templates/form-control-instantiations/form-control-instantiations.string.ts
set-value:x:@.form-control-instantiation-file/*/string
   io.file.load:x:@strings.concat

// Iterating through each CRUD method given.
for-each:x:@.arguments/*/.crud-methods/*

   /*
    * Verifying CRUD endpoint have GET CRUD endpoint, otherwise
    * we don't create a component for it.
    */
   if
      exists:x:@.dp/#/*/verbs/*/get
      .lambda

         /*
          * Currently iterated endpoint can handle the GET verb, hence
          * at the minimum we should create a datagrid "view" component.
          */
         .substitutions

            // URL of endpoint we're currently encapsulating.
            endpoint-url

            // Primary keys for entity
            primary-keys:

            // Input to DELETE endpoint.
            delete-input:

            // Input to POST endpoint.
            create-input:

            // Input to PUT endpoint.
            update-input:

            // How many columns our table contains.

            // Notice, it always has at least one column, its delete-item column.
            container-count:int:1

            // All table column declarations. (normally HTML)
            ng-containers

            // View details for an entity. (normally HTML)
            view-details

            // A TypeScript list of strings, declaring which columns are visible in table.
            displayed-columns:

            // TypeScript fields/properties, declaring the columns.
            form-controls

            // Declaration for a single column. (normally HTML)
            form-fields

            // Instantiations for each above form field.
            form-controls-instantiations

            dates-to-format:

         // Setting the URL for our endpoint.
         set-value:x:@.substitutions/*/endpoint-url
            get-value:x:@.dp/#/*/url

         /*
          * Figuring out input to our DELETE method, which happens to
          * also be the primary keys for table - Hence setting primary
          * keys in the same operation.
          */
         for-each:x:@.dp/#/*/verbs/*/delete/*/input/*
            set-value:x:@.substitutions/*/primary-keys
               strings.concat
                  get-value:x:@.substitutions/*/primary-keys
                  .:", '"
                  get-value:x:@.dp/#/*/name
                  .:"'"
            set-value:x:@.substitutions/*/delete-input
               strings.concat
                  get-value:x:@.substitutions/*/delete-input
                  .:", '"
                  get-value:x:@.dp/#/*/name
                  .:"': el['"
                  get-value:x:@.dp/#/*/name
                  .:"']"

         // Trimming away additional ',' and ' ' characters.
         set-value:x:@.substitutions/*/delete-input
            strings.trim:x:@.substitutions/*/delete-input
               .:", "
         set-value:x:@.substitutions/*/primary-keys
            strings.trim:x:@.substitutions/*/primary-keys
               .:", "

         // Figuring out input to our POST method.
         for-each:x:@.dp/#/*/verbs/*/post/*/input/*
            set-value:x:@.substitutions/*/create-input
               strings.concat
                  get-value:x:@.substitutions/*/create-input
                  .:@",
      '"
                  get-value:x:@.dp/#/*/name
                  .:"'"
         set-value:x:@.substitutions/*/create-input
            strings.trim:x:@.substitutions/*/create-input
               .:", "

         // Figuring out input to our PUT method.
         for-each:x:@.dp/#/*/verbs/*/put/*/input/*
            set-value:x:@.substitutions/*/update-input
               strings.concat
                  get-value:x:@.substitutions/*/update-input
                  .:@",
      '"
                  get-value:x:@.dp/#/*/name
                  .:"'"
         set-value:x:@.substitutions/*/update-input
            strings.trim:x:@.substitutions/*/update-input
               .:", "

         /*
          * Now we know input to POST, PUT and DELETE endpoints.
          * 
          * Now we can start creating our datagrid component, and our edit/create component.
          */

         /*
          * Dynamically creating our datagrid parts, and our form controls
          * for editing entities.
          * 
          * Notice - We use the GET methods here to find out what columns to create for our
          * grids.
          */
         for-each:x:@.dp/#/*/verbs/*/get/*/output/*

            /*
             * Column exists in GET output, now we need to check if the column is
             * a primary key - At which point we only display the column if the URL
             * does NOT have a PUT verb, or the primary key is of type string. This is chosen
             * because URLs without PUT typically ONLY have primary key columns - Hence, if we
             * don't display primary keys for such endpoints, we have NOTHING to display.
             * Besides, such columns are also often foreign keys into other tables.
             * 
             * Notice, if the column is a lookup it is ALWAYS displayed in the main grid.
             * 
             * While also primary keys with type string is also typically a part of
             * the "main data" of the entity.
             * 
             * Notice, even though we do not display primary keys by default in grid/table/view-details,
             * we still create a wrapper component/ng-container for these, because end user
             * might want to have the columns displayed depending upon requirements, and/or
             * specific tables, etc.
             */
            .should-display:bool:false
            strings.concat
               .:@.dp/#/./././*/delete/*/input/*/*/name/=
               get-value:x:@.dp/#/*/name
               .:/./*/type/=string
            strings.concat
               .:@.dp/#/./././*/delete/*/input/*/*/name/=
               get-value:x:@.dp/#/*/name
            set-x:x:+/+/0/1
               convert:x:@strings.concat/@strings.concat
                  type:x
            set-x:x:+/0/0/0
               convert:x:@strings.concat
                  type:x
            if
               or
                  not
                     exists
                  exists
                  not
                     exists:x:@.dp/#/./././*/put
                  exists:x:@.dp/#/*/lookup/*
               .lambda

                  /*
                   * Checking if there's another field that starts out with the column's name, followed by a ".",
                   * implying it's a foreign key field, based upon currently iterated column - At which point we
                   * do NOT display the column.
                   */
                  .is-foreign:bool:false
                  for-each:x:@for-each/@.dp/#/*/verbs/*/get/*/output/*
                     if
                        strings.starts-with:x:@.dp/#/*/name
                           strings.concat
                              get-value:x:@for-each/@.dp/#/*/name
                              .:.
                        .lambda

                           /*
                            * Another output column starts with the name of currently iterated column, and
                            * adds a "." followed by something more. This implies that this is a foreign key
                            * field, and the column has already been displayed, or will be displayed in later
                            * iterations, using it foreign table lookup field.
                            * 
                            * We do NOT display such fields by default, but we create a form control in case
                            * user wants to (easily) display these anyways.
                            */
                           set-value:x:@.is-foreign
                              .:bool:true
                  if
                     eq
                        get-value:x:@.is-foreign
                        .:bool:false
                     .lambda

                        // Storing the fact of that this is a field we're interested in displaying.
                        set-value:x:@.should-display
                           .:bool:true

                        // Making sure we increment colspan value.
                        set-value:x:@.substitutions/*/container-count
                           math.increment:x:@.substitutions/*/container-count

                        // Appending currently iterated column to [displayed-columns]
                        set-value:x:@.substitutions/*/displayed-columns
                           strings.concat
                              get-value:x:@.substitutions/*/displayed-columns
                              .:@",
    '"
                              get-value:x:@.dp/#/*/name
                              .:"'"

            // Figuring out entire column name.
            .col-name-tmp
            if
               strings.contains:x:@.dp/#/*/name
                  .:.
               .lambda
                  set-value:x:@.col-name-tmp
                     get-value:x:@.dp/#/*/name
            else
               set-value:x:@.col-name-tmp
                  strings.concat
                     get-value:x:@for-each/@.dp/#/*/database-name
                     .:.
                     get-value:x:@.dp/#/*/name

            /*
             * Finding filtering column in [input] for currently iterated [output] column.
             */
            .col-filter
            for-each:x:@.dp/@.dp/#/*/verbs/*/get/*/input/*
               if
                  strings.ends-with:x:@.dp/#/*/name
                     strings.concat
                        get-value:x:@.dp/@.dp/#/*/name
                        .:.like
                  .lambda
                     set-value:x:@.col-filter
                        get-value:x:@.dp/#/*/name
               else-if
                  and
                     null:x:@.col-filter
                     strings.ends-with:x:@.dp/#/*/name
                        strings.concat
                           get-value:x:@.dp/@.dp/#/*/name
                           .:.eq
                  .lambda
                     set-value:x:@.col-filter
                        get-value:x:@.dp/#/*/name

            /*
             * Checking if this is a lookup type of field, implying a foreign key into
             * another table.
             */
            .lookup:bool:false
            if
               exists:x:@.dp/#/*/lookup/*
               .lambda

                  // Using the autocomplete component for our filtering control.
                  set-value:x:@.lookup
                     .:bool:true
                  strings.replace:x:@.column-file/*/lookup
                     .:[[column-name]]
                     get-value:x:@.dp/#/*/name
                  strings.replace:x:@strings.replace
                     .:[[lookup_key]]
                     get-value:x:@.dp/#/*/lookup/*/key
                  strings.replace:x:@strings.replace
                     .:[[lookup_name]]
                     get-value:x:@.dp/#/*/lookup/*/name
                  strings.replace:x:@strings.replace
                     .:[[lookup_table]]
                     get-value:x:@.dp/#/*/lookup/*/service
                  strings.replace:x:@strings.replace
                     .:[[lookup_table_with_namespace]]
                     get-value:x:@.dp/#/*/lookup/*/table
                  set-value:x:@.substitutions/*/ng-containers
                     strings.concat
                        get-value:x:@.substitutions/*/ng-containers
                        get-value:x:@strings.replace

                  // Applying correct changes to view-details parts.
                  strings.replace:x:@.view-details-file/*/lookup
                     .:[[column-name]]
                     get-value:x:@.dp/#/*/name
                  strings.replace:x:@strings.replace
                     .:[[lookup_key]]
                     get-value:x:@.dp/#/*/lookup/*/key
                  strings.replace:x:@strings.replace
                     .:[[lookup_name]]
                     get-value:x:@.dp/#/*/lookup/*/name
                  strings.replace:x:@strings.replace
                     .:[[lookup_table]]
                     get-value:x:@.dp/#/*/lookup/*/service
                  strings.replace:x:@strings.replace
                     .:[[lookup_table_with_namespace]]
                     get-value:x:@.dp/#/*/lookup/*/table
                  strings.replace:x:@strings.replace
                     .:[[form-control-name]]
                     strings.replace-not-of:x:@.dp/#/*/name
                        .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                        .:_
                  set-value:x:@.substitutions/*/view-details
                     strings.concat
                        get-value:x:@.substitutions/*/view-details
                        get-value:x:@strings.replace
            else

               // Checking if this column should be displayed.
               if
                  get-value:x:@.should-display
                  .lambda

                     /*
                      * Appending currently iterated column to [view-details].
                      * 
                      * Notice, some types have specialized implementations, such as for instance
                      * date types, etc.
                      */
                     switch:x:@.dp/#/*/type

                        // Date type.
                        case:date
                           set-value:x:@.substitutions/*/view-details
                              strings.concat
                                 get-value:x:@.substitutions/*/view-details
                                 strings.replace:x:@.view-details-file/*/date
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name

                        // Boolean type.
                        case:bool
                           set-value:x:@.substitutions/*/view-details
                              strings.concat
                                 get-value:x:@.substitutions/*/view-details
                                 strings.replace:x:@.view-details-file/*/bool
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name

                        // Default (anything not having a specialized implementation).
                        default
                           if
                              eq:x:@.dp/#/*/handling
                                 .:image
                              .lambda
                                 set-value:x:@.substitutions/*/view-details
                                    strings.concat
                                       get-value:x:@.substitutions/*/view-details
                                       strings.replace:x:@.view-details-file/*/image
                                          .:[[column-name]]
                                          get-value:x:@.dp/#/*/name
                           else-if
                              eq:x:@.dp/#/*/handling
                                 .:file
                              .lambda
                                 set-value:x:@.substitutions/*/view-details
                                    strings.concat
                                       get-value:x:@.substitutions/*/view-details
                                       strings.replace:x:@.view-details-file/*/file
                                          .:[[column-name]]
                                          get-value:x:@.dp/#/*/name
                           else-if
                              eq:x:@.dp/#/*/handling
                                 .:email
                              .lambda
                                 set-value:x:@.substitutions/*/view-details
                                    strings.concat
                                       get-value:x:@.substitutions/*/view-details
                                       strings.replace:x:@.view-details-file/*/email
                                          .:[[column-name]]
                                          get-value:x:@.dp/#/*/name
                           else-if
                              eq:x:@.dp/#/*/handling
                                 .:url
                              .lambda
                                 set-value:x:@.substitutions/*/view-details
                                    strings.concat
                                       get-value:x:@.substitutions/*/view-details
                                       strings.replace:x:@.view-details-file/*/url
                                          .:[[column-name]]
                                          get-value:x:@.dp/#/*/name
                           else-if
                              eq:x:@.dp/#/*/handling
                                 .:youtube
                              .lambda
                                 set-value:x:@.substitutions/*/view-details
                                    strings.concat
                                       get-value:x:@.substitutions/*/view-details
                                       strings.replace:x:@.view-details-file/*/youtube
                                          .:[[column-name]]
                                          get-value:x:@.dp/#/*/name
                           else-if
                              eq:x:@.dp/#/*/handling
                                 .:phone
                              .lambda
                                 set-value:x:@.substitutions/*/view-details
                                    strings.concat
                                       get-value:x:@.substitutions/*/view-details
                                       strings.replace:x:@.view-details-file/*/phone
                                          .:[[column-name]]
                                          get-value:x:@.dp/#/*/name
                           else
                              set-value:x:@.substitutions/*/view-details
                                 strings.concat
                                    get-value:x:@.substitutions/*/view-details
                                    strings.replace:x:@.view-details-file
                                       .:[[column-name]]
                                       get-value:x:@.dp/#/*/name

               /*
                * Making sure we create a TypeScript instance of correct type to
                * hold our column.
                */
               set-value:x:@.substitutions/*/form-controls
                  strings.concat
                     get-value:x:@.substitutions/*/form-controls
                     strings.replace:x:@.form-control-file
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_

               /*
                * Making sure we correctly instantiate our TypeScript instance.
                * 
                * Notice, some types have specialized implementations here.
                */
               switch:x:@.dp/#/*/type

                  // String type.
                  case:string
                     strings.replace:x:@.form-control-instantiation-file/*/string
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/form-controls-instantiations
                        strings.concat
                           get-value:x:@.substitutions/*/form-controls-instantiations
                           strings.replace:x:@strings.replace
                              .:[[column-filter]]
                              get-value:x:@.col-filter

                  // Default (anything not having a specialized implementation).
                  default
                     strings.replace:x:@.form-control-instantiation-file
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/form-controls-instantiations
                        strings.concat
                           get-value:x:@.substitutions/*/form-controls-instantiations
                           strings.replace:x:@strings.replace
                              .:[[column-filter]]
                              get-value:x:@.col-filter

               /*
                * Appending currently iterated column to [.ng-containers].
                * 
                * Notice, some types have specialized implementations here.
                */
               switch:x:@.dp/#/*/type

                  // Long type.
                  case:long
                  case:int
                     strings.replace:x:@.column-file/*/long
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/ng-containers
                        strings.concat
                           get-value:x:@.substitutions/*/ng-containers
                           strings.replace:x:@strings.replace
                              .:[[column-name]]
                              get-value:x:@.dp/#/*/name

                  // Date type.
                  case:date
                     strings.replace:x:@.column-file/*/date
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/ng-containers
                        strings.concat
                           get-value:x:@.substitutions/*/ng-containers
                           strings.replace:x:@strings.replace
                              .:[[column-name]]
                              get-value:x:@.dp/#/*/name

                  // Bool type.
                  case:bool
                     strings.replace:x:@.column-file/*/bool
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/ng-containers
                        strings.concat
                           get-value:x:@.substitutions/*/ng-containers
                           strings.replace:x:@strings.replace
                              .:[[column-name]]
                              get-value:x:@.dp/#/*/name

                  // Default (anything not having a specialized implementation).
                  default
                     if
                        eq:x:@.dp/#/*/handling
                           .:image
                        .lambda
                           strings.replace:x:@.column-file/*/image
                              .:[[form-control-name]]
                              strings.replace-not-of:x:@.dp/#/*/name
                                 .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                                 .:_
                           set-value:x:@.substitutions/*/ng-containers
                              strings.concat
                                 get-value:x:@.substitutions/*/ng-containers
                                 strings.replace:x:@strings.replace
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name
                     else-if
                        eq:x:@.dp/#/*/handling
                           .:file
                        .lambda
                           strings.replace:x:@.column-file/*/file
                              .:[[form-control-name]]
                              strings.replace-not-of:x:@.dp/#/*/name
                                 .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                                 .:_
                           set-value:x:@.substitutions/*/ng-containers
                              strings.concat
                                 get-value:x:@.substitutions/*/ng-containers
                                 strings.replace:x:@strings.replace
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name
                     else
                        strings.replace:x:@.column-file
                           .:[[form-control-name]]
                           strings.replace-not-of:x:@.dp/#/*/name
                              .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                              .:_
                        set-value:x:@.substitutions/*/ng-containers
                           strings.concat
                              get-value:x:@.substitutions/*/ng-containers
                              strings.replace:x:@strings.replace
                                 .:[[column-name]]
                                 get-value:x:@.dp/#/*/name

               // Replacing full name.
               set-value:x:@.substitutions/*/ng-containers
                  strings.replace:x:@.substitutions/*/ng-containers
                     .:[[column-full-name]]
                     get-value:x:@.col-name-tmp

         /*
          * Dynamically creating our editor component.
          * 
          * Notice, this relies upon the combined input of both our
          * POST and PUT endpoint's input. Depending upon whether or not
          * it's a PUT or POST invocation, we'll hide some fields, depending upon
          * which input these different endpoints requires.
          */
         .form-fields

         // First adding PUT input to above [.form-fields].
         for-each:x:@.dp/#/*/verbs/*/put/*/input/*
            add:x:@.form-fields
               get-nodes:x:@.dp/#

         /*
          * Then adding POST input to above [.form-fields], making sure
          * we don't add fields already existing in PUT input.
          */
         for-each:x:@.dp/#/*/verbs/*/post/*/input/*

            // Checking if above PUT loop already added currently iterated field.
            .exists:bool:false
            for-each:x:@.form-fields/*
               if
                  eq
                     get-value:x:@.dp/#/*/name
                     get-value:x:@for-each/@.dp/#/*/name
                  .lambda
                     set-value:x:@.exists
                        .:bool:true
            if
               not
                  get-value:x:@.exists
               .lambda
                  add:x:@.form-fields
                     get-nodes:x:@.dp/#

         /*
          * Looping through combined input fields of both PUT and POST, to create
          * our edit/create form fields.
          * 
          * Notice, we don't create form fields for anything that's an input field
          * to our DELETE endpoint, since it's a primary key.
          */
         for-each:x:@.form-fields/*

            /*
             * Checking if this is a selector type of field, implying a foreign key into
             * another table.
             */
            if
               exists:x:@.dp/#/*/lookup
               .lambda

                  /*
                   * Figuring out service method name, which is the last parts
                   * of the entity's table name, due to schemas namespacing tables.
                   */
                  strings.split:x:@.dp/#/*/lookup/*/table
                     .:.

                  // Figuring out if this is a long dataset or not.
                  if
                     eq
                        get-value:x:@.dp/#/*/lookup/*/long
                        .:bool:true
                     .lambda

                        // Using the autocomplete component for our edit/create modal dialog.
                        strings.replace:x:@.form-field-file/*/autocomplete
                           .:[[column-name]]
                           get-value:x:@.dp/#/*/name
                        strings.replace:x:@strings.replace
                           .:[[lookup_key]]
                           get-value:x:@.dp/#/*/lookup/*/key
                        strings.replace:x:@strings.replace
                           .:[[lookup_name]]
                           get-value:x:@.dp/#/*/lookup/*/name
                        strings.replace:x:@strings.replace
                           .:[[lookup_table]]
                           get-value:x:@.dp/#/*/lookup/*/service
                        strings.replace:x:@strings.replace
                           .:[[lookup_table_with_namespace]]
                           get-value:x:@.dp/#/*/lookup/*/table
                        set-value:x:@.substitutions/*/form-fields
                           strings.concat
                              get-value:x:@.substitutions/*/form-fields
                              get-value:x:@strings.replace
                  else

                     // Using the selector component for our edit/create modal dialog.
                     strings.replace:x:@.form-field-file/*/selector
                        .:[[column-name]]
                        get-value:x:@.dp/#/*/name
                     strings.replace:x:@strings.replace
                        .:[[lookup_key]]
                        get-value:x:@.dp/#/*/lookup/*/key
                     strings.replace:x:@strings.replace
                        .:[[lookup_name]]
                        get-value:x:@.dp/#/*/lookup/*/name
                     strings.replace:x:@strings.replace
                        .:[[lookup_table]]
                        get-value:x:@.dp/#/*/lookup/*/service
                     strings.replace:x:@strings.replace
                        .:[[lookup_table_with_namespace]]
                        get-value:x:@.dp/#/*/lookup/*/table
                     set-value:x:@.substitutions/*/form-fields
                        strings.concat
                           get-value:x:@.substitutions/*/form-fields
                           get-value:x:@strings.replace
            else

               /*
                * Not a foreign key, figuring out its type.
                * 
                * We can now safely create a form control for currently iterated [.form-fields] instance.
                * Making sure we correctly create our HTML markup for edit/create component.
                * 
                * Notice, some types have specialized implementations here.
                */
               switch:x:@.dp/#/*/type

                  // Long type.
                  case:long
                  case:int
                     strings.replace:x:@.form-field-file/*/long
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/form-fields
                        strings.concat
                           get-value:x:@.substitutions/*/form-fields
                           strings.replace:x:@strings.replace
                              .:[[column-name]]
                              get-value:x:@.dp/#/*/name

                  // Decimal type.
                  case:decimal
                     strings.replace:x:@.form-field-file/*/decimal
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/form-fields
                        strings.concat
                           get-value:x:@.substitutions/*/form-fields
                           strings.replace:x:@strings.replace
                              .:[[column-name]]
                              get-value:x:@.dp/#/*/name

                  // Boolean type.
                  case:bool
                     strings.replace:x:@.form-field-file/*/bool
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/form-fields
                        strings.concat
                           get-value:x:@.substitutions/*/form-fields
                           strings.replace:x:@strings.replace
                              .:[[column-name]]
                              get-value:x:@.dp/#/*/name

                  // Date type.
                  case:date
                     strings.replace:x:@.form-field-file/*/date
                        .:[[form-control-name]]
                        strings.replace-not-of:x:@.dp/#/*/name
                           .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                           .:_
                     set-value:x:@.substitutions/*/form-fields
                        strings.concat
                           get-value:x:@.substitutions/*/form-fields
                           strings.replace:x:@strings.replace
                              .:[[column-name]]
                              get-value:x:@.dp/#/*/name
                     set-value:x:@.substitutions/*/dates-to-format
                        strings.concat
                           get-value:x:@.substitutions/*/dates-to-format
                           .:"'"
                           get-value:x:@.dp/#/*/name
                           .:"', "

                  // Default (anything not having a specialized implementation).
                  default
                     if
                        eq:x:@.dp/#/*/handling
                           .:image
                        .lambda
                           strings.replace:x:@.form-field-file/*/image
                              .:[[form-control-name]]
                              strings.replace-not-of:x:@.dp/#/*/name
                                 .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                                 .:_
                           set-value:x:@.substitutions/*/form-fields
                              strings.concat
                                 get-value:x:@.substitutions/*/form-fields
                                 strings.replace:x:@strings.replace
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name
                     else-if
                        eq:x:@.dp/#/*/handling
                           .:textarea
                        .lambda
                           strings.replace:x:@.form-field-file/*/textarea
                              .:[[form-control-name]]
                              strings.replace-not-of:x:@.dp/#/*/name
                                 .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                                 .:_
                           set-value:x:@.substitutions/*/form-fields
                              strings.concat
                                 get-value:x:@.substitutions/*/form-fields
                                 strings.replace:x:@strings.replace
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name
                     else-if
                        eq:x:@.dp/#/*/handling
                           .:file
                        .lambda
                           strings.replace:x:@.form-field-file/*/file
                              .:[[form-control-name]]
                              strings.replace-not-of:x:@.dp/#/*/name
                                 .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                                 .:_
                           set-value:x:@.substitutions/*/form-fields
                              strings.concat
                                 get-value:x:@strings.replace
                                 strings.replace:x:@.form-field-file/*/file
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name
                     else-if
                        eq:x:@.dp/#/*/handling
                           .:username_lookup
                        .lambda
                           strings.replace:x:@.form-field-file/*/username_lookup
                              .:[[form-control-name]]
                              strings.replace-not-of:x:@.dp/#/*/name
                                 .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                                 .:_
                           set-value:x:@.substitutions/*/form-fields
                              strings.concat
                                 get-value:x:@.substitutions/*/form-fields
                                 strings.replace:x:@strings.replace
                                    .:[[column-name]]
                                    get-value:x:@.dp/#/*/name
                     else
                        strings.replace:x:@.form-field-file
                           .:[[form-control-name]]
                           strings.replace-not-of:x:@.dp/#/*/name
                              .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
                              .:_
                        set-value:x:@.substitutions/*/form-fields
                           strings.concat
                              get-value:x:@.substitutions/*/form-fields
                              strings.replace:x:@strings.replace
                                 .:[[column-name]]
                                 get-value:x:@.dp/#/*/name

         // Adding "delete-instance" to [displayed-columns]
         set-value:x:@.substitutions/*/displayed-columns
            strings.concat
               get-value:x:@.substitutions/*/displayed-columns
               .:@",
    'delete-instance'"

         /*
          * Making sure we remove redundant commas and spaces
          * from [.substitutions]/[displayed-columns].
          * 
          * Notice, this has to be done, not only to remove additional characters
          * at the end of the string, but also at the BEGINNING of the string.
          */
         set-value:x:@.substitutions/*/displayed-columns
            strings.trim:x:@.substitutions/*/displayed-columns
               .:@", 
"

         // Iterating through each component file, to do our substitutions.
         for-each:x:@.arguments/*/.component-files/*

            // Replacing [[component-folder]].
            strings.replace:x:@.dp/#
               .:[[component-folder]]
               get-value:x:@.lambda/@.dp/#/*/component-folder

            // Replacing [[component-filename]].
            strings.replace:x:@strings.replace
               .:[[component-filename]]
               get-value:x:@.lambda/@.dp/#/*/component-filename

            // Buffer to hold component's filename.
            unwrap:x:+
            .filename:x:@strings.replace

            // Replacing [[component-header]].
            strings.replace:x:@.dp/#/*
               .:[[component-header]]
               get-value:x:@.lambda/@.dp/#/*/component-header

            // Replacing [[form-fields]].
            strings.replace:x:@strings.replace
               .:[[form-fields]]
               get-value:x:@.substitutions/*/form-fields

            // Replacing [[delete-input]].
            strings.replace:x:@strings.replace
               .:[[delete-input]]
               get-value:x:@.substitutions/*/delete-input

            // Replacing [[primary-keys]].
            strings.replace:x:@strings.replace
               .:[[primary-keys]]
               get-value:x:@.substitutions/*/primary-keys

            // Replacing [[dates-to-format]].
            strings.replace:x:@strings.replace
               .:[[dates-to-format]]
               strings.trim:x:@.substitutions/*/dates-to-format
                  .:", "

            // Replacing [[create-input]].
            strings.replace:x:@strings.replace
               .:[[create-input]]
               get-value:x:@.substitutions/*/create-input

            // Replacing [[update-input]].
            strings.replace:x:@strings.replace
               .:[[update-input]]
               get-value:x:@.substitutions/*/update-input

            // Replacing [[ng-containers]].
            strings.replace:x:@strings.replace
               .:[[ng-containers]]
               get-value:x:@.substitutions/*/ng-containers

            // Replacing [[view-details]].
            strings.replace:x:@strings.replace
               .:[[view-details]]
               get-value:x:@.substitutions/*/view-details

            // Replacing [[colspan]].
            strings.replace:x:@strings.replace
               .:[[colspan]]
               get-value:x:@.substitutions/*/container-count

            // Replacing [[component-filename]].
            strings.replace:x:@strings.replace
               .:[[component-filename]]
               strings.concat
                  get-value:x:@.lambda/@.dp/#/*/component-filename

            // Replacing [[component-name]].
            strings.replace:x:@strings.replace
               .:[[component-name]]
               get-value:x:@.lambda/@.dp/#/*/component-name

            // Replacing [[component-selector]].
            strings.replace:x:@strings.replace
               .:[[component-selector]]
               get-value:x:@.lambda/@.dp/#/*/component-selector

            // Replacing [[displayed-columns]].
            strings.replace:x:@strings.replace
               .:[[displayed-columns]]
               get-value:x:@.substitutions/*/displayed-columns

            // Replacing [[endpoint-url]].
            strings.replace:x:@strings.replace
               .:[[endpoint-url]]
               get-value:x:@.substitutions/*/endpoint-url

            // Replacing [[crud-entity]].
            strings.replace:x:@strings.replace
               .:[[crud-entity]]
               strings.replace:x:@.lambda/@.dp/#/*/component-folder
                  .:/
                  .:_

            // Appending our actual form controls into our TypeScript file.
            strings.replace:x:@strings.replace
               .:[[form-control-declarations]]
               get-value:x:@.substitutions/*/form-controls

            // Appending our actual control instantiations into our TypeScript file.
            strings.replace:x:@strings.replace
               .:[[form-control-instantiations]]
               get-value:x:@.substitutions/*/form-controls-instantiations

            // Appending our HTTP client service GET method name into TypeScript file.
            strings.replace:x:@strings.replace
               .:[[service-get-method]]
               get-value:x:@.lambda/@.dp/#/*/verbs/*/get/*/service-method-name

            /*
             * Appending our HTTP client service DELETE method name into TypeScript file,
             * if it exists - otherwise making sure method simply throws exception.
             */
            .delete-method
            if
               exists:x:@.lambda/@.dp/#/*/verbs/*/delete/*/service-method-name
               .lambda
                  set-value:x:@.delete-method
                     strings.replace:x:@strings.replace
                        .:[[service-delete-method]]
                        strings.concat
                           .:return this.httpService.
                           get-value:x:@if/@.lambda/@.dp/#/*/verbs/*/delete/*/service-method-name
                           .:(ids);
            else
               set-value:x:@.delete-method
                  strings.replace:x:@strings.replace
                     .:[[service-delete-method]]
                     .:"return throwError('No HTTP DELETE service method exists for entity');"

            /*
             * Appending our HTTP client service DELETE method name into TypeScript file,
             * if it exists - otherwise making sure method simply throws exception.
             */
            .create-method
            if
               exists:x:@.lambda/@.dp/#/*/verbs/*/post/*/service-method-name
               .lambda

                  // Adding HTTP POST method invocation for entity.
                  set-value:x:@.create-method
                     strings.replace:x:@.delete-method
                        .:[[service-create-method]]
                        strings.concat
                           .:return this.service.
                           get-value:x:@if/@.lambda/@.dp/#/*/verbs/*/post/*/service-method-name
                           .:(this.data.entity);
            else
               set-value:x:@.create-method

                  // No HTTP POST method exists for entity.
                  strings.replace:x:@.delete-method
                     .:[[service-create-method]]
                     .:"return throwError('No HTTP POST service method exists for entity');"

            // Appending our HTTP client service COUNT method name into TypeScript file.
            strings.replace:x:@.create-method
               .:[[service-count-method]]
               get-value:x:@.lambda/@.dp/#/*/count-method

            /*
             * Appending our HTTP client service PUT method name into TypeScript file.
             * 
             * Notice, some endpoints might not have a PUT method. If they don't we'll
             * have to make sure we don't add any getUpdateMethod to the edit component,
             * at which point the base method will kick in, and return an error in case
             * method is invoked - Which should be impossible for the record, but since
             * there might exist situations where the endpoint is later added, and the
             * scaffolded Angular code is modified, to later include such an endpoint,
             * we still generate an edit component for endpoints - Even those that don't
             * even have a PUT method.
             */
            if
               exists:x:@.lambda/@.dp/#/*/verbs/*/put
               .lambda

                  // PUT method exists for component.
                  set-value:x:@strings.replace
                     strings.replace:x:@strings.replace
                        .:[[service-update-wrapper]]
                        strings.concat
                           .:@"                           
  /**
   * Returns a reference to the update method, to update entity.
   */
  protected getUpdateMethod() {
    return this.service."
                           get-value:x:@.lambda/@.lambda/@.dp/#/*/verbs/*/put/*/service-method-name
                           .:@"(this.data.entity);
  }"
            else

               /*
                * No PUT method for component, hence not adding getUpdateMethod method
                * on edit component.
                */
               set-value:x:@strings.replace
                  strings.replace:x:@strings.replace
                     .:[[service-update-wrapper]]
                     .:

            // Buffer to hold component's content.
            unwrap:x:+
            .content:x:@strings.replace

            /*
             * Adding finished component to [.components] node, that is
             * returned to caller after file is done evaluating.
             */
            unwrap:x:+/+/*/*
            unwrap:x:+/*/*/*
            add:x:@.components
               .
                  :x:@.filename
                     :x:@.content

// Returns results to caller.
return-nodes:x:@.components/*
