
/*
 * Generates an Angular frontend for you wrapping the given [endpoints].
 * The frontend will contain one grid component for each CRUD method group supplied,
 * in addition to an edit/create modal dialogue, and an HTTP service endpoint
 * for each HTTP REST endpoint you supply.
 */
.description:Generates an Angular frontend based upon ngx-generator and returns it to the client as a ZIP file

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/args/*/palette

// Communicating custom arguments to consumers.
.custom
   palette
      .
         name:Light blue
         value:mat-light-blue
      .
         name:Red
         value:mat-red
      .
         name:Pink
         value:mat-pink
      .
         name:Purple
         value:mat-purple
      .
         name:Deep purple
         value:mat-deep-purple
      .
         name:Indigo
         value:mat-indigo
      .
         name:Blue
         value:mat-blue
      .
         name:Cyan
         value:mat-cyan
      .
         name:Teal
         value:mat-teal
      .
         name:Green
         value:mat-green
      .
         name:Light green
         value:mat-light-green
      .
         name:Lime
         value:mat-lime
      .
         name:Yellow
         value:mat-yellow
      .
         name:Amber
         value:mat-amber
      .
         name:Orange
         value:mat-orange
      .
         name:Deep orange
         value:mat-deep-orange
      .
         name:Brown
         value:mat-brown
      .
         name:Grey
         value:mat-grey
      .
         name:Blue grey
         value:mat-blue-grey
   theme
      .
         name:Light
         value:mat-light-theme
      .
         name:Dark
         value:mat-dark-theme
   intro:@"      <a
        target=""_blank""
        matTooltip=""This app was automatically generated by Aista Magic Cloud""
        href=""https://aista.com"" class=""logo"">
        <img
          src=""assets/aista-logo.svg""
          style=""padding: 50px 25px 50px 25px;""
          alt=""Aista Logo"">
      </a>
      <p>
        This application was automatically generated with
        <a target=""_blank"" href=""https://aista.com/"">Aista Magic Cloud</a>.
        It features easy translation into your language(s) of choice, and
        provides a default starter-kit for your CRUD apps. Feel free to modify this page as you see fit.
        Notice, to create <em>""an app""</em> out of this website, just click the bookmark button on your phone,
        and choose <em>""Add to home screen""</em>, and it will behave more or less exactly like a native app,
        as long as the user has an internet connection. In the <em>""helpers""</em> folder you can find several
        helper components, allowing you to change any aspect of your entity fields, to for instance provide
        file upload, image capturing, etc. These are as follows
      </p>
      <ul>
        <li><strong>magic-autocomplete</strong> - Helps you when creating new entities when a field in your entity is referencing another field in another table. Useful for larger datasets.</li>
        <li><strong>magic-file</strong> - Helps you when creating new entities when a field in your entity should be wrapping a file physically on disc in your backend, as in uploading files and associate these with data entities.</li>
        <li><strong>magic-file-view</strong> - Helps you when viewing an entity and downloading an associated file when a field is wrapping a physical file.</li>
        <li><strong>magic-filter</strong> - Helps you create filtering controls when a field in an item is referencing another field in another table.</li>
        <li><strong>magic-image</strong> - Same as the magic-file, except it allows you to upload images specifically, and will automatically resize your images if you want it to.</li>
        <li><strong>magic-image-view</strong> - The equivalent of the magic-file component, except it will display images inline on your form.</li>
        <li><strong>magic-selector</strong> - The same as magic-autocomplete but will create a select dropdown list instead of an autocompleter and hence is more useful for smaller datasets.</li>
      </ul>
      <p>
        All of the above custom components are fairly well documented in the TypeScript files, and you can easily include them 
        as you see fit in your own applications. Besides from the above special components, everything in this template is
        plain and standard Angular components, besides the occasional 3rd party component, used to for instance allow
        the user to pick a date and time, etc. The latter are open source libraries you can find documentation for if
        you search for your component's name.
      </p>"

/*
 * Retrieves main folder we're currently working in, to allow
 * for retrieving files relative to our current "working directory".
 */
io.path.get-folder:x:@.filename

/*
 * Transforming our CRUD methods, such that they become slightly more structured.
 * 
 * This is later used to generate our components, since we create one component for each
 * CRUD type of endpoint that we were given as input.
 */
.crud-methods
add:x:+/*
   get-nodes:x:@.arguments/*
add:x:@.crud-methods
   io.file.execute:/misc/templates/common/structure-endpoints.hl

/*
 * Creating our HTTP Client service method implementations,
 * by invoking a helper file responsible for parsing arguments,
 * and creating our TypeScript HTTP client methods accordingly.
 */
.http-service-methods
add:x:+/*
   get-nodes:x:@.crud-methods/*
set-value:x:@.http-service-methods
   io.file.execute:/misc/templates/common/create-angular-service-methods.hl

/*
 * These two nodes will contain all template files.
 * 
 * The [.main-files] will contain the main template files.
 * The [.component-files] will contain the "per component" files, and
 * will be duplicated once for each component that is dynamically created.
 * 
 * The [.component-files] will be used as the basis for creating one component for each
 * CRUD endpoint method group specified by caller.
 */
.main-files
.component-files

// Loads all files in "main" Angular template folder recursively.
unwrap:x:+/*/*/*
add:x:@.main-files
   signal:magic.io.file.load-recursively
      strings.concat
         .:x:@io.path.get-folder
         .:templates/main/
      .hidden-files:bool:true

// Loads all files in "component" Angular template folder recursively.
unwrap:x:+/*/*/*
add:x:@.component-files
   signal:magic.io.file.load-recursively
      strings.concat
         .:x:@io.path.get-folder
         .:templates/component/
      .hidden-files:bool:true

/*
 * Removing "root" parts of our folder names in [.main-files], to create a
 * more friendly folder structure that we return to caller.
 */
strings.trim-start:x:@io.path.get-folder
   .:/
for-each:x:@.main-files/*
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         strings.concat
            get-value:x:@strings.trim-start
            .:templates/main
         get-value:x:@.arguments/*/name

/*
 * Replacing component filenames such that we can keep them
 * slightly more semantically correct before starting transformation process.
 * 
 * This makes it easier for us to later dynamically replace the filenames
 * of our component files, according to their component name.
 */
for-each:x:@.component-files/*
   strings.replace:x:@.dp/#
      .:component.
      .:[[component-filename]].
   strings.replace:x:@strings.replace
      strings.concat
         get-value:x:@io.path.get-folder
         .:templates/component/
      .:/[[component-folder]]/
   set-value:x:@.dp/#
      get-value:x:@strings.replace

/*
 * Loading router link file, that contains the declaration for
 * our router links.
 */
.router-link-file
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/router-link.html
set-value:x:@.router-link-file
   io.file.load:x:@strings.concat

// Loading import file, that contains the import declarations for components.
.imports-file
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/import.ts
set-value:x:@.imports-file
   io.file.load:x:@strings.concat
.imports-file-only-grid
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/import-only-grid.ts
set-value:x:@.imports-file-only-grid
   io.file.load:x:@strings.concat

// Loading router declaration file.
.router-declaration-file
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/router-declaration.ts
set-value:x:@.router-declaration-file
   io.file.load:x:@strings.concat

// Building our CRUD components.
.components
strings.concat
   get-value:x:@io.path.get-folder
   .:generator/generate-components.hl
add:x:+/+/+/*
   get-nodes:x:@.component-files
add:x:+/+/*
   get-nodes:x:@.crud-methods
unwrap:x:+/*/*
add:x:@.components
   io.file.execute:x:@strings.concat
      root-folder:x:@io.path.get-folder

/*
 * Retrieving import statements/router declarations,
 * etc, for each component we have.
 */
.imports
.imports-only-main
.routes
.module-declarations
.entry-components
.router-links
for-each:x:@.crud-methods/*

   // Verifying GET verbs exists for CRUD method.
   if
      exists:x:@.dp/#/*/verbs/*/get
      .lambda

         // Import declarations.
         strings.replace:x:@.imports-file
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[component-folder]]
            get-value:x:@.dp/#/*/component-folder
         strings.replace:x:-
            .:[[component-filename]]
            get-value:x:@.dp/#/*/component-filename
         strings.replace:x:-
            .:[[component-edit-name]]
            get-value:x:@.dp/#/*/component-edit-name
         strings.replace:x:-
            .:[[component-edit-filename]]
            get-value:x:@.dp/#/*/component-edit-filename
         set-value:x:@.imports
            strings.concat
               get-value:x:@.imports
               get-value:x:@strings.replace

         // Import declarations (only main component imports).
         strings.replace:x:@.imports-file-only-grid
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[component-folder]]
            get-value:x:@.dp/#/*/component-folder
         strings.replace:x:-
            .:[[component-filename]]
            get-value:x:@.dp/#/*/component-filename
         set-value:x:@.imports-only-main
            strings.concat
               get-value:x:@.imports-only-main
               get-value:x:@strings.replace

         // Router declarations.
         strings.replace:x:@.router-declaration-file
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[router-url]]
            get-value:x:@.dp/#/*/component-routing-url
         set-value:x:@.routes
            strings.concat
               get-value:x:@.routes
               get-value:x:@strings.replace

         // Router links.
         strings.replace:x:@.router-link-file
            .:[[url]]
            get-value:x:@.dp/#/*/component-routing-url
         strings.replace:x:@strings.replace
            .:[[endpoint-url]]
            get-value:x:@.dp/#/*/url
         strings.replace:x:@strings.replace
            .:[[name]]
            get-value:x:@.dp/#/*/component-header
         set-value:x:@.router-links
            strings.concat
               get-value:x:@.router-links
               get-value:x:@strings.replace

         // Module declarations.
         set-value:x:@.module-declarations
            strings.concat
               get-value:x:@.module-declarations
               .:"    "
               get-value:x:@.dp/#/*/component-name
               .:@",
"
               .:"    "
               get-value:x:@.dp/#/*/component-edit-name
               .:@",
"

         /*
          * Adding entry components, which basically is the edit modal windows
          * for each component we have.
          */
         set-value:x:@.entry-components
            strings.concat
               get-value:x:@.entry-components
               .:"    "
               get-value:x:@.dp/#/*/component-edit-name
               .:@",
"

/*
 * Replacing any [[imports]], [[imports-only-main]], [[routes]],
 * etc in any of our main files.
 */
for-each:x:@.main-files/*

   // Replacing [[intro]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[intro]]
         get-value:x:@.arguments/*/args/*/intro

   // Replacing [[palette]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[palette]]
         get-value:x:@.arguments/*/args/*/palette

   // Replacing [[theme]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[theme]]
         get-value:x:@.arguments/*/args/*/theme

   // Replacing [[router-links]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[router-links]]
         get-value:x:@.router-links

   // Replacing [[imports]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[imports]]
         get-value:x:@.imports

   // Replacing [[imports-only-main]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[imports-only-main]]
         get-value:x:@.imports-only-main

   // Replacing [[routes]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[routes]]
         get-value:x:@.routes

   // Replacing [[module-declarations]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[module-declarations]]
         get-value:x:@.module-declarations

   // Replacing [[entry-components]]
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[entry-components]]
         get-value:x:@.entry-components

// Making sure we position our components correctly inside of our zip file.
for-each:x:@.components/*
   set-value:x:@.dp/#
      strings.concat
         .:/
         get-value:x:@.arguments/*/name
         .:/src/app/components
         get-value:x:@.dp/#

// Some template fields needs the name in to-lower form, without spaces.
.name-lowers
set-value:x:@.name-lowers
   strings.replace-not-of:x:@.arguments/*/name
      .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
      .:_

/*
 * Iterating through each [.main-files] and doing substitutions
 * according to specifications and meta information.
 * 
 * Notice, this is not a completely optimal approach, since according to the
 * way our template files are looking, we could further have optimised things slightly.
 * 
 * However, to accommodate for future changes, such as for instance having the
 * name of the app in
 * any
 * file we wish, we do things this way, to make sure
 * we have a substitution process that is as flexible and generic as we possibly can.
 */
for-each:x:@.main-files/*/*

   // Replacing all [[name]] occurrencies.
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[name]]
         get-value:x:@.arguments/*/name

   // Replacing all [[name-lowers]] occurrencies.
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[name-lowers]]
         get-value:x:@.name-lowers

   // Replacing all [[apiUrl]] occurrencies.
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[apiUrl]]
         get-value:x:@.arguments/*/apiUrl

   // Replacing all [[environmentDomain]] occurrencies.
   strings.split:x:@.arguments/*/apiUrl
      .:"://"
   strings.split:x:-/1
      .:/
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[environmentDomain]]
         get-value:x:@strings.split/0

   // Replacing all [[http-client-service-method-implementations]] occurrencies.
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[http-client-service-method-implementations]]
         get-value:x:@.http-service-methods

// Adding all generated files to return value.
add:x:../*/.return-nodes
   get-nodes:x:@.main-files/*
add:x:../*/.return-nodes
   get-nodes:x:@.components/*

// Applying copyright, if given.
if
   and
      not
         eq
            get-value:x:@.arguments/*/copyright
            .:
      not
         eq
            get-value:x:@.arguments/*/copyright
            .
   .lambda

      // Copyright notice was supplied.
      for-each:x:../*/.return-nodes/*
         if
            or
               strings.ends-with:x:@.dp/#
                  .:.ts
               strings.ends-with:x:@.dp/#
                  .:.js
               strings.ends-with:x:@.dp/#
                  .:.css
               strings.ends-with:x:@.dp/#
                  .:.scss
               strings.ends-with:x:@.dp/#
                  .:.sass
            .lambda

               /*
                * Currently iterated file is of a type that can tolerate
                * having a copyright header comment.
                */
               set-value:x:@.dp/#/*
                  strings.concat
                     .:@"/*
"
                     .:" * "
                     get-value:x:@.arguments/*/copyright
                     .:@"
 */
"
                     get-value:x:@.dp/#/*

/*
 * Iterating through each file in [.return-nodes] and making sure we only return
 * files we actually want.
 */
for-each:x:../*/.return-nodes/*
   if
      and
         not
            strings.ends-with:x:@.dp/#
               .:.DS_Store
         not
            strings.ends-with:x:@.dp/#
               .:.jpeg
         not
            strings.ends-with:x:@.dp/#
               .:.png
      .lambda
         add:x:../*/return-nodes
            get-nodes:x:@.dp/#

// Adding touch icons, first our smallest, then our larger icons.
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-icon-57x57.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-icon-57x57.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-icon-72x72.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-icon-72x72.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-icon-128x128.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-icon-128x128.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-icon-144x144.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-icon-144x144.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/logo-official.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/logo-official.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read

// Returning all generated files to caller.
.return-nodes
return-nodes
