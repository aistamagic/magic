/*
 * Automatically generated by Magic
 */

import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormControl } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { ConfirmDialogComponent } from '@app/confirm-deletion-dialog/confirm-dialog.component';
import { Extra, UsersService } from '@app/services/users-service';
import { debounceTime, ReplaySubject } from 'rxjs';

@Component({
  selector: 'app-edit-extra-fields',
  templateUrl: './edit-extra-fields.component.html',
  styleUrls: ['./edit-extra-fields.component.scss']
})
export class EditExtraFieldsComponent implements OnInit {

  @Input() data: Extra[] = [];
  @Input() username: string = '';

  @Output() updateExtraFields = new EventEmitter<any>();

  /**
   * initialization of our dynamic form
   */
  public extraForm: any = this.formBuilder.group({});

  /**
   * Stores the value of the new type's input
   */
  public newType: string = '';

  /**
   * Stores the value of the new value's input
   */
  public newValue: string = '';

  /**
   * Sets focus on the type's input after adding a new field.
   */
  public focusOnType: boolean = false;

  /**
   * To access the value changes when typing inside the exisitng value's input.
   */
  private inputValue: ReplaySubject<string[]>= new ReplaySubject();

  /**
   * 
   * @param dialog To show confirmation dialog.
   * @param snackbar To show the feedback.
   * @param formBuilder To build a reactive form.
   * @param usersService To access endpoints related to user.
   */
  constructor(
    private dialog: MatDialog,
    private snackbar: MatSnackBar,
    private formBuilder: FormBuilder,
    private usersService: UsersService) { }

  ngOnInit(): void {
    this.setFormFields();
    // Adding debounceTime to send the request with delay.
    this.inputValue.pipe(debounceTime(500)).subscribe((changeValue: any)=>{
      if (changeValue[0] !== '') {
        this.editExtra(changeValue[1]);
      }
    })
  }

  /**
   * Sets dynamic fields based on the existing fields.
   * Will be applied only if data has value.
   */
  setFormFields() {
    if (this.data.length) {
      this.data.sort((a:any, b:any) => (a.type === 'email' && -1) || (b.type === 'email' && 1) || 0);
      this.data.forEach((element: any) => {
        this.extraForm.setControl(element.type, new FormControl<any>({value: element.value, disabled: element.type === 'email'}));
      });
    } 
  }

  /**
   * Deletes the selected extra field, upon confirmation.
   * @callback setFormFields To update the form.
   * @callback updateData To update the data inside the parent component.
   */
   public deleteUser(type: string) {
    this.dialog.open(ConfirmDialogComponent, {
      width: '500px',
      data: {
        title: 'Confirm deletion',
        text: 'Are you sure?<br/>By proceeding the selected field will be deleted permanently.'
      }
    }).afterClosed().subscribe((result: any) => {
      if(result?.confirmed) {
        const params: string = `?user=${this.username}&type=${type}`
        this.usersService.deleteUserExtras(params).subscribe({
          next: (res: any) => {
            if (res.affected > 0) {
              this.data = this.data.filter((item: any) => item.type !== type);
              this.setFormFields();
              this.updateData();
            }
          },
          error: (error: any) => {
            console.log(error);
          }
        });
      }
    })
  }

  /**
   * Updates the extra field on the selected user's record, 
   * so the UI can be updated without an extra call.
   */
  private updateData() {
    this.updateExtraFields.emit(this.data);
  }

  /**
   * Will be called when exisiting fields get new values.
   * @param field Type of the extra field.
   */
  public watchInputChanges(field: string) {
    this.inputValue.next([this.extraForm.value[field], field]);
  }

  /**
   * Invokes the endpoint to edit an existing field.
   * @param field Type of the extra field.
   * @callback updateData To update the data inside the parent component.
   */
  private editExtra(field: string) {
    const data: Extra = {
      user: this.username,
      type: field,
      value: this.extraForm.value[field]
    }
    this.usersService.updateUserExtras(data).subscribe({
      next: (res: any) => {
        if (res && res.affected > 0) {
          this.snackbar.open(`Field updated successfully.`, null, { duration: 2000 });
          this.updateData();
        }
      },
      error: (error: any) => {
        console.log(error);
      }
    })
  }

  /**
   * Invokes the endpoint to add a new extra field.
   * @callback setFormFields To add the newly created field to the form.
   * @callback updateData To update the data inside the parent component.
   */
  public addExtra() {
    const data: Extra = {
      user: this.username,
      type: this.newType,
      value: this.newValue
    }
    this.usersService.addUserExtras(data).subscribe({
      next: (res: any) => {
        if (res && res.result === 'success') {
          this.data = [...this.data, data];
          this.setFormFields();
          this.snackbar.open('Field updated successfully.', null, { duration: 2000 });
          this.updateData();
          this.newType = '';
          this.newValue = '';
          this.focusOnType = true;
        }
      },
      error: (error: any) => {
        console.log(error);
      }
    })
  }
}
