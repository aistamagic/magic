
/*
 * File resolved from a socket connection invocation.
 * 
 * Spawns a new terminal on server. Notice, we use the channel to create
 * a unique terminal instance that can later be used to de-reference the
 * same terminal.
 */
.arguments
   channel:string
   folder:string
.type:internal

// Verifying caller has access to execute file.
auth.ticket.verify:root

// Logging the fact that we're starting a terminal on server.
log.info:Starting terminal on server
   channel:x:@.arguments/*/channel

// Figuring out channel name to transmit results to.
strings.concat
   .:ide.terminal.out.
   get-value:x:@.arguments/*/channel

// Starting terminal.
unwrap:x:+/*/*/.channel
system.terminal.create:x:@.arguments/*/channel

   // Working folder.
   folder:x:@.arguments/*/folder

   // STDOUT callback, invoked when something is channeled over STDOUT.
   .stdOut

      // Signaling subscribers that we've got output, and what output we've got.
      .channel:x:@strings.concat
      unwrap:x:+/*/args/*/result
      sockets.signal:x:@.channel
         roles:root
         args
            result:x:@.arguments/*/cmd

   // STDERROR callback, invoked when something is channeled over STDOUT.
   .stdErr

      // Signaling subscribers that we've got error output, and what output we've got.
      .channel:x:@strings.concat
      unwrap:x:+/*/args/*/result
      sockets.signal:x:@.channel
         roles:root
         args
            error:bool:true
            result:x:@.arguments/*/cmd
