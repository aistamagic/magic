
// Generates a frontend for you.
.arguments
   templateName:string
   apiUrl:string
   name:string
   copyright:string
   endpoints:*
   deployLocally:bool
   args:*
.description:Generates a frontend for you according to the given arguments
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/apiUrl
validators.url:x:@.arguments/*/apiUrl

// Doing some basic logging.
log.info:Generating CRUD frontend
   template:x:@.arguments/*/templateName
   apiUrl:x:@.arguments/*/apiUrl
   name:x:@.arguments/*/name
   copyright:x:@.arguments/*/copyright
   deployLocally:x:@.arguments/*/deployLocally

// Figuring out which template/generator to use, and invoking it.
strings.concat
   .:/misc/templates/
   .:x:@.arguments/*/templateName
   .:/generate.hl
add:x:+/+/+
   get-nodes:x:@.arguments/*/endpoints
add:x:+/+
   get-nodes:x:@.arguments/*/args
unwrap:x:+/*
io.file.execute:x:@strings.concat
   apiUrl:x:@.arguments/*/apiUrl
   name:x:@.arguments/*/name
   copyright:x:@.arguments/*/copyright

// Creating a log entry with LOC that was generated.
.no:int:0
for-each:x:@io.file.execute/*
   strings.split:x:@.dp/#/*
      .:"\n"
   math.increment:x:@.no
      get-count:x:@strings.split/*
log.info:LOC generated
   loc:x:@.no
   name:x:@.arguments/*/name

/*
 * Creating a ZIP stream from return value of above [io.file.execute]
 * and returning it to client.
 */
add:x:../*/io.content.zip-stream
   get-nodes:x:@io.file.execute/*
io.content.zip-stream
if
   not
      get-value:x:@.arguments/*/deployLocally
   .lambda

      /*
       * Caller wants a ZIP file returned, making sure we get HTTP headers correctly applied.
       */
      strings.concat
         .:"attachment; filename=\""
         get-value:x:@.arguments/*/name
         .:".zip\""
      response.headers.set
         Content-Type:application/zip
         Content-Disposition:x:@strings.concat
         Access-Control-Expose-Headers:Content-Disposition
      return-value:x:@io.content.zip-stream

/*
 * Caller wants to deploy frontend locally on server.
 * First deleting folder entirely and re-creating it for simplicity, to
 * make sure folder is empty.
 */
strings.concat
   .:/etc/frontends/
   get-value:x:@.arguments/*/name
   .:/
if
   io.folder.exists:x:@strings.concat
   .lambda

      // Deleting "frontend" folder.
      io.folder.delete:x:@strings.concat

io.folder.create:x:@strings.concat

// Then figuring out full path for file.
strings.concat
   .:/etc/frontends/
   get-value:x:@.arguments/*/name
   .:.zip

// Saving ZIP stream.
io.stream.save-file:x:@strings.concat
   get-value:x:@io.content.zip-stream

// Unzipping file in its current folder and deleting it afterwards.
io.file.unzip:x:@strings.concat
io.file.delete:x:@strings.concat

// Returning success to caller.
return
   result:success
