
// Creates an HTTP REST CRUD endpoint, wrapping your database and table according to the specified arguments.
.arguments
   verbose:bool
   join:bool
   databaseType:string
   moduleName:string
   database:string
   table:string
   moduleUrl:string
   returnId:bool
   template:string
   verb:string
   auth:string
   captcha:decimal
   log:string
   overwrite:bool
   validators:string
   cache:int
   publicCache:bool
   cqrs:bool
   cqrsAuthorisation:string
   cqrsAuthorisationValues:string
   args:*
   conditions:*
   paging:bool
   sorting:bool
   generate_training_data:bool
.description:Creates an HTTP REST CRUD endpoint, wrapping your database and table according to the specified arguments
.type:internal

// Sanity checks invocation.
validators.mandatory:x:@.arguments/*/moduleName
validators.mandatory:x:@.arguments/*/database
validators.mandatory:x:@.arguments/*/table
validators.mandatory:x:@.arguments/*/moduleUrl
validators.mandatory:x:@.arguments/*/template
validators.mandatory:x:@.arguments/*/verb
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:pgsql
   .:mssql
   .:sqlite
validators.enum:x:@.arguments/*/verb
   .:post
   .:get
   .:put
   .:delete
validators.enum:x:@.arguments/*/template
   .:/system/crudifier/templates/crud.template.post.hl
   .:/system/crudifier/templates/crud.template.get.hl
   .:/system/crudifier/templates/crud.template.put.hl
   .:/system/crudifier/templates/crud.template.delete.hl
   .:/system/crudifier/templates/crud.template-no-operator.get.hl
validators.enum:x:@.arguments/*/cqrsAuthorisation
   .:inherited
   .:roles
   .:groups
   .:users
   .:none

// Defaulting [databaseType] to default database type from config.
if
   not
      exists:x:@.arguments/*/databaseType
   .lambda

      // Just inserting value from config into [.arguments] for simplicity.
      config.get:"magic:databases:default"
      unwrap:x:+/*/*
      add:x:@.arguments
         .
            databaseType:x:@config.get

// This is added as a tail to our comment, describing the endpoint accurately.
.comment-tail
.tail-tail

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Synchronising access to endpoint to avoid race condition.
semaphore:crudifier

   // Ensures user is authorized to access endpoint.
   auth.ticket.verify:root

   // Sanity checking module name, to prevent overwriting "/system/".
   strings.to-lower:x:@.arguments/*/moduleName
   if
      eq
         get-value:x:@strings.to-lower
         .:system
      .lambda
         throw:"You can't use the name 'system' as your module's name"
            public:true
            status:401

   // Sanity checking module name, to make sure it has a name at all.
   if
      or
         eq
            get-value:x:@.arguments/*/moduleName
            .:
         eq
            get-value:x:@.arguments/*/moduleName
            .
      .lambda
         throw:"You can't use an empty string as your module's name. Your module must have a name."
            public:true
            status:401

   // Creating a log entry explaining roughly what we're about to do.
   log.info:Generating CRUD backend
      module:x:@.arguments/*/moduleName
      databaseType:x:@.arguments/*/databaseType
      database:x:@.arguments/*/database
      table:x:@.arguments/*/table
      verb:x:@.arguments/*/verb

   // Making sure we create a valid filename.
   .filename
   set-value:x:-
      strings.replace:x:@.arguments/*/moduleUrl
         .:.
         .:/

   /*
    * Creating our endpoint according to arguments given, by using [apply]
    * on the [template] file given.
    */
   io.file.load:x:@.arguments/*/template
   hyper2lambda:x:-
      comments:bool:true
   unwrap:x:+/*
   apply:x:@hyper2lambda
      database-type:x:@.arguments/*/databaseType
      database:x:@.arguments/*/database
      table:x:@.arguments/*/table
      return-id:x:@.arguments/*/returnId
      args

   /*
    * Then ensuring we create a log entry during invocation of endpoint,
    * if the caller wants us to do such a thing.
    */
   if
      and
         exists:x:@.arguments/*/log
         not
            eq
               get-value:x:@.arguments/*/log
               .:
         not
            eq
               get-value:x:@.arguments/*/log
               .
      .lambda
         set-value:x:@.tail-tail
            strings.concat
               get-value:x:@.tail-tail
               .:" with logging"
         unwrap:x:+/*/*/log.info
         insert-after:x:@apply/*/.type
            .
               ..:Logging invocation.
               auth.ticket.get
               lambda2hyper:x:@.arguments/*
               log.info:x:@.arguments/*/log
                  username:x:@auth.ticket.get
                  arguments:x:@lambda2hyper

   /*
    * Making sure we append validators, if given by client.
    * 
    * Notice, we only do this for PUT or POST verbs.
    */
   if
      and
         exists:x:@.arguments/*/validators
         not
            eq
               get-value:x:@.arguments/*/validators
               .:
         or
            eq
               get-value:x:@.arguments/*/verb
               .:post
            eq
               get-value:x:@.arguments/*/verb
               .:put
      .lambda
         insert-after:x:@apply/*/.type
            hyper2lambda:x:@.arguments/*/validators

   /*
    * Then ensuring we turn on authorization to our endpoint according
    * to caller's specifications, if caller supplied an [auth] value.
    */
   if
      exists:x:@.arguments/*/auth
      .lambda

         /*
          * Checking if '' was provided as the value for authentication,
          * at which point we simply add authentication, without any
          * roles - Ensuring only authenticated users can access endpoint,
          * but no requirements in regards to roles are specified.
          */
         if
            eq
               get-value:x:@.arguments/*/auth
               .:*
            .lambda

               set-value:x:@.tail-tail
                  strings.concat
                     get-value:x:@.tail-tail
                     .:" with authentication"

               // No roles specified, but user must be authenticated.
               insert-after:x:@apply/*/.type
                  .

                     ..:Verifying user is authorized to access endpoint.
                     auth.ticket.verify
         else

            set-value:x:@.tail-tail
               strings.concat
                  get-value:x:@.tail-tail
                  .:" with authentication and authorisation for "
                  get-value:x:@.arguments/*/auth
                  .:" roles"

            // Comma separated list of roles specified.
            unwrap:x:+/*/*/auth.ticket.verify
            insert-after:x:@apply/*/.type
               .

                  ..:Verifying user is authorized to access endpoint.
                  auth.ticket.verify:x:@.arguments/*/auth

   /*
    * Then ensuring we turn reCAPTCHA if caller specified a [captcha] value.
    */
   if
      exists:x:@.arguments/*/captcha
      .lambda

         set-value:x:@.tail-tail
            strings.concat
               get-value:x:@.tail-tail
               .:" with reCAPTCHA value of "
               get-value:x:@.arguments/*/captcha

         add:x:@apply/*/.arguments
            .
               recaptcha:string
         unwrap:x:+/**/min
         insert-after:x:@apply/*/.type
            .
               ..:Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
               config.get:"magic:auth:recaptcha:key"
               config.get:"magic:auth:recaptcha:secret"
               if
                  and
                     neq:x:@config.get
                        .
                     neq:x:@config.get
                        .:
                     neq:x:@config.get/@config.get
                        .
                     neq:x:@config.get/@config.get
                        .:
                  .lambda

                     ..:reCAPTCHA configuration settings found.
                     validators.mandatory:x:@.arguments/*/recaptcha
                     validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
                        site-key:x:@config.get/@config.get
                        secret:x:@config.get
                        min:x:@.arguments/*/captcha

               ..:To remove reCAPTCHA value preventing it from being used as an argument further down in file.
               remove-nodes:x:@.arguments/*/recaptcha/[0,1]

   /*
    * Then making sure we do our specialized transformation,
    * according to verb requested by caller.
    */
   switch:x:@.arguments/*/verb

      // HTTP DELETE special case
      case:delete

         // Sanity checking invocation.
         if
            eq
               get-count:x:@.arguments/*/args/*/primary/*
               .:int:0
            .lambda

               // Cannot have a DELETE endpoint without primary keys.
               throw:There are no actual primary keys declared for your DELETE endpoint.
                  public:true
                  status:401

         // Adding delete text to comment's tail parts.
         set-value:x:@.comment-tail
            strings.concat
               get-value:x:@.comment-tail
               .:" with"

         /*
          * Applying DELETE arguments.
          * 
          * This basically ensures that all primary keys becomes mandatory arguments.
          */
         .first:bool:true
         add:x:@apply/*/.arguments
            get-nodes:x:@.arguments/*/args/*/primary/*/*
         for-each:x:@.arguments/*/args/*/primary/*/*

            // Checking if this is our first loop iteration.
            if
               get-value:x:@.first
               .lambda

                  // Making sure we don't come here again.
                  set-value:x:@.first
                     .:bool:false

                  // Adding currently iterated argument into comment's tail.
                  set-value:x:@.comment-tail
                     strings.concat
                        get-value:x:@.comment-tail
                        .:" "
                        get-name:x:@.dp/#

                  // Inserting comment describing what we're doing.
                  insert-before:x:@apply/*/data.connect/-
                     .
                        ..:Sanity checking invocation, making sure primary key(s) are specified.

            else

               // Adding currently iterated argument into comment's tail.
               set-value:x:@.comment-tail
                  strings.concat
                     get-value:x:@.comment-tail
                     .:", "
                     get-name:x:@.dp/#

            .x:@.arguments/*/
            set-value:x:@.x
               strings.concat
                  get-value:x:@.x
                  get-name:x:@.dp/#
            set-x:x:+/*/*/validators.mandatory
               convert:x:@.x
                  type:x
            insert-before:x:@apply/*/data.connect/-
               .
                  validators.mandatory

         // Adding delete text to comment's tail parts.
         set-value:x:@.comment-tail
            strings.concat
               get-value:x:@.comment-tail
               .:" matching argument"

         // Making sure we apply "locked" columns.
         for-each:x:@.arguments/*/args/*/columns/*/*/locked/.
            set-name:x:+/*/1
               get-value:x:@.dp/#/*/locked
            insert-before:x:@apply/*/data.connect/-
               .
                  ..:Making sure we retrieve lock value for column.
                  .
            .x
            set-value:x:@.x
               strings.concat
                  .:@
                  get-value:x:@.dp/#/*/locked
            convert:x:@.x
               type:x
            set-x:x:+/+/*/1
               get-value:x:@convert
            set-name:x:+/*/1
               strings.concat
                  get-value:x:@.dp/#/*/name
                  .:.eq
            add:x:@apply/*/data.connect/*/data.delete/*/where/*/and
               .
                  ..:Table is locked on the following field.
                  .

      // HTTP GET special case
      case:get

         // Sanity checking invocation.
         if
            eq
               get-count:x:@.arguments/*/args/*/columns/*
               .:int:0
            .lambda

               // Cannot have a GET endpoint returning no actual columns.
               throw:There are no actual columns declared for your GET endpoint.
                  public:true
                  status:401

         // Checking if we have an [.arguments]/[args]/[cache] value.
         if
            and
               exists:x:@.arguments/*/cache
               not
                  eq
                     get-value:x:@.arguments/*/cache
                     .:
               not
                  eq
                     get-value:x:@.arguments/*/cache
                     .:0
            .lambda

               /*
                * Caller wants results of endpoint to be cached, figuring out
                * if we should publicly or privately cache the result.
                */
               .scope:private
               if
                  eq
                     get-value:x:@.arguments/*/publicCache
                     .:bool:true
                  .lambda
                     set-value:x:@.scope
                        .:public
               set-value:x:@.tail-tail
                  strings.concat
                     get-value:x:@.tail-tail
                     .:" with "
                     get-value:x:@.scope
                     .:" HTTP caching for "
                     get-value:x:@.arguments/*/cache
                     .:" seconds"
               strings.concat
                  get-value:x:@.scope
                  .:, max-age=
                  get-value:x:@.arguments/*/cache
               unwrap:x:+/*/*/*
               insert-after:x:@apply/*/.type
                  .
                     ..:Adding Cache-Control HTTP header.
                     response.headers.set
                        Cache-Control:x:@strings.concat

         /*
          * Checking if caller supplied an explicit conditions collection,
          * and if not, applying the default logic - If caller supplied an
          * explicit condition collection, we use that instead.
          */
         if
            exists:x:@.arguments/*/conditions
            .lambda

               // Applying custom conditions to endpoint.
               add:x:@apply/*/.arguments
                  get-nodes:x:@.arguments/*/conditions/*/*
         else

            /*
             * Creating and applying default conditions to endpoint
             * 
             * This is the part where we create our condition arguments, allowing
             * for filtering result when endpoint is invoked.
             * 
             * Making sure we legalize all the most common operators for all
             * columns, in addition to "like" conditions for string types of
             * endpoints.
             */
            .operators
               mt
               lt
               mteq
               lteq
               neq
               eq

            // Checking if caller wants 'verbose' scaffolding.
            if
               or
                  not
                     exists:x:@.arguments/*/verbose
                  not
                     get-value:x:@.arguments/*/verbose
               .lambda
                  remove-nodes:x:@.operators/*/mt
                  remove-nodes:x:@.operators/*/lt
                  remove-nodes:x:@.operators/*/mteq
                  remove-nodes:x:@.operators/*/lteq
                  remove-nodes:x:@.operators/*/neq

            .first:bool:true
            set-value:x:@.comment-tail
               strings.concat
                  get-value:x:@.comment-tail
                  .:" returning"

            // Applying arguments to endpoint.
            for-each:x:@.arguments/*/args/*/columns/*

               // Checking if this is our first loop iteration.
               if
                  get-value:x:@.first
                  .lambda

                     // Making sure we don't come here again.
                     set-value:x:@.first
                        .:bool:false

                     // Adding currently iterated argument into comment's tail.
                     set-value:x:@.comment-tail
                        strings.concat
                           get-value:x:@.comment-tail
                           .:" "
                           get-value:x:@.dp/#/*/name

               else

                  // Adding currently iterated argument into comment's tail.
                  set-value:x:@.comment-tail
                     strings.concat
                        get-value:x:@.comment-tail
                        .:", "
                        get-value:x:@.dp/#/*/name

               if
                  not-exists:x:@.dp/#/*/locked
                  .lambda

                     /*
                      * Checking if argument needs a ".like" comparison type,
                      * which is true only for "string" type of arguments.
                      */
                     if
                        eq
                           get-value:x:@.dp/#/*/type
                           .:string
                        .lambda

                           // String type of argument, appending ".like" to legal arguments.
                           .buffer
                              .name:x:@.dp/#/*/type
                           unwrap:x:@.buffer/*
                           set-name:x:@.buffer/*
                              strings.concat
                                 get-value:x:@.arguments/*/table
                                 .:.
                                 get-value:x:@.dp/#/*/name
                                 .:.like
                           add:x:@apply/*/.arguments
                              get-nodes:x:@.buffer/*

                     /*
                      * Checking if argument is boolean type of argument, at which
                      * point we ONLY add ".eq" type of argument to it.
                      */
                     if
                        eq
                           get-value:x:@.dp/#/*/type
                           .:bool
                        .lambda

                           // Boolean type of argument, removing everything but ".eq" type of arguments.
                           .buffer
                              .name:x:@.dp/#/*/type
                           unwrap:x:@.buffer/*
                           set-name:x:@.buffer/*
                              strings.concat
                                 get-value:x:@.arguments/*/table
                                 .:.
                                 get-value:x:@.dp/#/*/name
                                 .:.eq
                           add:x:@apply/*/.arguments
                              get-nodes:x:@.buffer/*
                     else

                        /*
                         * Not a boolean type of argument, hence looping through all of
                         * our default comparison operators.
                         */
                        for-each:x:@.operators/*
                           .buffer
                              .name:x:@.dp/@.dp/#/*/type
                           unwrap:x:@.buffer/*
                           set-name:x:@.buffer/*
                              strings.concat
                                 get-value:x:@.arguments/*/table
                                 .:.
                                 get-value:x:@.dp/@.dp/#/*/name
                                 .:.
                                 get-name:x:@.dp/#
                           add:x:@apply/*/.arguments
                              get-nodes:x:@.buffer/*

            /*
             * More semantic commenting.
             */
            .first:bool:true
            set-value:x:@.comment-tail
               strings.concat
                  get-value:x:@.comment-tail
                  .:" filtering on"

            // Applying arguments to endpoint.
            for-each:x:@.arguments/*/args/*/columns/*

               // Checking if this is our first loop iteration.
               if
                  get-value:x:@.first
                  .lambda

                     // Making sure we don't come here again.
                     set-value:x:@.first
                        .:bool:false

                     // Adding currently iterated argument into comment's tail.
                     set-value:x:@.comment-tail
                        strings.concat
                           get-value:x:@.comment-tail
                           .:" "
                           get-value:x:@.dp/#/*/name

               else

                  // Adding currently iterated argument into comment's tail.
                  set-value:x:@.comment-tail
                     strings.concat
                        get-value:x:@.comment-tail
                        .:", "
                        get-value:x:@.dp/#/*/name

         // Making sure we add [.handling] section if needed.
         if
            exists:x:@.arguments/*/args/*/columns/*/*/handling
            .lambda
               insert-after:x:@apply/*/.type
                  .
                     ..:Columns with custom handling as frontend is generated.
                     .handling

         for-each:x:@.arguments/*/args/*/columns/*/*/handling
            set-value:x:+/+/*/*
               get-value:x:@.dp/#/./*/handling
            set-name:x:+/*/*
               strings.concat
                  get-value:x:@.arguments/*/table
                  .:.
                  get-value:x:@.dp/#/./*/name
            add:x:@apply/*/.handling
               .
                  .

         /*
          * Making sure we explicitly declare which [columns] that our
          * endpoint should return, according to caller's specifications.
          */
         for-each:x:@.arguments/*/args/*/columns/*/*/name
            if
               not-exists:x:@.dp/#/./*/locked
               .lambda
                  set-name:x:+/*/*
                     strings.concat
                        get-value:x:@.arguments/*/table
                        .:.
                        get-value:x:@.dp/#
                  add:x:@apply/**/columns
                     .
                        .

         /*
          * Checking if caller wants to apply server side joins, at which point we left join
          * with all referenced tables referenced as foreign keys.
          */
         if
            eq
               get-value:x:@.arguments/*/join
               .:bool:true
            .lambda

               // Looping through all foreign keys making sure we left join with the referenced table.
               for-each:x:@.arguments/*/args/*/columns/*

                  /*
                   * Checking if currently iterated column has a [foreign_key] declaration,
                   * and that the foreign key column in the source table is not of type string.
                   */
                  if
                     and
                        exists:x:@.dp/#/*/foreign_key
                        not
                           eq
                              get-value:x:@.dp/#/*/type
                              .:string
                     .lambda

                        /*
                         * Currently iterated column has a [foreign_key] declaration.
                         * 
                         * First we need to create our [join] part.
                         */
                        .src-field
                        .dest-field
                        set-value:x:@.src-field
                           strings.concat
                              get-value:x:@.arguments/*/table
                              .:.
                              get-value:x:@.dp/#/*/name
                        set-value:x:@.dest-field
                           strings.concat
                              get-value:x:@.dp/#/*/name
                              .:.
                              get-value:x:@.dp/#/*/foreign_key/*/column
                        set-value:x:./*/add/*/*/*/*/*
                           get-value:x:@.dest-field
                        set-name:x:./*/add/*/*/*/*/*
                           get-value:x:@.src-field
                        unwrap:x:+/+/*/*/join/*/as
                        unwrap:x:+/*/*/join
                        add:x:@apply/**/table
                           .
                              join:x:@.dp/#/*/foreign_key/*/table
                                 as:x:@.dp/#/*/name
                                 type:left
                                 on
                                    and
                                       .

                        // Then we need to add the joined display [name] as a part of our result set.
                        .display-col
                        .display-name
                        set-value:x:@.display-col
                           strings.concat
                              get-value:x:@.dp/#/*/name
                              .:.
                              get-value:x:@.dp/#/*/foreign_key/*/name
                        set-value:x:@.display-name
                           strings.concat
                              get-value:x:@.dp/#/*/name
                              .:.
                              get-value:x:@.dp/#/*/foreign_key/*/name
                        unwrap:x:+/+/*/*/*
                        set-name:x:+/*/*
                           get-value:x:@.display-col
                        add:x:@apply/**/columns
                           .
                              .
                                 as:x:@.display-name

                        // Then we need to add the eq and like query parameters for the referenced columns.
                        set-name:x:+/+/*/*/like
                           strings.concat
                              get-value:x:@.display-col
                              .:.like
                        set-name:x:+/*/*/eq
                           strings.concat
                              get-value:x:@.display-col
                              .:.eq
                        add:x:@apply/*/.arguments
                           .
                              eq:string
                              like:string

         // Checking if paging is turned off.
         if
            and
               exists:x:@.arguments/*/paging
               eq:x:@.arguments/*/paging
                  .:bool:false
            .lambda
               remove-nodes:x:@apply/*/.arguments/*/limit
               remove-nodes:x:@apply/*/.arguments/*/offset
               set-value:x:@apply/*/.description
                  strings.replace:x:@apply/*/.description
                     .:"{paging}"
                     .:

         else

            insert-after:x:@apply/*/data.connect/0
               .
                  ..:Parametrising our read invocation with paging arguments if specified.
                  add:x:./*/data.read
                     get-nodes:x:@.arguments/*/limit
                     get-nodes:x:@.arguments/*/offset
                  remove-nodes:x:@.arguments/*/limit
                  remove-nodes:x:@.arguments/*/offset
            set-value:x:@apply/*/.description
               strings.replace:x:@apply/*/.description
                  .:"{paging}"
                  .:"paging, "

         // Checking if sorting is turned off.
         if
            and
               exists:x:@.arguments/*/sorting
               eq:x:@.arguments/*/sorting
                  .:bool:false
            .lambda
               remove-nodes:x:@apply/*/.arguments/*/order
               remove-nodes:x:@apply/*/.arguments/*/direction
               set-value:x:@apply/*/.description
                  strings.replace:x:@apply/*/.description
                     .:"{sorting}"
                     .:

         else

            insert-after:x:@apply/*/data.connect/0
               .
                  ..:Parametrising our read invocation with ordering arguments if specified.
                  add:x:./*/data.read
                     get-nodes:x:@.arguments/*/order
                     get-nodes:x:@.arguments/*/direction
                  remove-nodes:x:@.arguments/*/order
                  remove-nodes:x:@.arguments/*/direction
            set-value:x:@apply/*/.description
               strings.replace:x:@apply/*/.description
                  .:"{sorting}"
                  .:"sorting, "

         // Removing [operator] argument if there are "locked" columns.
         if:x:@.arguments/*/args/*/columns/*/*/locked
            remove-nodes:x:@apply/*/.arguments/*/operator
            remove-nodes:x:@apply/*/validators.enum/-
            remove-nodes:x:@apply/*/validators.enum
            remove-nodes:x:@apply/*/if/-
            remove-nodes:x:@apply/*/if
            remove-nodes:x:@apply/*/data.connect/*/remove-nodes/[0,1]

         // Making sure we apply "locked" columns.
         for-each:x:@.arguments/*/args/*/columns/*/*/locked/.
            set-name:x:+/*/1
               get-value:x:@.dp/#/*/locked
            insert-before:x:@apply/*/data.connect/-
               .
                  ..:Making sure we retrieve lock value for column.
                  .
            .x
            set-value:x:@.x
               strings.concat
                  .:@
                  get-value:x:@.dp/#/*/locked
            convert:x:@.x
               type:x
            set-x:x:+/+/*/1
               get-value:x:@convert
            set-name:x:+/*/1
               strings.concat
                  get-value:x:@.dp/#/*/name
                  .:.eq
            add:x:@apply/*/data.connect/*/data.read/*/where/*/and
               .
                  ..:Table is locked on the following field.
                  .

      // HTTP POST special cases
      case:post

         // Sanity checking invocation.
         if
            eq
               get-count:x:@.arguments/*/args/*/columns/*
               .:int:0
            .lambda

               // Cannot have a POST endpoint without any actual data to POST.
               throw:There are no actual columns declared for your POST endpoint.
                  public:true
                  status:401

         /*
          * Applying POST arguments, which are basically the [values] that
          * invokers of endpoint are allowed to insert during creationg of
          * record.
          */
         .first:bool:true
         set-value:x:@.comment-tail
            strings.concat
               get-value:x:@.comment-tail
               .:" taking"
         for-each:x:@.arguments/*/args/*/columns/*

            // Checking if this is our first loop iteration.
            if
               get-value:x:@.first
               .lambda

                  // Making sure we don't come here again.
                  set-value:x:@.first
                     .:bool:false

                  // Adding currently iterated argument into comment's tail.
                  set-value:x:@.comment-tail
                     strings.concat
                        get-value:x:@.comment-tail
                        .:" "
                        get-value:x:@.dp/#/*/name

            else

               // Adding currently iterated argument into comment's tail.
               set-value:x:@.comment-tail
                  strings.concat
                     get-value:x:@.comment-tail
                     .:", "
                     get-value:x:@.dp/#/*/name

            if
               not-exists:x:@.dp/#/*/locked
               .lambda
                  set-name:x:+/+/*/*
                     get-value:x:@.dp/#/*/name
                  set-value:x:+/*/*
                     get-value:x:@.dp/#/*/type
                  add:x:@apply/*/.arguments
                     .
                        .

         /*
          * Checking if caller specified he wanted to have ID of item returned,
          * and if not, only returning success.
          */
         if
            not
               get-value:x:@.arguments/*/returnId
            .lambda
               remove-nodes:x:@apply/**/return/*
               add:x:@apply/**/return
                  .
                     result:success

         // Making sure we apply "locked" columns.
         for-each:x:@.arguments/*/args/*/columns/*/*/locked/.
            set-name:x:+/*/1
               get-value:x:@.dp/#/*/locked
            insert-before:x:@apply/*/data.connect/-
               .
                  ..:Making sure we retrieve lock value for column.
                  .
            .x
            set-value:x:@.x
               strings.concat
                  .:@
                  get-value:x:@.dp/#/*/locked
            convert:x:@.x
               type:x
            set-x:x:+/+/*/1
               get-value:x:@convert
            set-name:x:+/*/1
               get-value:x:@.dp/#/*/name
            add:x:@apply/*/data.connect/*/data.create/*/values
               .
                  ..:Table is locked on the following field.
                  .

         // Making sure we add [.handling] section if needed.
         if
            exists:x:@.arguments/*/args/*/columns/*/*/handling
            .lambda
               insert-after:x:@apply/*/.type
                  .
                     ..:Columns with custom handling as we generate a frontend
                     .handling

         for-each:x:@.arguments/*/args/*/columns/*/*/handling
            set-value:x:+/+/*/*
               get-value:x:@.dp/#/./*/handling
            set-name:x:+/*/*
               get-value:x:@.dp/#/./*/name
            add:x:@apply/*/.handling
               .
                  .

      // HTTP PUT special cases
      case:put

         // Sanity checking invocation.
         if
            or
               eq
                  get-count:x:@.arguments/*/args/*/primary/*
                  .:int:0
               eq
                  get-count:x:@.arguments/*/args/*/columns/*
                  .:int:0
            .lambda

               /*
                * Cannot have a PUT endpoint without any [values] to modify and
                * [where] statements to declare which records to modify.
                */
               throw:There are no actual columns, and/or primary keys declared for your PUT endpoint.
                  public:true
                  status:401

         /*
          * Applying PUT arguments.
          * First our primary keys, which ends up becoming a [where] condition,
          * to avoid allowing for updating all records.
          * 
          * This is done by making sure all specified primary keys becomes mandatory
          * arguments when invoking the endpoint.
          */
         .first:bool:true
         set-value:x:@.comment-tail
            strings.concat
               get-value:x:@.comment-tail
               .:" filtering which item to update with"
         for-each:x:@.arguments/*/args/*/primary/*

            // Checking if this is our first loop iteration.
            if
               get-value:x:@.first
               .lambda

                  // Making sure we don't come here again.
                  set-value:x:@.first
                     .:bool:false

                  // Adding currently iterated argument into comment's tail.
                  set-value:x:@.comment-tail
                     strings.concat
                        get-value:x:@.comment-tail
                        .:" "
                        get-value:x:@.dp/#/*/name

            else

               // Adding currently iterated argument into comment's tail.
               set-value:x:@.comment-tail
                  strings.concat
                     get-value:x:@.comment-tail
                     .:", "
                     get-value:x:@.dp/#/*/name

            set-name:x:+/+/*/*
               get-value:x:@.dp/#/*/name
            set-value:x:+/*/*
               get-value:x:@.dp/#/*/type
            add:x:@apply/*/.arguments
               .
                  .
         .first:bool:true
         for-each:x:@.arguments/*/args/*/primary/*
            if
               get-value:x:@.first
               .lambda
                  set-value:x:@.first
                     .:bool:false
                  insert-after:x:@apply/*/.type
                     .
                        ..:Sanity checking invocation, making sure primary key(s) are specified.

            .x:@.arguments/*/
            set-value:x:@.x
               strings.concat
                  get-value:x:@.x
                  get-value:x:@.dp/#/*/name
            set-x:x:+/*/*
               convert:x:@.x
                  type:x
            insert-after:x:@apply/*/.type/+
               .
                  validators.mandatory

         /*
          * Then adding the [add] into [values] and [where] invocations to our endpoint.
          * This is done by a little bit of intelligent offsetting using expressions,
          * which we can get away with, since we know that all primary keys are mandatory,
          * and declared first in our [.arguments] node in our endpoint.
          */
         .first:bool:true
         set-value:x:@.comment-tail
            strings.concat
               get-value:x:@.comment-tail
               .:" updating"
         for-each:x:@.arguments/*/args/*/columns/*

            // Checking if this is our first loop iteration.
            if
               get-value:x:@.first
               .lambda

                  // Making sure we don't come here again.
                  set-value:x:@.first
                     .:bool:false

                  // Adding currently iterated argument into comment's tail.
                  set-value:x:@.comment-tail
                     strings.concat
                        get-value:x:@.comment-tail
                        .:" "
                        get-value:x:@.dp/#/*/name

            else

               // Adding currently iterated argument into comment's tail.
               set-value:x:@.comment-tail
                  strings.concat
                     get-value:x:@.comment-tail
                     .:", "
                     get-value:x:@.dp/#/*/name

            if
               not-exists:x:@.dp/#/*/locked
               .lambda
                  set-name:x:+/+/*/*
                     get-value:x:@.dp/#/*/name
                  set-value:x:+/*/*
                     get-value:x:@.dp/#/*/type
                  add:x:@apply/*/.arguments
                     .
                        .

         set-value:x:@.comment-tail
            strings.concat
               get-value:x:@.comment-tail
               .:" fields"

         // First adding the [add] into [where] parts, which are the primary keys.
         .x:@.arguments/*/[0,
         set-value:x:@.x
            strings.concat
               get-value:x:@.x
               get-count:x:@.arguments/*/args/*/primary/*
               .:]
         set-x:x:+/*/*/0
            convert:x:@.x
               type:x
         insert-before:x:@apply/**/table/././1
            .

               // Parametrising our update invocation.
               ..:Parametrising our invocation.
               add:x:./*/data.update/*/where/*/and
                  get-nodes

         /*
          * Then adding the [add] into [values] parts, which are the values to update.
          * 
          * Notice, we assume there are less than 1.000 values to update, which should be
          * enough for any sane database table.
          */
         .x:@.arguments/*/[
         set-value:x:@.x
            strings.concat
               get-value:x:@.x
               get-count:x:@.arguments/*/args/*/primary/*
               .:,1000]
         set-x:x:+/*/*/*
            convert:x:@.x
               type:x
         insert-before:x:@apply/**/table/././2
            .
               add:x:./*/data.update/*/values
                  get-nodes

         // Making sure we apply "locked" columns.
         for-each:x:@.arguments/*/args/*/columns/*/*/locked/.
            set-name:x:+/*/1
               get-value:x:@.dp/#/*/locked
            insert-before:x:@apply/*/data.connect/-
               .
                  ..:Making sure we retrieve lock value for column.
                  .
            .x
            set-value:x:@.x
               strings.concat
                  .:@
                  get-value:x:@.dp/#/*/locked
            convert:x:@.x
               type:x
            set-x:x:+/+/*/1
               get-value:x:@convert
            set-name:x:+/*/1
               strings.concat
                  get-value:x:@.dp/#/*/name
                  .:.eq
            add:x:@apply/*/data.connect/*/data.update/*/where/*/and
               .
                  ..:Table is locked on the following field.
                  .

         // Making sure we add [.handling] section if needed.
         if
            exists:x:@.arguments/*/args/*/columns/*/*/handling
            .lambda
               insert-after:x:@apply/*/.type
                  .
                     ..:Columns with custom handling as we generate a frontend
                     .handling
         for-each:x:@.arguments/*/args/*/columns/*/*/handling
            set-value:x:+/+/*/*
               get-value:x:@.dp/#/./*/handling
            set-name:x:+/*/*
               get-value:x:@.dp/#/./*/name
            add:x:@apply/*/.handling
               .
                  .

   // HTTP PUT, POST and GET commonalities
   switch:x:@.arguments/*/verb
      case:put
      case:post
      case:get

         // Applying foreign keys if specified.
         for-each:x:@.arguments/*/args/*/columns/*

            /*
             * Checking if currently iterated column has a foreign key declaration.
             * 
             * Notice, for GET endpoints we do NOT generate [.foreign-key] declaration
             * if caller specified he wanted to create left joins for foreign keys.
             */
            if
               and
                  exists:x:@.dp/#/*/foreign_key/*
                  or
                     not
                        eq
                           get-value:x:@.arguments/*/verb
                           .:get
                     not
                        eq
                           get-value:x:@.arguments/*/join
                           .:bool:true
               .lambda

                  // Adding meta information about foreign key to lambda object.
                  unwrap:x:+/*/*/*
                  add:x:@apply/*/.foreign-keys
                     .
                        .
                           column:x:@.dp/#/*/name
                           table:x:@.dp/#/*/foreign_key/*/table
                           foreign_column:x:@.dp/#/*/foreign_key/*/column
                           foreign_name:x:@.dp/#/*/foreign_key/*/name
                           long:x:@.dp/#/*/foreign_key/*/long

         /*
          * Making sure we also run through the primary arguments, if
          * this is a PUT invocation.
          */
         if
            eq
               get-value:x:@.arguments/*/verb
               .:put
            .lambda

               // Primry keys can also be foreign keys.
               for-each:x:@.arguments/*/args/*/primary/*

                  // Checking if currently iterated column has a foreign key declaration.
                  if
                     exists:x:@.dp/#/*/foreign_key/*
                     .lambda

                        // Adding meta information about foreign key to lambda object.
                        unwrap:x:+/*/*/*
                        add:x:@apply/*/.foreign-keys
                           .
                              .
                                 column:x:@.dp/#/*/name
                                 table:x:@.dp/#/*/foreign_key/*/table
                                 foreign_column:x:@.dp/#/*/foreign_key/*/column
                                 foreign_name:x:@.dp/#/*/foreign_key/*/name
                                 long:x:@.dp/#/*/foreign_key/*/long

         // Checking if we have foreign keys at all, and if not, removing entire declaration.
         if
            not
               exists:x:@apply/*/.foreign-keys/*
            .lambda

               // Removing [.foreign-key] declaration altogether.
               remove-nodes:x:@apply/*/.foreign-keys

   // Notice, we only apply the CQRS pattern to post, put and delete endpoints.
   switch:x:@.arguments/*/verb
      case:put
      case:post
      case:delete

         // Checking if caller wants to publish socket messages in his endpoint.
         if
            and
               exists:x:@.arguments/*/cqrs
               get-value:x:@.arguments/*/cqrs
            .lambda

               set-value:x:@.tail-tail
                  strings.concat
                     get-value:x:@.tail-tail
                     .:" publishing "
                     get-value:x:@.arguments/*/moduleName
                     .:.
                     get-value:x:@.arguments/*/moduleUrl
                     .:.
                     get-value:x:@.arguments/*/verb
                     .:" socket message when invoked"

               /*
                * Applying [sockets.signal] just before returning from endpoint.
                * 
                * First creating signal name.
                */
               .signal
               set-value:x:@.signal
                  strings.concat
                     get-value:x:@.arguments/*/moduleName
                     .:.
                     get-value:x:@.arguments/*/moduleUrl
                     .:.
                     get-value:x:@.arguments/*/verb

               // Adding [sockets.signal] invocation to lambda.
               unwrap:x:+/*/*/sockets.signal
               insert-before:x:@apply/*/data.connect/*/unwrap/-
                  .
                     ..:Publishing socket message.
                     add:x:./*/sockets.signal/*/args
                        get-nodes:x:@.arguments/*
                     sockets.signal:x:@.signal
                        args

               // Applying authorisation requirements for signal invocation.
               switch:x:@.arguments/*/cqrsAuthorisation

                  case:inherited

                     // SignalR socket invocation should use same authorisation as endpoint.
                     insert-before:x:@apply/*/data.connect/*/sockets.signal
                        .
                           add:x:./*/sockets.signal
                              get-nodes:x:@auth.ticket.verify
                           set-name:x:./*/sockets.signal/*/auth.ticket.verify
                              .:roles

                  case:roles

                     // SignalR socket invocation should use explicit roles when published.
                     unwrap:x:+/*/*/roles
                     add:x:@apply/*/data.connect/*/sockets.signal
                        .
                           roles:x:@.arguments/*/cqrsAuthorisationValues

                  case:groups

                     // SignalR socket invocation should use explicit roles when published.
                     unwrap:x:+/*/*/groups
                     add:x:@apply/*/data.connect/*/sockets.signal
                        .
                           groups:x:@.arguments/*/cqrsAuthorisationValues

                  case:users

                     // SignalR socket invocation should use explicit roles when published.
                     unwrap:x:+/*/*/users
                     add:x:@apply/*/data.connect/*/sockets.signal
                        .
                           users:x:@.arguments/*/cqrsAuthorisationValues

   /*
    * Then creating our folder if necessary.
    * 
    * We find the foldername here, by taking the entire filepath, and
    * removing its filename. Then we create the folder.
    */
   .folder:/modules/
   set-value:x:@.folder
      strings.concat
         get-value:x:@.folder
         get-value:x:@.arguments/*/moduleName
         .:/
   strings.split:x:@.filename
      .:/
   remove-nodes:x:-/0/-
   set-value:x:@.folder
      strings.concat
         get-value:x:@.folder
         strings.join:x:@strings.split/*
            .:/
         .:/
   io.folder.create:x:@.folder

   // Applying the correct description to the file.
   .database-name
   strings.split:x:@.arguments/*/database
      .:|
   strings.split:x:@strings.split/1
      .:]
   set-value:x:@.database-name
      get-value:x:@strings.split/0
   set-value:x:@apply/*/.description
      strings.replace:x:@apply/*/.description
         .:{database}
         get-value:x:@.database-name
   set-value:x:@apply/*/.description
      strings.replace:x:@apply/*/.description
         .:{table}
         get-value:x:@.arguments/*/table

   // Applying comment's tail.
   set-value:x:@apply/*/.description
      strings.concat
         get-value:x:@apply/*/.description
         get-value:x:@.comment-tail
         get-value:x:@.tail-tail

   // Applying the correct comment to the file.
   set-value:x:@apply/0
      get-value:x:@apply/*/.description

   /*
    * Transforming lambda to Hyperlambda, and saving it to the correct file, making sure
    * we give the filename the correct HTTP verb, extension, etc.
    */
   lambda2hyper:x:@apply/*
      comments:bool:true
   unwrap:x:+
   .path:x:@.folder
   strings.split:x:@.filename
      .:/
   set-value:x:@.path
      strings.concat
         get-value:x:@.path
         get-value:x:@strings.split/0/-
         .:.
         get-value:x:@.arguments/*/verb
         .:.hl

   // Substituting illegal characters in our filename, such as spaces, etc.
   strings.replace:x:@.path
      .:" "
      .:_

   // Throwing an exception if the file exists from before, unless [.argument][overwrite] is true.
   if
      and
         or
            not
               exists:x:@.arguments/*/overwrite
            not
               get-value:x:@.arguments/*/overwrite
         io.file.exists:x:@strings.replace
      .lambda
         throw:Module already exists
            status:int:401
            public:bool:true

   /*
    * Saving file, now transformed according to arguments, database, table, columns etc -
    * And with the correct filename.
    */
   io.file.save:x:@strings.replace
      get-value:x:@lambda2hyper

   /*
    * Checking if caller wants to generate training data, and if so,
    * copying file into training data folder.
    */
   if
      and
         exists:x:@.arguments/*/generate_training_data
         eq:x:@.arguments/*/generate_training_data
            .:bool:true
      .lambda

         // Creating unique filename.
         strings.split:x:@strings.replace
            .:/
         strings.split:x:@strings.split/0/-
            .:.
         remove-nodes:x:@strings.split/0/-
         strings.join:x:@strings.split/*
            .:.
         .filename
         set-value:x:@.filename
            strings.concat
               .:/misc/training-snippets/crud/
               get-value:x:@strings.join
               .:.
               crypto.random
                  min:8
                  max:8
               .:.hl

         // Copying file.
         io.file.copy:x:@if/@strings.replace
            get-value:x:@.filename

         // Loading file and doing some cleanups before saving again.
         io.file.load:x:@.filename
         hyper2lambda:x:@io.file.load
            comments:true
         remove-nodes:x:@hyper2lambda/**/database-type
         remove-nodes:x:@hyper2lambda/*/.type
         remove-nodes:x:@hyper2lambda/*/.description
         remove-nodes:x:@hyper2lambda/*/.handling
         set-value:x:@hyper2lambda/*/data.connect
            get-value:x:@.database-name
         lambda2hyper:x:@hyper2lambda/*
            comments:true
         io.file.save:x:@.filename
            get-value:x:@lambda2hyper

   /*
    * Calculating how many lines of code we created.
    * 
    * This is returned back to the caller after crudification is done.
    */
   get-count:x:@apply/**

   /*
    * Checking if this is an HTTP GET verb, at which point we create TWO endpoints,
    * one to retrieve actual data, and another to retrieve the count of records in table.
    * 
    * This is done by taking our existing "get items" lambda structure, and modifying it
    * until it becomes a "get count" endpoint file instead.
    */
   if
      eq
         get-value:x:@.arguments/*/verb
         .:get
      .lambda

         /*
          * First removing [.foreign-keys], [columns], adding [count(*)
          * as count, and then transforming lambda
          * to Hyperlambda, and saving it to the correct file - Which is the same filename as the
          * plain get, except appending "-count" to it.
          */
         remove-nodes:x:@apply/*/.foreign-keys
         remove-nodes:x:@apply/*/.handling/-
         remove-nodes:x:@apply/*/.handling
         remove-nodes:x:@apply/**/columns/*
         remove-nodes:x:@apply/**/table/././*/remove-nodes
         remove-nodes:x:@apply/**/return-nodes
         remove-nodes:x:@apply/**/table/././*/add/-
         remove-nodes:x:@apply/**/table/././*/add
         remove-nodes:x:@apply/*/.arguments/*/limit
         remove-nodes:x:@apply/*/.arguments/*/offset
         remove-nodes:x:@apply/*/.arguments/*/order
         remove-nodes:x:@apply/*/.arguments/*/direction
         set-value:x:@apply/*/.type
            .:crud-count
         set-value:x:@apply/*/.description
            strings.replace:Endpoint counting items in your {table} table in your {database} database
               .:{database}
               get-value:x:@.database-name
         set-value:x:@apply/*/.description
            strings.replace:x:@apply/*/.description
               .:{table}
               get-value:x:@.arguments/*/table
         set-value:x:@apply/0
            get-value:x:@apply/*/.description
         add:x:@apply/**/columns
            .
               count(*)
                  as:count
         add:x:@apply/**/table/.
            .
               limit:long:1
         if
            and
               exists:x:@.arguments/*/verbose
               get-value:x:@.arguments/*/verbose
            .lambda
               insert-before:x:@apply/**/table/./-
                  .
                     add:x:./*/data.read
                        get-nodes:x:@.arguments/*/operator
                     remove-nodes:x:@.arguments/*/operator
                     add:x:+/*/where/*
                        get-nodes:x:@.arguments/*

         else
            insert-before:x:@apply/**/table/./-
               .
                  add:x:+/*/where/*
                     get-nodes:x:@.arguments/*

         insert-after:x:@apply/**/table/./+
            .
               return-nodes:x:@data.read/*/*
         lambda2hyper:x:@apply/*
            comments:bool:true
         unwrap:x:+
         .path:x:@.folder
         strings.split:x:@.filename
            .:/
         set-value:x:@.path
            strings.concat
               get-value:x:@.path
               get-value:x:@strings.split/0/-
               .:-count
               .:.
               get-value:x:@.arguments/*/verb
               .:.hl

         // Figuring out filename for HTTP endpoint.
         strings.replace:x:@.path
            .:" "
            .:_

         // Making sure file does not exist from before, unless [.argument][overwrite] is true.
         if
            and
               or
                  not
                     exists:x:@.arguments/*/overwrite
                  not
                     get-value:x:@.arguments/*/overwrite
               io.file.exists:x:@strings.replace
            .lambda
               throw:Module already exists
                  status:int:401
                  public:bool:true

         /*
          * Saving file, now applied according to template declaration,
          * and with the correct filename.
          */
         io.file.save:x:@strings.replace
            get-value:x:@lambda2hyper

         // Adding count endpoint LOC count to our above LOC value.
         set-value:x:@get-count
            math.add
               get-value:x:@get-count
               get-count:x:@apply/**

   // Making sure we evict the cache entry for endpoints.
   cache.set:endpoints

   // Returning success to caller.
   unwrap:x:+/*
   return
      result:success
      loc:x:@get-count
