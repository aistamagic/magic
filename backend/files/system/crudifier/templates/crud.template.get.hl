// dynamically populated
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   operator:string
.description:CRUD read endpoint with {paging}{sorting}filtering selecting records from your {table} table in your {database} database
.type:crud-read
.foreign-keys

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:{database}
   database-type:{database-type}

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:{database-type}
      table:{table}
      columns
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
