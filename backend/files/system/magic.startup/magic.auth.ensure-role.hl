
/*
 * Ensures the specified [role] exists from before, and if not,
 * creates it.
 * 
 * Arguments.
 * 
 * - [role] - Name of role to create.
 * - [description] - Description of role.
 */
slots.create:magic.auth.ensure-role

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/role
   validators.mandatory:x:@.arguments/*/description

   /*
    * Ensures the [role] role exists.
    * 
    * Notice, in case system hasn't been setup yet, we'll need to silently
    * catch all exceptions.
    */
   try

      // Connecting to Magic database.
      data.connect:[generic|magic]

         // Checking to see if [role] role exists.
         data.read
            table:roles
            where
               and
                  name.eq:x:@.arguments/*/role

         // Checking result of above invocation.
         if
            not
               exists:x:@data.read/*/*
            .lambda

               // We need to insert [role] role into Magic database.
               data.create
                  table:roles
                  values
                     name:x:@.arguments/*/role
                     description:x:@.arguments/*/description
   .catch

      /*
       * Silently catching here, to avoid application crash
       * if system hasn't been setup yet.
       */
      .silent
