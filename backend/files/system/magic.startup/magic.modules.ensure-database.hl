
/*
 * Helper slot to initially create and migrate any particular [module] app's
 * database by executing the module's 'xxx.mssql.sql', 'xxx.pgsql.sql', or 'xxx.mysql.sql' script,
 * and all migration scripts existing within module's "db-migrations" folder, according to
 * which database type happens to be the default.
 * 
 * Arguments
 * 
 * - [module] - Module's name and root folder.
 * - [database] - Module's database, and connection string reference.
 * - [database-type] - Optional type of database. If not specified defaults to the default database.
 * 
 * The slot assumes the module is created according to the same structure, having
 * a 'db-migrations' folder inside of its 'magic.startup' folder, containing SQL
 * files that upgrades the module's database. In addition to 'xxx.yyy.sql' scripts,
 * where 'xxx' is the name of the module, and 'yyy' is the database type.
 * 
 * Only truly works with modules created to transparently support both MySQL
 * and SQL Server database types.
 */
slots.create:magic.modules.ensure-database

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/module
   validators.mandatory:x:@.arguments/*/database

   // Returned to caller to signal whether or not operation was a success or not.
   .result:bool:true

   /*
    * Figuring out folder from where to read migration scripts and
    * main 'create-database.sql' script.
    */
   .database-type:x:@.arguments/*/database-type
   unwrap:x:-
   if
      null:x:@.database-type
      .lambda
         set-value:x:@.database-type
            config.get:"magic:databases:default"
   .create-database-script
   .migration-script-folder
   set-value:x:@.create-database-script
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/magic.startup/
         get-value:x:@.arguments/*/module
         .:.
         get-value:x:@.database-type
         .:.sql
   set-value:x:@.migration-script-folder
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/magic.startup/db-migrations/
         get-value:x:@.database-type
         .:/

   // Checking if database already exists.
   strings.concat
      .:magic.db.
      get-value:x:@.database-type
      .:.databases
   signal:x:-
   strings.concat
      .:@signal/*/*/db/=
      get-value:x:@.arguments/*/database
   set-x:x:+/*/*/exists
      convert:x:@strings.concat
         type:x
   if
      not
         exists
      .lambda

         // Executing create database SQL script, making sure we trap exceptions.
         try

            // Loading file.
            io.file.load:x:@.create-database-script

            // Opening database connection.
            switch:x:@.database-type

               case:mysql
                  mysql.connect:sys
                     mysql.execute:x:@io.file.load

               case:pgsql
                  pgsql.connect:postgres
                     strings.concat
                        .:"create database "
                        get-value:x:@.arguments/*/database
                     pgsql.execute:x:-
                        database:x:@.arguments/*/database
                  pgsql.connect:x:@.arguments/*/database
                     pgsql.execute:x:@io.file.load

               case:mssql
                  mssql.connect:master
                     mssql.execute-batch:x:@io.file.load

               case:sqlite
                  strings.concat
                     .:/data/
                     get-value:x:@.arguments/*/database
                     .:.db
                  io.file.save:x:-
                     .:
                  sqlite.connect:x:@.arguments/*/database
                     sqlite.execute:x:@io.file.load

            // Doing some basic logging.
            log.info:Successfully created database
               database_name:x:@.arguments/*/database

         .catch

            // Logging exception.
            log.error:Something went wrong when creating database
               database:x:@.arguments/@.arguments/*/database
               script:x:@.create-database-script
               error:x:@.arguments/*/message

   /*
    * Making sure module has a migration script folder, and if not,
    * returning early.
    */
   if
      not
         io.folder.exists:x:@.migration-script-folder
      .lambda

         // Module doesn't have a migration script folder.
         return:bool:true

   // Iterating through each SQL script found in folder.
   io.file.list:x:@.migration-script-folder
   for-each:x:@io.file.list/*

      // Verifying file is an SQL file.
      if
         strings.ends-with:x:@.dp/#
            .:.sql
         .lambda

            // Loading SQL migration script file.
            io.file.load:x:@.dp/#

            // Executing file, making sure we trap exceptions.
            try

               // Opening database connection.
               data.connect:x:@.arguments/*/database

                  // Special case for MS SQL to make sure we use batch execute.
                  if
                     eq
                        get-value:x:@.database-type
                        .:mssql
                     .lambda

                        // SQL server, ensuring we use batch execute.
                        set-name:x:@data.connect/*/data.execute
                           .:mssql.execute-batch

                  // Executing SQL script now.
                  data.execute:x:@io.file.load

                  // Logging the fact that we've executed the database migration script.
                  log.info:Database migration script successfully executed
                     script:x:@.dp/#
            .catch

               // Logging exception.
               log.error:Something went wrong as we tried to execute plugin database migration script
                  script:x:@.dp/#
                  error:x:@.arguments/*/message

               // Ensuring slot returns false.
               set-value:x:@.result
                  .:bool:false

   // Returning result of invocation to caller.
   return
