
// Imprisons user preventing him from accessing Magic until some specific release date.
.arguments
   username:string
   releaseDate:date
.description:Imprisons user preventing him from accessing Magic until some specific release date
.type:internal

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/releaseDate

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Updating user record in database.
data.connect:magic
   data.update
      table:users
      where
         and
            username:x:@.arguments/*/username
      values
         locked:bool:true

/*
 * Creating a scheduled task that automatically releases user
 * at the specified release date and time.
 */
guid.new
strings.concat
   .:user.imprisoned.released.
   convert:x:@guid.new
      type:string
unwrap:x:+/**/.username
tasks.create:x:@strings.concat
   due:x:@.arguments/*/releaseDate
   description:Releases specified user from imprisonment
   .lambda

      /*
       * Release date, releasing user from prison.
       * 
       * Updating user record in database.
       */
      .username:x:@.arguments/*/username
      data.connect:magic
         data.update
            table:users
            where
               and
                  username:x:@.username
            values
               locked:bool:false

      // Making sure we log the fact that user was released.
      log.info:User released
         username:x:@.username

// Making sure we log the fact that user was imprisoned.
log.info:User imprisoned
   username:x:@.arguments/*/username
   release_date:x:@.arguments/*/releaseDate

// Returns the authentication JWT ticket created above to caller.
return-nodes
   result:success
