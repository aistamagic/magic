
/*
 * Verifies an email address typically supplied
 * during registration of a new user in the system.
 */
.arguments
   username:string
   code:string
.description:Verifies an email address typically supplied during registration of a new user in the system
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/code

// Verifying user exists and has not already verified his or her email address.
data.connect:magic

   // Checking if username exists in database.
   data.read
      table:users
      where
         and
            username:x:@.arguments/*/username
            locked:bool:false
   if
      not
         exists:x:@data.read/*/*
      .lambda

         // No such user.
         throw:Access denied
            public:bool:true
            status:int:401

   // Verifying user has not yet confirmed his email address.
   data.read
      table:users_roles
      where
         and
            user:x:@.arguments/*/username
            role:unconfirmed
   if
      not
         exists:x:@data.read/*/*
      .lambda

         // User has previously verified his email address.
         throw:Access denied
            public:bool:true
            status:int:401

   /*
    * Sanity checking token supplied, which was generated by
    * combining JWT auth secret with user's username.
    */
   .token
   strings.concat
      get-value:x:@.arguments/*/username
      config.get:"magic:auth.secret"
   set-value:x:@.token
      crypto.hash:x:@strings.concat
   if
      not
         eq
            strings.substring:x:@.token
               .:int:0
               .:int:6
            get-value:x:@.arguments/*/code
      .lambda

         // Token mismatch.
         throw:Access denied
            public:bool:true
            status:int:401

   /*
    * Updating user's verified status by removing him or
    * her from the 'unconfirmed' role and adding the user
    * to the default registration role.
    */
   config.get:"magic:auth:registration:default-role"
      .:guest
   data.delete
      table:users_roles
      where
         and
            user:x:@.arguments/*/username
            role:unconfirmed
   data.create
      table:users_roles
      values
         user:x:@.arguments/*/username
         role:x:@config.get

   // Logging the fact that user confirmed his email address.
   log.info:User successfully confirmed email address
      username:x:@.arguments/*/username

   /*
    * Creating a JWT ticket for the user, returning it immediately, such that the frontend
    * can automatically authenticate the user.
    */
   unwrap:x:+/**
   auth.ticket.create
      username:x:@.arguments/*/username
      roles
         .:x:@config.get

   // Selecting all extra information associated with user.
   data.read
      table:users_extra
      columns
         type
         value
      where
         and
            user.eq:x:@.arguments/*/username
   for-each:x:@data.read/*
      set-name:x:./*/add/[0,1]/*/*/name
         get-value:x:@.dp/#/*/type
      unwrap:x:+/*/*
      add:x:././*/return/*/extra
         .
            name:x:@.dp/#/*/value

   // Invoking plugins interested in event.
   slots.vocabulary:magic.users.confirmed.
   for-each:x:@slots.vocabulary/*
      .lambda
         unwrap:x:+/*
         signal:x:@.dp/#
            username:x:@.arguments/*/username
      eval:x:@.lambda

   // Returning results back to caller.
   unwrap:x:+/+/*
   if
      not
         exists:x:./././*/return/*/extra/0
      .lambda
         remove-nodes:x:./././*/return/*/extra
   return
      ticket:x:@auth.ticket.create
      extra
