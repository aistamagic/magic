
/*
 * Changes the password of the currently authenticated user.
 * 
 * Requires the user to be successfully authenticated, and an [.arguments]/[password]
 * being the new password to use for authenticated user.
 * 
 * Optionally pass in an explicit [database-type] for cases when your database hasn't been configured yet.
 */
slots.create:magic.auth.change-password

   // Ensuring a password was actually provided.
   validators.mandatory:x:@.arguments/*/password

   /*
    * Retrieving currently authenticated user's username, and sanity checking to make sure
    * client actually is authenticated.
    */
   auth.ticket.get
   if
      eq
         get-value:x:@auth.ticket.get
         .
      .lambda
         throw:Access denied
            status:int:401
            public:bool:true

   // Hashing password if we should.
   .password
   if
      and
         exists:x:@.arguments/*/is_hashed
         get-value:x:@.arguments/*/is_hashed
      .lambda
         set-value:x:@.password
            get-value:x:@.arguments/*/password
   else
      set-value:x:@.password
         crypto.password.hash:x:@.arguments/*/password

   /*
    * Opens up our database connection.
    * Notice, since this slot is used during setup of system, we allow for caller to
    * explicitly change database type during invocation.
    */
   add:x:+
      get-nodes:x:@.arguments/*/database-type
   data.connect:magic

      /*
       * Checking if token is a [reset-password] type of token, and if
       * so, verifying that the old password's hashed value matches the
       * current password. This is necessary to avoid using the same
       * reset-password link twice, to allow an adversary to steal a
       * change password token, for then to change it after the user
       * has changed the password himself.
       */
      if
         exists:x:@auth.ticket.get/*/roles/*/=reset-password
         .lambda

            /*
             * Making sure hash of old password matches [old-password]
             * role from token.
             */
            add:x:+
               get-nodes:x:@.arguments/*/database-type
            data.read
               table:users
               columns
                  password
               where
                  and
                     username:x:@auth.ticket.get
                     locked:bool:false

            // Verifying above returned a [password] for us.
            if
               not
                  exists:x:@data.read/*/*/password
               .lambda

                  /*
                   * No [password] returned from above [data.read] invocation, which
                   * might occur if user was locked after his reset-password link was generated.
                   */
                  log.error:User tried to change password after having been deleted or locked
                     username:x:@auth.ticket.get
                  throw:Access denied
                     public:bool:true
                     status:int:401

            /*
             * Making sure hash of existing password is a match to the [old-password] claim
             * from the JWT ticket.
             */
            crypto.hash:x:@data.read/*/*/password
            if
               not
                  eq
                     get-value:x:@crypto.hash
                     get-value:x:@auth.ticket.get/*/roles/1
               .lambda

                  // Password has already been changed since JWT token was created.
                  log.error:Multiple attempts at trying to change password with the same token
                     username:x:@auth.ticket.get
                  throw:Access denied
                     status:int:401
                     public:bool:true

      /*
       * Changes the password of the currently logged in user
       * to whatever new password user provided.
       */
      add:x:+
         get-nodes:x:@.arguments/*/database-type
      data.update
         table:users
         values
            password:x:@.password
         where
            and
               username:x:@auth.ticket.get
