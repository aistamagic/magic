
// Registers a new user in the backend.
.arguments
   username:string
   password:string
   frontendUrl:string
   template:string
   subject:string
   recaptcha_response:string
   extra:*
.description:Registers a new user in the system. Notice, to fully take advantage of this endpoint you would want to configure your SMTP settings. The [recaptcha_response] will only be activated if you have configured reCAPTCHA in your configuration settings.
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password
validators.url:x:@.arguments/*/frontendUrl
validators.regex:x:@.arguments/*/username
   regex:[a-z0-9-]{2,20}
validators.string:x:@.arguments/*/password
   min:8

/*
 * Checking if backend is configured to use reCAPTCHA, and if so,
 * making sure we ensure the frontend supplied a [recaptcha_response],
 * and invoking slot responsible for verifying reCAPTCHA value.
 */
config.get:"magic:auth:recaptcha:key"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
   .lambda
   
      // [recaptcha_response] is a mandatory field.
      validators.mandatory:x:@.arguments/*/recaptcha_response
      
      // Retrieving secret and invoking slot responsible for verifying reCAPTCHA value.
      config.get:"magic:auth:recaptcha:secret"
      validators.recaptcha:x:@.arguments/*/recaptcha_response
         min:decimal:0.5
         site-key:x:@config.get/@config.get
         secret:x:@config.get

// Verifying that Magic is configured to allow for users to register.
config.get:"magic:auth:registration:allow"
if
   not
      eq
         get-value:x:@config.get
         .:True
   .lambda

      // Doing some basic logging and returning failure to caller.
      log.error:User tried to register at site, but registrations are turned OFF
         username:x:@.arguments/*/username
      throw:Access denied
         public:bool:true
         status:int:401

/*
 * Retrieving extra information, making sure we only allow
 * for extra information that's allowed according to configuration settings.
 */
.arguments_copy
add:x:@.arguments_copy
   get-nodes:x:@.arguments/*
.extra
config.get:"magic:auth:registration:extra"
   .:name,email
strings.split:x:@config.get
   .:,
for-each:x:@strings.split/*
   if
      exists:x:@.arguments/*/extra/*/{@.dp/#}
      .lambda
         set-name:x:+/+/*/*
            get-value:x:@.dp/#
         unwrap:x:+/*/*/*
         add:x:@.extra
            .
               .
                  value:x:@.arguments/*/extra/*/{@.dp/#}
                  type:x:@.dp/#
   remove-nodes:x:@.arguments/*/extra/*/{@.dp/#}

// Making sure no unsupported [extra] information was supplied.
if
   exists:x:@.arguments/*/extra/*
   .lambda
      strings.concat
         .:"Unsupported extra field '"
         get-name:x:@.arguments/*/extra/0
         .:"' supplied to endpoint"
      throw:x:-
         public:bool:true
         status:int:400

// Hashing user's password.
crypto.password.hash:x:@.arguments/*/password

// Inserts user into database.
data.connect:magic

   /*
    * Making sure we catch primary key violations,
    * and returns something sane to caller.
    */
   try

      // Inserting user into database.
      data.create
         table:users
         values
            username:x:@.arguments/*/username
            password:x:@crypto.password.hash

   .catch

      // Doing some basic logging, and returning result to caller.
      log.error:User tried to register consecutive times
         username:x:@.arguments/*/username
      return
         result:already-registered

   /*
    * Response result to return to user, which varies according
    * to whether or not an email was sent, etc.
    */
   .result:success

   /*
    * Sends an email to user asking him or her to confirm their email address.
    * 
    * Notice, we only do this if we can find SMTP settings in our configuration.
    */
   .email-sent:No
   config.get:"magic:smtp:host"
   if
      and
         exists:x:@.extra/*/email/*/value
         not
            eq
               get-value:x:@config.get
               .
         not
            eq
               get-value:x:@config.get
               .:
         exists:x:@.arguments/*/frontendUrl
      .lambda

         // Default template to use for sending user a "verify email address" link.
         .template:/system/auth/email-templates/register.html

         // Checking if caller supplied a different email template to use.
         if
            exists:x:@.arguments/*/template
            .lambda
               set-value:x:@.template
                  get-value:x:@.arguments/*/template

         // Default subject line for verify email address email.
         .subject:Thank you for registering with Aista Magic Cloud

         // Checking if caller supplied a different email subject to use.
         if
            exists:x:@.arguments/*/subject
            .lambda
               set-value:x:@.subject
                  get-value:x:@.arguments/*/subject

         // Making sure we store the fact that a verify email address link was sent.
         set-value:x:@.email-sent
            .:Yes

         /*
          * Hashing the JWT secret combined with the user's selected username,
          * making sure we use the result as a 'secret' URL query
          * parameter for the user's 'confirm email address' link.
          */
         .token
         strings.concat
            get-value:x:@.arguments/*/username
            config.get:"magic:auth.secret"
         set-value:x:@.token
            crypto.hash:x:@strings.concat

         // Dynamically building our confirm email URL.
         strings.concat
            .:"https://"
            request.host
         .url
         set-value:x:@.url
            strings.concat
               get-value:x:@.arguments/*/frontendUrl
               .:?token=
               get-value:x:@.token
               .:&username=
               strings.url-encode:x:@.arguments/*/username
               .:&url=
               strings.url-encode:x:@strings.concat/@strings.concat

         /*
          * Checking if site is configured such that users needs to
          * be manually enabled, at which point we send the "confirm registration email"
          * to the "confirm-email" value from the configuration settings,
          * instead of the user's registered email address.
          * 
          * Notice, by default this email is sent to registered user, but if
          * overridden in the configuration to an explicit email, the explicit email
          * address is used instead. Which allows for a specific user to manually
          * having to enable users that are registering at the site for all practical
          * concerns.
          */
         .recipient
         set-value:x:@.recipient
            config.get:"magic:auth:registration:confirm-email"
         if
            or
               eq
                  get-value:x:@.recipient
                  .
               eq
                  get-value:x:@.recipient
                  .:
            .lambda

               /*
                * No "confirm-email" value found in configuration, hence sending
                * "confirm user email" to user himself.
                */
               set-value:x:@.recipient
                  get-value:x:@.extra/*/email/*/value

               /*
                * Making sure we communicate to caller that a
                * confirm email address email was sent.
                */
               set-value:x:@.result
                  .:confirm-email-address-email-sent

         else

            /*
             * Making sure we communicate to caller that a
             * confirm email address email was sent.
             */
            set-value:x:@.result
               .:email-sent-to-moderator

         // Creating our 6 digit code.
         .code
         set-value:x:@.code
            strings.substring:x:@.token
               .:int:0
               .:int:6

         // Now we can send an email to user.
         unwrap:x:+/**
         signal:magic.emails.send
            subject:x:@.subject
            template-file:x:@.template
            substitutes
               url:x:@.url
               code:x:@.code
            mime-type:text/html
            email:x:@.recipient
            name:x:@.extra/*/name/*/value

   // Associating user with correct role.
   data.create
      table:users_roles
      values
         user:x:@.arguments/*/username
         role:unconfirmed

   // Inserting all extra information we've got on user.
   for-each:x:@.extra/*
      data.create
         table:users_extra
         values
            user:x:@.arguments/*/username
            type:x:@.dp/#/*/type
            value:x:@.dp/#/*/value

   // Logging the fact that we registered a new user.
   request.ip
   log.info:Successfully registered a new user
      username:x:@.arguments/*/username
      verify-email-sent:x:@.email-sent
      ip:x:@request.ip

   // Invoking plugins interested in event.
   slots.vocabulary:magic.users.registered.
   for-each:x:@slots.vocabulary/*
      .lambda
         unwrap:x:+/*
         signal:x:@.dp/#
            username:x:@.arguments/*/username
      add:x:@.lambda/*/signal
         get-nodes:x:@.arguments_copy/*/extra/*
      eval:x:@.lambda

   // Returns success to caller.
   unwrap:x:+/*
   return-nodes
      result:x:@.result
