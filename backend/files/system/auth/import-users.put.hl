
/*
 * Endpoint for uploading CSV file with multiple users in.
 */
.description:Endpoint for uploading CSV file with multiple users in
.arguments
   file:*
.type:file-upload
.accept:multipart/form-data

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file/*/name
validators.mandatory:x:@.arguments/*/file/*/stream

// Verifying user has access to invoke endpoint.
auth.ticket.verify:root

// Loading CSV content from specified stream.
io.stream.read:x:@.arguments/*/file/*/stream

// Transforming content to lambda.
csv2lambda:x:@io.stream.read

// Opening up our database connection.
data.connect:[generic|magic]

   // Iterating through each record in above CSV file and creating a user belonging to the guest role.
   for-each:x:@csv2lambda/*
      signal:transformers.hash-password
         reference:x:@.dp/#/*/password

      // Creating our user record.
      data.create
         table:users
         return-id:bool:false
         values
            username:x:@.dp/#/*/username
            password:x:@.dp/#/*/password

      if
         exists:x:@.dp/#/*/roles
         .lambda
            strings.split:x:@.dp/#/*/roles
               .:" "
            for-each:x:@strings.split/*
               data.create
                  table:users_roles
                  values
                     user:x:@for-each/@.dp/#/*/username
                     role:x:@.dp/#

      // Iterating through all fields, excluding username and passwords, and using as extra fields.
      for-each:x:@.dp/#/*

         // Making sure we exclude username and password
         get-name:x:@.dp/#
         switch:x:-

            case:username
            case:password
            case:roles

               // Do nothing
               .foo

            default
               data.create
                  table:users_extra
                  return-id:bool:false
                  values
                     user:x:@for-each/@.dp/#/*/username
                     type:x:@get-name
                     value:x:@.dp/#

// Returning success to caller.
get-count:x:@csv2lambda/*
unwrap:x:+/*
return
   count:x:@get-count
