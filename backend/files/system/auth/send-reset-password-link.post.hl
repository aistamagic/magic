
/*
 * Sends a reset password email to user.
 * 
 * Notice, assumes username is a valid email address.
 * 
 * The [frontendUrl] is the frontend root URL you want to prepend the
 * password link with.
 * 
 * This endpoint also assumes that some sort of SMTP server have
 * been configured in the site's configuration parts.
 */
.arguments
   username:string
   frontendUrl:string
   template:string
   subject:string
   recaptcha_response:string
.description:Sends a reset password email to the specified user. Assumes the username is a valid email address.
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/frontendUrl
validators.url:x:@.arguments/*/frontendUrl

/*
 * Checking if backend is configured to use reCAPTCHA, and if so,
 * making sure we ensure the frontend supplied a [recaptcha_response],
 * and invoking slot responsible for verifying reCAPTCHA value.
 */
config.get:"magic:auth:recaptcha:key"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
   .lambda
   
      // [recaptcha_response] is a mandatory field.
      validators.mandatory:x:@.arguments/*/recaptcha_response
      
      // Retrieving secret and invoking slot responsible for verifying reCAPTCHA value.
      config.get:"magic:auth:recaptcha:secret"
      validators.recaptcha:x:@.arguments/*/recaptcha_response
         min:decimal:0.5
         site-key:x:@config.get/@config.get
         secret:x:@config.get

// Finding user's email address from users_extra
.email
.name:Magic User
.username:x:@.arguments/*/username
unwrap:x:-
data.connect:[generic|magic]
   data.read
      table:users_extra
         as:ue1
         join:users_extra
            as:ue2
            type:inner
            on
               and
                  ue1.user.eq:ue2.user
      columns
         ue1.value
            as:email
         ue2.value
            as:name
      where
         and
            ue1.user.eq:x:@.username
            ue1.type.eq:email
            ue2.user.eq:x:@.username
            ue2.type.eq:name
   if
      not-exists:x:@data.read/*/*
      .lambda

         // Checking if user supplied email address and not username.
         if
            strings.contains:x:@.username
               .:@
            .lambda

               // User probably supplied his email and not username.
               data.read
                  table:users_extra
                     as:ue1
                     join:users_extra
                        as:ue2
                        type:inner
                        on
                           and
                              ue1.user.eq:ue2.user
                  columns
                     ue1.user
                        as:username
                     ue2.value
                        as:name
                  where
                     and
                        ue1.value.eq:x:@.username
                        ue1.type.eq:email
                        ue2.type.eq:name
                  limit:1
               if
                  not-exists:x:@data.read/*/*
                  .lambda

                     // No such email address in system.
                     throw:No such user or user does not have email address or name
                        public:bool:true
                        status:404

               set-value:x:@.email
                  get-value:x:@.username
               set-value:x:@.username
                  get-value:x:@data.read/*/*/username
               set-value:x:@.name
                  get-value:x:@data.read/*/*/name

         else

            // No such user, or user doesn't have email or name associated with it.
            throw:No such user or user does not have email address or name
               public:bool:true
               status:404

   else

      // Setting temporary variables to email/name taken from database.
      set-value:x:@.email
         get-value:x:@data.read/*/*/email
      set-value:x:@.name
         get-value:x:@data.read/*/*/name

/*
 * Invokes [magic.auth.authenticate] that does the heavy lifting,
 * and creates our JWT token that we send to the user as an email.
 */
unwrap:x:+/*
signal:magic.auth.authenticate
   username:x:@.username
   check-password:bool:false
   reset-password:bool:true

// Default template to use for sending user a "reset password" link.
.template
set-value:x:-
   get-first-value
      get-value:x:@.arguments/*/template
      .:/system/auth/email-templates/reset-password.html

// Default subject line for verify email address email.
.subject
set-value:x:-
   get-first-value
      get-value:x:@.arguments/*/subject
      .:Reset your password at Aista Magic Cloud

/*
 * Loading up email template, which is modified and parametrized
 * according to input arguments.
 */
io.file.load:x:@.template

// Dynamically building our reset password URL.
strings.concat
   .:"https://"
   request.host
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.arguments/*/frontendUrl
      .:?token=
      get-value:x:@signal/*/ticket
      .:&username=
      strings.url-encode:x:@.username
      .:&url=
      strings.url-encode:x:@strings.concat/@strings.concat

// Performing substitution in email template.
.body
set-value:x:@.body
   strings.replace:x:@io.file.load
      .:{{url}}
      get-value:x:@.url
set-value:x:@.body
   strings.replace:x:@.body
      .:{{name}}
      get-value:x:@.name

/*
 * Checking that backend is configured with SMTP settings before attempting
 * to actually send email.
 */
config.get:"magic:smtp:host"
if
   not
      eq
         get-value:x:@config.get
         .
   .lambda

      // Sends an email to the user using the SMTP settings from our configuration.
      unwrap:x:./*/mail.smtp.send/**
      mail.smtp.send
         message
            to
               .
                  email:x:@.email
                  name:x:@.name
            subject:x:@.subject
            entity:text/html
               content:x:@.body

      // Logging the fact the we just sent a reset password email to the user.
      log.info:Reset password email sent
         username:x:@.username

      // Returns success to caller.
      return-nodes
         result:success
else

   /*
    * Logging the fact that we couldn't send a reset password email,
    * and returning failure to caller.
    */
   log.info:Could not send reset passsword email
      reason:No SMTP settings found
   return-nodes
      result:Contact admin of site
