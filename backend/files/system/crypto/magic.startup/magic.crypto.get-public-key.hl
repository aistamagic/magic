
// Returns a public cryptography key, and its associated [vocabulary].
slots.create:magic.crypto.get-public-key

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/fingerprint

   /*
    * Selecting key and vocabulary from database,
    * according to the specified fingerprint.
    * 
    * Notice, key needs to be enabled in order to be returned.
    */
   data.connect:magic
      data.select:select id, content as public_key, domain, email, vocabulary, enabled from crypto_keys where fingerprint = @fingerprint
         @fingerprint:x:@.arguments/*/fingerprint

      // Verifying key exists in database.
      if
         not
            exists:x:./././0/0
         .lambda

            // Public key doesn't exist in database.
            strings.concat
               .:"Public key with fingerprint of '"
               get-value:x:@.arguments/*/fingerprint
               .:"' does not exist"
            throw:x:@strings.concat

      // Verifying key is enabled.
      if
         not
            or
               eq
                  get-value:x:@data.select/*/*/enabled
                  .:bool:true
               eq
                  get-value:x:@data.select/*/*/enabled
                  .:long:1
         .lambda

            // Public key is disabled.
            strings.concat
               .:"Public key with fingerprint of '"
               get-value:x:@.arguments/*/fingerprint
               .:"' is disabled"
            throw:x:@strings.concat

      // Returning result of database invocation to caller.
      add:x:./*/return
         get-nodes:x:@data.select/*/*/id
         get-nodes:x:@data.select/*/*/public_key
         get-nodes:x:@data.select/*/*/domain
         get-nodes:x:@data.select/*/*/email
         get-nodes:x:@data.select/*/*/enabled
      add:x:./*/return/*/vocabulary
         hyper2lambda:x:@data.select/*/*/vocabulary
      return
         vocabulary
