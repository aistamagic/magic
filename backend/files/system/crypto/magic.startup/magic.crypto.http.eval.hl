
/*
 * Allows you to invoke a cryptographically secured HTTP PATCH lambda
 * invocation towards another Magic server, cryptographically signing
 * your payload before it's sent, with your server's private key - And
 * verifying the response from the server is cryptographically secured,
 * by verifying the payload is signed by the key associated with the
 * server's domain when parsing the response.
 * 
 * Arguments.
 * 
 * - [url] - The URL of your invocation
 * - [.lambda] - The lambda object to evaluate on the server
 */
slots.create:magic.crypto.http.eval

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/.lambda
   validators.mandatory:x:@.arguments/*/url
   validators.url:x:@.arguments/*/url

   /*
    * Loading server's private key and key fingerprint since
    * we'll need to sign the request.
    */
   signal:magic.crypto.get-server-private-key

   /*
    * Creating Hyperlambda payload, and signing
    * the message with our private key.
    */
   lambda2hyper:x:@.arguments/*/.lambda/*
   crypto.sign:x:@lambda2hyper
      raw:true
      signing-key:x:@signal/*/private-key
      signing-key-fingerprint:x:@signal/*/fingerprint

   // Invoking HTTP REST endpoint with signed payload.
   http.patch:x:@.arguments/*/url
      headers
         Content-Type:application/octet-stream
      payload:x:@crypto.sign

   // Verifying success, and if not logging the response, and throwing an exception.
   if
      not
         and
            mte
               get-value:x:@http.patch
               .:int:200
            lt
               get-value:x:@http.patch
               .:int:300
      .lambda

         // Success was not returned from [http.patch] invocation.
         strings.concat
            .:@"Invocation to cryptographically secured HTTP endpoint returned
"
            lambda2hyper:x:@http.patch
         throw:x:@strings.concat

   /*
    * Retrieving signing key's fingerprint, for then to retrieve
    * the public key associated with the fingerprint.
    */
   crypto.get-key:x:@http.patch/*/content
   unwrap:x:+/*
   signal:magic.crypto.get-public-key
      fingerprint:x:@crypto.get-key

   // Verifying signature of response.
   crypto.verify:x:@http.patch/*/content
      public-key:x:@signal/*/public_key

   /*
    * Making sure the response was signed with the key
    * associated with the domain we sent the request to.
    * 
    * Notice, this little bugger makes sure the HTTP scheme also matches,
    * to prevent successful invocations towards insecure endpoint, with a key
    * configured for only being used towards TLS secured endpoints.
    */
   strings.split:x:@.arguments/*/url
      .:/
   strings.concat
      get-value:x:@strings.split/0
      .://
      get-value:x:@strings.split/1
   if
      not
         eq
            get-value:x:@strings.concat
            get-value:x:@signal/*/domain
      .lambda

         /*
          * Man in the middle picked up response, and resigned it with
          * a different key than the one we have asssociated with the domain
          * we sent the request to.
          */
         throw:Response payload was not signed by the public key associated with domain we sent the request to

   /*
    * Returning result to caller.
    * 
    * Notice, we try to make sure we return something that's exactly similar to the
    * result created by [http.patch], to allow for users to easily replace existing
    * HTTP invocations with cryptographically signed invocations.
    */
   unwrap:x:./*/return
   unwrap:x:./*/return/*/content
   add:x:./*/return/*/headers
      get-nodes:x:@http.patch/*/headers/*
   return:x:@http.patch
      headers
      content:x:@crypto.verify
