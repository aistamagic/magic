
// Evaluates a cryptographically signed HTTP REST invocation, and persists the invocation into your database.
.arguments
   body:*
.description:Evaluates a cryptographically signed HTTP invocation, and persists the invocation into your database with the [.request-id] as its unique reference
.type:public

// Making sure we communicate what type of content we can accept.
.accept:application/octet-stream

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/body

// Loading stream.
io.stream.read:x:@.arguments/*/body

// Making sure we can trap exceptions to log details about what went wrong.
try

   /*
    * Retrieving signing key's fingerprint, for then to retrieve
    * the public key associated with the fingerprint.
    */
   crypto.get-key:x:@io.stream.read
   unwrap:x:+/*
   signal:magic.crypto.get-public-key
      fingerprint:x:@crypto.get-key

   // Verifies signature, and also chops up payload.
   crypto.verify:x:@io.stream.read
      public-key:x:@signal/*/public_key

   /*
    * Creating a stack object containing the key's fingerprint,
    * to allow the caller's code and referenced slots to retrieve
    * the fingerprint to uniquely identifying the caller.
    */
   context:fingerprint
      value:x:@crypto.get-key
      .lambda

         /*
          * Transforming Hyperlambda to lambda object, and adding into
          * [whitelist] invocation below.
          */
         hyper2lambda:x:@crypto.verify
         add:x:./*/whitelist/*/.lambda
            get-nodes:x:@hyper2lambda/*

         /*
          * We need to store the [.request-id], to make sure
          * we don't execute the same request twice.
          * This is done to avoid replay attacks.
          * In addition we also need to persist a receipt of the
          * request, both its raw format and its parsed Hyperlambda.
          */
         .request
         .request-id
         .request-raw
         set-value:x:@.request
            get-value:x:@crypto.verify
         set-value:x:@.request-id
            get-value:x:@hyper2lambda/*/.request-id
         set-value:x:@.request-raw
            convert:x:@io.stream.read
               type:base64

         // Making sure caller supplied a [.request-id] as a part of his Hyperlambda.
         if
            or
               eq
                  get-value:x:@.request-id
                  .
               eq
                  get-value:x:@.request-id
                  .:
            .lambda

               /*
                * Request has been previously sent to this server, or the caller
                * did not supply a [.request-id].
                */
               throw:No [.request-id] found in the Hyperlambda payload

         // Making sure this request hasn't been invoked previously.
         unwrap:x:+/*/signal/*
         if
            signal:magic.crypto.http.has-invoked
               request-id:x:@.request-id
            .lambda

               // Request has been previously sent to this server.
               strings.concat
                  .:"Request with the id of '"
                  get-value:x:@.request-id
                  .:"' has been previously executed implying a replay attack, hence execution was aborted"
               throw:x:@strings.concat

         /*
          * Adding the [vocabulary] to [whitelist] invocation, according
          * to the user's authorisations, declared in database, associated
          * with fingerprint of his or her public key.
          */
         add:x:./*/whitelist/*/vocabulary
            get-nodes:x:@signal/*/vocabulary/*

         // Evaluating request.
         whitelist
            vocabulary
            .lambda

         /*
          * Figuring out how to return results to caller, defaulting to
          * simply "success".
          * 
          * Notice, regardless of how caller wants his result, we return only
          * strings from endpoint.
          */
         .result:success
         if
            not
               eq
                  get-value:x:@whitelist
                  .
            .lambda

               // Lambda object wants to return a simple string to caller.
               set-value:x:@.result
                  get-value:x:@whitelist
         else-if
            exists:x:@whitelist/*
            .lambda

               // Lambda object wants to return a bunch of nodes to caller.
               set-value:x:@.result
                  lambda2hyper:x:@whitelist/*

         /*
          * Persisting request, including payload, raw request,
          * and response returned by server as a receipt of invocation.
          */
         unwrap:x:+/*
         signal:magic.crypto.http.persist-invocation
            crypto-key:x:@try/*/signal/[0,1]/*/id
            request-id:x:@.request-id
            request:x:@.request
            request-raw:x:@.request-raw
            response:x:@.result

         // Making sure we apply the correct HTTP header.
         response.headers.set
            Content-Type:application/octet-stream

         /*
          * Signing result of invocation to give caller a guarantee of
          * that response was generated by us, and has not been tampered with.
          */
         signal:magic.crypto.get-server-private-key
         crypto.sign:x:@.result
            raw:true
            signing-key:x:@signal/*/private-key
            signing-key-fingerprint:x:@signal/*/fingerprint

         /*
          * Returning result of signing to caller, which will
          * return it as byte[] as our response.
          */
         return:x:@crypto.sign
.catch

   /*
    * Execution error occurred, or signing verification error - Regardless,
    * making sure we return that fact to the caller, by throwing "intelligent"
    * exception, in addition to logging the error that occurred.
    * 
    * Notice, we return a "generic" error to make sure we don't supply
    * valuable information to malicious adversaries, trying to find out
    * valuable information about the system, in order to crack it.
    */
   log.error:x:@.arguments/*/message
   throw:Access denied
      public:true
      status:401
