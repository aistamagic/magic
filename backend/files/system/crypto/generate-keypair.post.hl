
// Creates a new RSA key pair, with the specified parameters
.arguments
   strength:int
   seed:string
   subject:string
   email:string
   domain:string
   username:string
.description:Generates a new server cryptography key pair using the specified arguments, creating a backup of any previously created key pair
.type:internal

// Verifying user can access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/strength
validators.mandatory:x:@.arguments/*/seed
validators.mandatory:x:@.arguments/*/subject
validators.mandatory:x:@.arguments/*/email
validators.mandatory:x:@.arguments/*/domain
validators.email:x:@.arguments/*/email
validators.url:x:@.arguments/*/domain
validators.enum:x:@.arguments/*/strength
   .:int:1024
   .:int:2048
   .:int:4096
   .:int:8192
validators.string:x:@.arguments/*/seed
   min:100

// Using 'root' as default username unless explicitly supplied by caller.
if
   not
      exists:x:@.arguments/*/username
   .lambda
      add:x:@.arguments
         .
            username:root

// Checking to see if a key pair already exists.
if
   io.file.exists:/etc/system/crypto/keys/public.key
   .lambda

      // Creating a backup of the old key pair.
      .public-key
      set-value:x:@.public-key
         io.file.load:/etc/system/crypto/keys/public.key
      .private-key
      set-value:x:@.private-key
         io.file.load:/etc/system/crypto/keys/private.key
      .fingerprint
      set-value:x:@.fingerprint
         crypto.fingerprint:x:@.public-key
      .public-key-filename
      set-value:x:@.public-key-filename
         strings.concat
            .:/etc/system/crypto/keys/public-
            get-value:x:@.fingerprint
            .:.key
      .private-key-filename
      set-value:x:@.private-key-filename
         strings.concat
            .:/etc/system/crypto/keys/private-
            get-value:x:@.fingerprint
            .:.key
      io.file.save:x:@.public-key-filename
         get-value:x:@.public-key
      io.file.save:x:@.private-key-filename
         get-value:x:@.private-key

// Creating our RSA key pair using the specified arguments.
crypto.rsa.create-key
   strength:x:@.arguments/*/strength
   seed:x:@.arguments/*/seed

// Saving key(s) to disc.
io.file.save:/etc/system/crypto/keys/public.key
   get-value:x:@crypto.rsa.create-key/*/public
io.file.save:/etc/system/crypto/keys/private.key
   get-value:x:@crypto.rsa.create-key/*/private

// Doing some basic logging.
log.info:RSA key pair generated for server
   fingerprint:x:@crypto.rsa.create-key/*/fingerprint

// Importing server key into crypto keys storage.
add:x:../*/signal
   get-nodes:x:@.arguments/*/subject
   get-nodes:x:@.arguments/*/email
   get-nodes:x:@.arguments/*/domain
unwrap:x:../*/signal/*/content
unwrap:x:../*/signal/*/username
signal:magic.crypto.import-key
   content:x:@crypto.rsa.create-key/*/public
   enabled:bool:true
   username:x:@.arguments/*/username

/*
 * Since user now has provided us with email address and name,
 * we store this and associates it with root user.
 */
data.connect:[generic|magic]
   data.read
      table:users_extra
      where
         and
            user.eq:x:@.arguments/*/username
            or
               type.eq:name
               type.eq:email
      limit:1
   if
      exists:x:@data.read/*/*
      .lambda
      
         // Updating existing records.
         data.update
            table:users_extra
            values
               value:x:@.arguments/*/email
               user:x:@.arguments/*/username
               type:email
            where
               and
                  user.eq:x:@.arguments/*/username
                  type.eq:email
         data.update
            table:users_extra
            values
               value:x:@.arguments/*/subject
               user:x:@.arguments/*/username
               type:name
            where
               and
                  user.eq:x:@.arguments/*/username
                  type.eq:name
   else
      
      // Inserting new records
      data.create
         table:users_extra
         return-id:bool:false
         values
            value:x:@.arguments/*/email
            user:x:@.arguments/*/username
            type:email
      data.create
         table:users_extra
         return-id:bool:false
         values
            value:x:@.arguments/*/subject
            user:x:@.arguments/*/username
            type:name
      

// Returning the public key, and its fingerprint to caller.
unwrap:x:+/*
return
   fingerprint:x:@crypto.rsa.create-key/*/fingerprint
   public_key:x:@crypto.rsa.create-key/*/public
