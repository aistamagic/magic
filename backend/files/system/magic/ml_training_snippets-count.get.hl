
// Endpoint counting items in your ml_training_snippets table in your magic database
.arguments
   ml_training_snippets.type.eq:string
   ml_training_snippets.pushed.eq:long
   ml_training_snippets.uri.like:string
   ml_training_snippets.uri.eq:string
   ml_training_snippets.prompt.like:string
   ml_training_snippets.prompt.eq:string
   ml_training_snippets.completion.like:string
   ml_training_snippets.completion.eq:string
   not_embedded:bool
.description:Endpoint counting items in your ml_training_snippets table in your magic database
.type:crud-count

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   if
      and
         exists:x:@.arguments/*/not_embedded
         get-value:x:@.arguments/*/not_embedded
      .lambda
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               embedding.eq
         remove-nodes:x:@.arguments/*/not_embedded

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/*/or
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Removing [or] parts unless we've got something to actually or.
   if
      not-exists:x:@data.connect/*/data.read/*/where/*/and/*/or/*
      .lambda
         remove-nodes:x:@data.connect/*/data.read/*/where/*/and/*/or

   // Reading data from database.
   data.read
      table:ml_training_snippets
      columns
         count(*)
            as:count
      where
         and
            or
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
