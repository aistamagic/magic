
// CRUD read endpoint with paging, sorting, filtering selecting records from your ml_training_snippets table in your magic database returning id, created, type, pushed, uri, prompt, completion filtering on id, created, type, pushed, uri, prompt, completion with authentication and authorisation for root roles
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   ml_training_snippets.id.eq:long
   ml_training_snippets.type.like:string
   ml_training_snippets.type.eq:string
   ml_training_snippets.pushed.eq:long
   ml_training_snippets.uri.like:string
   ml_training_snippets.uri.eq:string
   ml_training_snippets.prompt.like:string
   ml_training_snippets.prompt.eq:string
   ml_training_snippets.completion.like:string
   ml_training_snippets.completion.eq:string
.description:CRUD read endpoint with paging, sorting, filtering selecting records from your ml_training_snippets table in your magic database returning id, created, type, pushed, uri, prompt, completion filtering on id, created, type, pushed, uri, prompt, completion with authentication and authorisation for root roles
.type:crud-read

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/*/or
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Removing [or] parts unless we've got something to actually or.
   if
      not-exists:x:@data.connect/*/data.read/*/where/*/and/*/or/*
      .lambda
         remove-nodes:x:@data.connect/*/data.read/*/where/*/and/*/or

   // Reading data from database.
   data.read
      table:ml_training_snippets
      columns
         ml_training_snippets.id
         ml_training_snippets.created
         ml_training_snippets.type
         ml_training_snippets.pushed
         ml_training_snippets.uri
         ml_training_snippets.prompt
         ml_training_snippets.completion
         ml_training_snippets.embedding
      where
         and
            or

   // Changing embedding to a boolean value to preserve bandwidth.
   for-each:x:@data.read/*
      if
         not-null:x:@.dp/#/*/embedding
         .lambda
            set-value:x:@.dp/#/*/embedding
               .:bool:true
      else
         set-value:x:@.dp/#/*/embedding
            .:bool:false

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
