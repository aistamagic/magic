
/*
 * Attempts to send a braided email, substituting template values found in the
 * specified emplate email file from the given collection of [substitutes].
 * 
 * Notice, will not do anything unless SMTP configuration settings can be found
 * in your appSettings.json file.
 * 
 * Arguments;
 * 
 * - [subject] - Subject line for email.
 * - [template-file] - Template file that contains the email that is to be sent
 * - [substitutes] - Key value collection of substitutions to perform in template file. E.g. {{foo}} in template file will be replaced by the value of [substitutes]/[foo]'s value.
 * - [mime-type] - MIME type email will be sent as, e.g. "text/plain" or "text/html".
 * - [email] - To email address of where to send email.
 * - [name] - Name of recipient of email.
 * - [attachments] - List of [entity] instances that will be attached with the email.
 * 
 * Notice, the from email/name will be fetched from your appSettings.json file. And the same with the SMTP server configuration settings.
 */
slots.create:magic.emails.send

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/subject
   validators.mandatory:x:@.arguments/*/email
   validators.mandatory:x:@.arguments/*/template-file
   validators.mandatory:x:@.arguments/*/mime-type
   validators.enum:x:@.arguments/*/mime-type
      .:text/plain
      .:text/html

   // Verifying there exists valid SMTP configuration settings.
   config.get:"magic:smtp:host"
   if
      eq
         get-value:x:@config.get
         .
      .lambda

         // Oops, no SMTP settings found, logging that fact, and returning early.
         log.error:"Tried to send an email but couldn't since there is no SMTP server configured in your appSettings.json file"
         return-value:bool:false

   // Verifying template file specified by caller exists.
   if
      not
         io.file.exists:x:@.arguments/*/template-file
      .lambda

         // Template file doesn't exists, logging that fact, and returning early.
         log.error:Email template not found while trying to send template email
            template:x:@.arguments/*/template-file
         return-value:bool:false

   // Loading template file and performing substitutions.
   .body
   set-value:x:@.body
      io.file.load:x:@.arguments/*/template-file
   for-each:x:@.arguments/*/substitutes/*
      set-value:x:@.body
         strings.replace:x:@.body
            strings.concat
               .:{{
               get-name:x:@.dp/#
               .:}}
            get-value:x:@.dp/#
            
   // Common substitutions.
   if
      and
         exists:x:@.arguments/*/name
         neq:x:@.arguments/*/name
            .
      .lambda
         set-value:x:@.body
            strings.replace:x:@.body
               .:{{name}}
               get-value:x:@.arguments/*/name
   set-value:x:@.body
      strings.replace:x:@.body
         .:{{email}}
         get-value:x:@.arguments/*/email

   /*
    * Making sure we log our attempt of sending the email, with all arguments supplied.
    * 
    * In case of failures, this allows us to later "replay" the send email invocation if necessary.
    */
   log.info:Attempting to send template email
      email:x:@.arguments/*/email
      name:x:@.arguments/*/name
      subject:x:@.arguments/*/subject
      body:x:@.body

   /*
    * Checking if caller supplied [attachments], at which
    * point we need to send a multipart/mixed email.
    */
   if
      exists:x:@.arguments/*/attachments/*
      .lambda

         // Caller specified [attachments], hence we need to send a multipart/mixed message.
         .entity
            entity:multipart/mixed
               entity:x:@.arguments/*/mime-type
                  content:x:@.body
         add:x:@.entity/*
            get-nodes:x:@.arguments/*/attachments/*

         // Moving the body of the email to inside of multipart/mixed part.
         remove-nodes:x:../*/mail.smtp.send/*/message/*/entity
         add:x:../*/mail.smtp.send/*/message
            get-nodes:x:@.entity/*

   // Checking if caller supplied a [name] argument.
   if
      and
         exists:x:@.arguments/*/name
         neq:x:@.arguments/*/name
            .
      .lambda

         // Caller supplied us with a [name] argument.
         set-name:x:../*/mail.smtp.send/*/message/*/to/0
            get-value:x:@.arguments/*/name

   // Sending email.
   unwrap:x:+/**
   mail.smtp.send
      message
         to
            :x:@.arguments/*/email
         subject:x:@.arguments/*/subject
         entity:x:@.arguments/*/mime-type
            content:x:@.body

   // Logging the fact that email was successfully sent.
   log.info:Template email successfully sent
      email:x:@.arguments/*/email
      template:x:@.arguments/*/template-file

   // Returning success to caller.
   return-value:bool:true
