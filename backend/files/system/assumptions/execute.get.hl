
// Executes the specified test and returns result to caller.
.arguments
   root_url:string
   test_file:string
.description:Executes the specified test and returns the result
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/root_url
validators.mandatory:x:@.arguments/*/test_file

/*
 * Loading assumption test Hyperlambda file,
 * and converting Hyperlambda to lambda.
 */
io.file.load:x:@.arguments/*/test_file
hyper2lambda:x:-

/*
 * Checking if this is a lambda assumption, and if so,
 * executing lambda, verifying no exceptions are thrown.
 */
if
   exists:x:@hyper2lambda/*/.lambda
   .lambda

      /*
       * Lambda assumption, making sure we catch exceptions, while
       * getting root nodes to resolve correctly in the process.
       */
      try
         .x:node:""
         add:x:@.x/#
            get-nodes:x:@hyper2lambda/*/.lambda/*
         eval:x:@.x/#

         // Success, returning such to caller.
         return
            result:success
      .catch

         // Oops, exception occurred, logging before returning failure to caller.
         strings.concat
            .:"Assumption test failed, test file: "
            get-value:x:../*/.arguments/*/test_file
            .:@"
Error: Unhandled exception occurred.
Exception: "
            get-value:x:@.arguments/*/message
         log.error:Assumption test failed
            file:x:../*/.arguments/*/test_file
            message:x:@.arguments/*/message
         unwrap:x:+/*
         return
            result:x:@strings.concat

/*
 * Retrieving Authorization header used to invoke current endpoint,
 * and forwarding it into invocation towards assumption test.
 */
request.headers.get:Authorization

/*
 * Adding [payload] if assumption test declares it, and
 * making sure we declare the correct Content-Type HTTP header,
 * if assumption test declares a payload.
 */
if
   exists:x:@hyper2lambda/*/payload
   .lambda
      add:x:../*/http.xxx
         get-nodes:x:@hyper2lambda/*/payload
      add:x:../*/http.xxx/*/headers
         .
            Content-Type:application/json

// Making sure we use the correct HTTP verb.
strings.concat
   get-value:x:@.arguments/*/root_url
   get-value:x:@hyper2lambda/*/url
set-name:x:../*/http.xxx
   strings.concat
      .:http.
      get-value:x:@hyper2lambda/*/verb

// Invoking assumption test.
http.xxx:x:@strings.concat
   headers
      Authorization:x:@request.headers.get
.foo

/*
 * Making sure assumptions and reality overlaps.
 * 
 * First we check HTTP status code, and verifies it's correct.
 */
if
   not
      eq
         get-value:x:@.foo/-
         get-value:x:@hyper2lambda/*/status
   .lambda

      /*
       * Assumption failed!
       * 
       * Status code was not as assumed.
       */
      strings.concat
         .:"Assumption test failed, test file: "
         get-value:x:@.arguments/*/test_file
         .:@"
Error: Wrong status code returned.
Assumption: "
         get-value:x:@hyper2lambda/*/status
         .:@"
Actual: "
         get-value:x:@.foo/-
      log.error:Assumption test failed
         file:x:@.arguments/*/test_file
         type:Wrong status code
         expected:x:@hyper2lambda/*/status
         actual:x:@.foo/-
      unwrap:x:+/*
      return
         result:x:@strings.concat

/*
 * Checking if test assumes response equality, and if it does,
 * we make sure assumption about response value is correct.
 */
if
   exists:x:@hyper2lambda/*/response
   .lambda

      /*
       * Assumption and reality nodes, which are later compared to sanity
       * check invocation.
       */
      .response
      .assumption

      /*
       * Checking if response type is assumed to be JSON, and if so,
       * making sure we make formatting irrelevant before we compare assumption
       * with reality.
       * 
       * Notice, JSON is default assumption about Content-Type returned by
       * invocation.
       */
      if
         or
            not
               exists:x:@hyper2lambda/*/produces
            eq
               get-value:x:@hyper2lambda/*/produces
               .:application/json
         .lambda

            /*
             * Making sure JSON formatting becomes irrelevant.
             * First verifying endpoint returned anything at all.
             */
            .content:{}
            if
               and
                  exists:x:@.foo/-/*/content
                  not
                     eq
                        get-value:x:@.foo/-/*/content
                        .:
                  not
                     eq
                        get-value:x:@.foo/-/*/content
                        .
               .lambda

                  // HTTP invocation returned something ...
                  set-value:x:@.content
                     get-value:x:@.foo/-/*/content

            // Transforming response JSON back and forth to eliminate formatting issues.
            json2lambda:x:@.content
            set-value:x:@.response
               lambda2json:x:@json2lambda/*
                  format:true

            // Transforming assumed JSON back and forth to eliminate formatting issues.
            json2lambda:x:@hyper2lambda/*/response
            set-value:x:@.assumption
               lambda2json:x:@json2lambda/*
                  format:true
      else

         // Assigning reality and assumption to comparison values.
         set-value:x:@.response
            get-value:x:@.foo/-/*/content
         set-value:x:@.assumption
            get-value:x:@hyper2lambda/*/response

      // Making sure assumptions and reality overlaps.
      if
         not
            eq
               get-value:x:@.response
               get-value:x:@.assumption
         .lambda

            /*
             * Assumption failed!
             * 
             * Response was assumed to be an exact match, and it was not.
             */
            strings.concat
               .:"Assumption test failed, test file: "
               get-value:x:@.arguments/*/test_file
               .:@"
Error: Wrong response returned
Assumption: "
               get-value:x:@.assumption
               .:@"
Actual: "
               get-value:x:@.response
            log.error:Assumption test failed
               file:x:@.arguments/*/test_file
               type:Wrong response
               expected:x:@.assumption
               actual:x:@.response
            unwrap:x:+/*
            return
               result:x:@strings.concat

// Returns success to caller.
return
   result:success
