
/*
 * Deletes the specified index from your database.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 * - [tableName] - Name of table where index can be found
 * - [indexName] - Name of table
 * - [generate] - If true will not execute SQL but only return DDL to caller
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   tableName:string
   indexName:string
   generate:bool
.description:Deletes the specified index from your database
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/tableName
validators.mandatory:x:@.arguments/*/indexName
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite
   .:pgsql
   .:mssql

// SQL that executes to modify DDL.
.sql
switch:x:@.arguments/*/databaseType

   case:mssql
      set-value:x:@.sql
         strings.concat
            .:"drop index "
            get-value:x:@.arguments/*/tableName
            .:.
            get-value:x:@.arguments/*/indexName

   case:mysql
      set-value:x:@.sql
         strings.concat
            .:"alter table "
            get-value:x:@.arguments/*/tableName
            .:" drop index "
            get-value:x:@.arguments/*/indexName

   default
      set-value:x:@.sql
         strings.concat
            .:"drop index "
            get-value:x:@.arguments/*/indexName


// Checking if caller only wants to generate SQL statement.
if:x:@.arguments/*/generate
   unwrap:x:+/*
   return
      sql:x:@.sql

// Creating our database connection and executing SQL.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType
   data.execute:x:@.sql
      database-type:x:@.arguments/*/databaseType

// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
unwrap:x:+/*
return
   result:success
   sql:x:@.sql
