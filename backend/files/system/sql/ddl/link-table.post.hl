
/*
 * Adds the specified link table to the specified database.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [connectionString] - Connection string to use
 * - [databaseName] - Name of database
 * - [args] - Link table declaration
 * - [generate] - If true will not execute SQL but only return DDL to caller
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   args
      name:string
      table1:string
      table2:string
      table1pk
         .
            name:string
            type:string
            length:int
      table2pk
         .
            name:string
            type:string
            length:int
   generate:bool
.description:Adds the specified link table to the specified database
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/args
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite
   .:pgsql
   .:mssql

// Creating our DDL SQL.
.sql

// Create table DDL.
set-value:x:@.sql
   strings.concat
      .:"create table "
      get-value:x:@.arguments/*/args/*/name
      .:"("

// Looping through primary keys in table1.
.first:bool:true
.pk:
.fk:
for-each:x:@.arguments/*/args/*/table1pk/*

   // Checking if this is our first column or not.
   if:x:@.first
      set-value:x:@.first
         .:bool:false
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:"\r\n  "
   else
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:",\r\n  "

   // Adding column name and type.
   set-value:x:@.sql
      strings.concat
         get-value:x:@.sql
         get-value:x:@.dp/#/*/name
         .:" "
         get-value:x:@.dp/#/*/type

   // Checking if type has a length.
   if
      and
         exists:x:@.dp/#/*/length
         not-null:x:@.dp/#/*/length
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:(
               get-value:x:@.dp/#/*/length
               .:)

   // Adding references constraint for column if not MySQL.
   if
      neq:x:@.arguments/*/databaseType
         .:mysql
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:" references "
               get-value:x:@.arguments/*/args/*/table1
               .:" ("
               get-value:x:@.dp/#/*/name
               .:")"
   else
      set-value:x:@.fk
         strings.concat
            get-value:x:@.fk
            .:",\r\n foreign key ("
            get-value:x:@.dp/#/*/name
            .:") references "
            get-value:x:@.arguments/*/args/*/table1
            .:" ("
            get-value:x:@.dp/#/*/name
            .:)

   // Storing primary key's name.
   set-value:x:@.pk
      strings.concat
         get-value:x:@.pk
         get-value:x:@.dp/#/*/name
         .:,

// Looping through primary keys in table2.
for-each:x:@.arguments/*/args/*/table2pk/*

   // Checking if this is our first column or not.
   if:x:@.first
      set-value:x:@.first
         .:bool:false
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:"\r\n  "
   else
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:",\r\n  "

   // Adding column name and type.
   set-value:x:@.sql
      strings.concat
         get-value:x:@.sql
         get-value:x:@.dp/#/*/name
         .:" "
         get-value:x:@.dp/#/*/type

   // Checking if type has a length.
   if
      and
         exists:x:@.dp/#/*/length
         not-null:x:@.dp/#/*/length
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:(
               get-value:x:@.dp/#/*/length
               .:)

   // Adding references constraint for column if not MySQL.
   if
      neq:x:@.arguments/*/databaseType
         .:mysql
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:" references "
               get-value:x:@.arguments/*/args/*/table2
               .:" ("
               get-value:x:@.dp/#/*/name
               .:")"
   else
      set-value:x:@.fk
         strings.concat
            get-value:x:@.fk
            .:",\r\n foreign key ("
            get-value:x:@.dp/#/*/name
            .:") references "
            get-value:x:@.arguments/*/args/*/table2
            .:" ("
            get-value:x:@.dp/#/*/name
            .:)

   // Storing primary key's name.
   set-value:x:@.pk
      strings.concat
         get-value:x:@.pk
         get-value:x:@.dp/#/*/name
         .:,

// Adding primary key to table.
strings.trim:x:@.pk
   .:,

set-value:x:@.sql
   strings.concat
      get-value:x:@.sql
      .:",\r\n  primary key("
      get-value:x:@strings.trim
      .:)

// Adding closing paranthesis and semi colon.
set-value:x:@.sql
   strings.concat
      get-value:x:@.sql
      get-value:x:@.fk
      .:");"

// Checking if caller only wants to generate SQL statement.
if:x:@.arguments/*/generate
   unwrap:x:+/*
   return
      sql:x:@.sql

// Creating our database connection and executing our SQL.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType
   data.execute:x:@.sql
      database-type:x:@.arguments/*/databaseType

// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
unwrap:x:+/*
return
   result:success
   sql:x:@.sql

