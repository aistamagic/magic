
/*
 * Evaluates the given [sql] and returns results to caller.
 * 
 * Arguments;
 * - [databaseType] - Database type, typically 'mssql' or 'mysql'.
 * - [database] - Initial database to use in connection
 * - [sql] - SQL to execute
 * - [safeMode] - If true, will never return more than the first 200 records to avoid exhausting server
 * - [batch] - If true, will execute SQL as a MS SQL batch operation. Only relevant for 'mssql' database type
 */
.arguments
   databaseType:string
   database:string
   sql:string
   safeMode:bool
   batch:bool
.description:Evaluates the given SQL given for your specified database, and returns the result to caller.
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:pgsql
   .:mssql
   .:sqlite

// Creating our database connection.
data.connect:x:@.arguments/*/database
   database-type:x:@.arguments/*/databaseType

   /*
    * Checking if we're supposed to execute SQL in safe mode, only
    * returning the first 200 records.
    */
   if
      and
         get-value:x:@.arguments/*/safeMode
         not
            get-value:x:@.arguments/*/batch
      .lambda
         add:x:@data.connect/**/data.select
            .
               max:200

   /*
    * Checking if we're supposed to execute SQL as an MS SQL 'batch' operation,
    * which implies respecting 'go' keywords, splitting SQL by each 'go' keyword.
    */
   if
      and
         eq
            get-value:x:@.arguments/*/databaseType
            .:mssql
         get-value:x:@.arguments/*/batch
      .lambda
         set-name:x:@data.connect/**/data.select
            .:mssql.execute-batch
   else
      add:x:@data.connect/**/data.select
         .
            database-type:x:@.arguments/*/databaseType

   /*
    * Executing SQL and returning results to caller, making sure we're
    * able to return exceptions to caller.
    */
   try
      data.select:x:@.arguments/*/sql
         multiple-result-sets:true

      // Returning result of invocation to caller.
      if
         exists:x:@data.select/*/*
         .lambda
            return-nodes:x:@data.select/*
   .catch

      // Notice, throwing exceptions as public now.
      throw:x:@.arguments/*/message
         public:bool:true
         status:int:401
