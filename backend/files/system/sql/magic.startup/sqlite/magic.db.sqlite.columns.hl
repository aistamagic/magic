
/*
 * Lists all columns in the specified SQLite table.
 * 
 * Arguments
 * 
 * - [connection-string] - What connection string to use
 * - [database] - What database you want to check
 * - [table] - What table you want to check
 */
slots.create:magic.db.sqlite.columns

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table

   // Opens up our connection
   .connection:[postgres]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   sqlite.connect:x:@.connection

      strings.concat
         .:"pragma table_info('"
         get-value:x:@.arguments/*/table
         .:"')"
      sqlite.select:x:@strings.concat

      /*
       * Creating our return value, by projecting it into
       * a generic form, that does not rely upon SQLite's syntactic
       * details.
       */
      for-each:x:@sqlite.select/*
         unwrap:x:+/*/*
         .tmp
            ""
               name:x:@.dp/#/*/name
               db:x:@.dp/#/*/type

         // Checking if column is nullable.
         if
            eq
               get-value:x:@.dp/#/*/notnull
               .:long:1
            .lambda
               add:x:@.tmp/*
                  .
                     nullable:bool:false
         else
            add:x:@.tmp/*
               .
                  nullable:bool:true

         // Checking if column is a part of the primary key.
         if
            eq
               get-value:x:@.dp/#/*/pk
               .:long:0
            .lambda
               add:x:@.tmp/*
                  .
                     primary:bool:false
         else
            add:x:@.tmp/*
               .
                  primary:bool:true

         // Checking if column has a default value.
         if
            and
               not
                  eq
                     get-value:x:@.dp/#/*/dflt_value
                     .:
               not
                  eq
                     get-value:x:@.dp/#/*/dflt_value
                     .
            .lambda
               add:x:@.tmp/*
                  .
                     automatic:bool:true
         else

            // Defaulting automatic to false
            add:x:@.tmp/*
               .
                  automatic:bool:false

            /*
             * Notice, SQLite doesn't inform us that column is automatic if it's an
             * "autoincrement" column using "pragma table_info" - Hence, we've got to
             * do a lookup into "sqlite_master" if column is integer and primary key
             * to determine if column is an autoincrement column.
             */
            strings.to-lower:x:@.dp/#/*/type
            if
               and
                  eq:x:@strings.to-lower
                     .:integer
                  eq:x:@.dp/#/*/pk
                     .:long:1
               .lambda
                  sqlite.select:"select 1 from sqlite_master where type = 'table' and name = @table and sql like '%AUTOINCREMENT%'"
                     @table:x:@.arguments/*/table
                  if
                     exists:x:@sqlite.select/*/*
                     .lambda

                        // Column is autoincrement
                        set-value:x:@.tmp/*/*/automatic
                           .:bool:true

         /*
          * Figuring our which Hyperlambda type to project
          * its database type to.
          */
         .type
         strings.regex-replace:x:@.dp/#/*/type
            .:"\\([0-9,]+\\)"
            .:
         strings.replace:x:@strings.regex-replace
            .:" unsigned"
            .:
         strings.to-lower:x:@strings.replace
         switch:x:@strings.to-lower

            // Everything transformed into long values.
            case:int
            case:integer
            case:tinyint
            case:smallint
            case:mediumint
            case:bigint
            case:big int
            case:int 2
            case:int 8
               set-value:x:@.type
                  .:long

            // Everything transformed into date values.
            case:timestamp
            case:date
            case:datetime
               set-value:x:@.type
                  .:date

            // Everything transformed into decimal.
            case:numeric
            case:decimal
               set-value:x:@.type
                  .:decimal

            // Everything transformed into double.
            case:real
            case:double
            case:float
            case:double precision
               set-value:x:@.type
                  .:double

            // Everything transformed into string values.
            case:character
            case:varchar
            case:varying character
            case:nchar
            case:native character
            case:nvarchar
            case:text
            case:clob
            case:char
            case:blob sub_type text
               set-value:x:@.type
                  .:string

            // Everything transformed into boolean values.
            case:boolean
               set-value:x:@.type
                  .:bool

            // Default/special cases.
            default

               // Defaulting to string type.
               set-value:x:@.type
                  .:string

         // Adding Hyperlambda type to [.tmp] above.
         unwrap:x:+/*/*
         add:x:@.tmp/*
            .
               hl:x:@.type

         // Adding [.tmp] to [return-nodes] below.
         add:x:../*/sqlite.connect/*/return-nodes
            get-nodes:x:@.tmp/*

      // Returning results to caller.
      return-nodes
