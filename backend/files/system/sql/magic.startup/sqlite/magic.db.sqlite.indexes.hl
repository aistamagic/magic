
/*
 * Lists all foreign keys in the specified SQLite table.
 * 
 * Arguments
 * 
 * - [connection-string] - What connection string to use
 * - [database] - What database you want to check
 * - [table] - What table you want to check
 */
slots.create:magic.db.sqlite.indexes

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table

   // Opens up our connection
   .connection:
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   sqlite.connect:x:@.connection

      strings.concat
         .:"select * from sqlite_master where type = 'index' and tbl_name='"
         get-value:x:@.arguments/*/table
         .:"'"
      sqlite.select:x:@strings.concat

      /*
       * Creating our return value, by projecting it into
       * a generic form, that does not rely upon MySQL's syntactic
       * details.
       */
      for-each:x:@sqlite.select/*
         unwrap:x:+/*/*/*
         add:x:../*/return-nodes
            .
               .
                  name:x:@.dp/#/*/name
                  columns
         strings.concat
            .:"pragma index_info('"
            get-value:x:@.dp/#/*/name
            .:"')"
         sqlite.select:x:@strings.concat
         for-each:x:@sqlite.select/*
            unwrap:x:+/*/*
            add:x:../*/return-nodes/0/-/*/columns
               .
                  .:x:@.dp/#/*/name

   return-nodes
