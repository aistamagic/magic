
/*
 * Lists all columns in some MySQL table.
 * 
 * Arguments
 * 
 * - [connection-string] - What connection string to use
 * - [database] - What database you want to check
 * - [table] - What table you want to check
 */
slots.create:magic.db.pgsql.columns

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table

   // Opens up our connection
   .connection:[postgres]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   pgsql.connect:x:@.connection

      // Making sure we support table names with special characters.
      strings.concat
         .:@"
select c.column_name, c.is_nullable, c.data_type, c.column_default, exists(
   select *
      from information_schema.key_column_usage kcu  
         join information_schema.table_constraints tc on tc.constraint_name = kcu.constraint_name 
      where tc.constraint_type = 'PRIMARY KEY' and
         kcu.table_name = @table and 
         c.column_name = kcu.column_name and c.table_name = kcu.table_name
   ) as is_pk
   from information_schema.columns c
   where c.table_name = @table and c.table_catalog = @database order by is_pk desc, c.column_name asc"
      pgsql.select:x:@strings.concat
         @table:x:@.arguments/*/table
         @database:x:@.arguments/*/database

      /*
       * Creating our return value, by projecting it into
       * a generic form, that does not rely upon PostgreSQL's syntactic
       * details.
       */
      for-each:x:@pgsql.select/*
         unwrap:x:+/*/*
         .tmp
            ""
               name:x:@.dp/#/*/column_name
               db:x:@.dp/#/*/data_type

         // Checking if column is nullable.
         if
            eq
               get-value:x:@.dp/#/*/is_nullable
               .:NO
            .lambda
               add:x:@.tmp/*
                  .
                     nullable:bool:false
         else
            add:x:@.tmp/*
               .
                  nullable:bool:true

         // Checking if column is a part of the primary key.
         if
            get-value:x:@.dp/#/*/is_pk
            .lambda
               add:x:@.tmp/*
                  .
                     primary:bool:true
         else
            add:x:@.tmp/*
               .
                  primary:bool:false

         // Checking if column has a default value.
         if
            and
               not
                  eq
                     get-value:x:@.dp/#/*/column_default
                     .:
               not
                  eq
                     get-value:x:@.dp/#/*/column_default
                     .
            .lambda
               add:x:@.tmp/*
                  .
                     automatic:bool:true
         else
            add:x:@.tmp/*
               .
                  automatic:bool:false

         /*
          * Figuring our which Hyperlambda type to project
          * its database type to.
          */
         .type

         // Anything BUT booleans.
         strings.regex-replace:x:@.dp/#/*/data_type
            .:" \\([0-9,]+\\)"
            .:
         strings.regex-replace:x:@strings.regex-replace
            .:" \\[[0-9,]+\\]"
            .:
         strings.replace:x:@strings.regex-replace
            .:" unsigned"
            .:
         strings.replace:x:@strings.replace
            .:" without time zone"
            .:
         strings.replace:x:@strings.replace
            .:" with time zone"
            .:
         switch:x:@strings.replace

            // Everything transformed into date values.
            case:smallserial
            case:serial
            case:smallint
               set-value:x:@.type
                  .:int

            // Everything transformed into date values.
            case:timestamp
               set-value:x:@.type
                  .:date

            // Everything transformed into decimal values.
            case:numeric
            case:decimal
            case:real
            case:money
               set-value:x:@.type
                  .:decimal

            // Everything transformed into double.
            case:double precision
               set-value:x:@.type
                  .:double

            // Everything transformed into integer long values.
            case:integer
            case:bigint
            case:bigserial
            case:interval
               set-value:x:@.type
                  .:long

            // Everything transformed into string values.
            case:string
            case:bit
            case:bit varying
            case:character
            case:character varying
            case:json
            case:text
            case:xml
               set-value:x:@.type
                  .:string

            // Everything transformed into boolean values.
            case:boolean
               set-value:x:@.type
                  .:bool

            // Default/special cases.
            default
               if
                  strings.starts-with:x:@strings.replace
                     .:enum
                  .lambda

                     // Enum type
                     set-value:x:@.type
                        .:string
               else

                  // Defaulting to string type.
                  set-value:x:@.type
                     .:string

         // Adding Hyperlambda type to [.tmp] above.
         unwrap:x:+/*/*
         add:x:@.tmp/*
            .
               hl:x:@.type

         // Adding [.tmp] to [return-nodes] below.
         add:x:../*/pgsql.connect/*/return-nodes
            get-nodes:x:@.tmp/*

      // Returning results to caller.
      return-nodes
