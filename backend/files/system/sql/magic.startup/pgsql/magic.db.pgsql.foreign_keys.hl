
/*
 * Lists all foreign keys in some PostgreSQL table.
 * 
 * Arguments
 * 
 * - [connection-string] - What connection string to use
 * - [database] - What database you want to check
 * - [table] - What table you want to check
 */
slots.create:magic.db.pgsql.foreign_keys

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table

   // Opens up our connection
   .connection:[postgres]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   pgsql.connect:x:@.connection

      // Dynamically creating our SQL.
      pgsql.select:@"
select
      kcu.column_name as column,
      rel_kcu.table_name as foreign_table,
      rel_kcu.column_name as foreign_column,
      tco.constraint_name as name
from information_schema.table_constraints tco
join information_schema.key_column_usage kcu
          on tco.constraint_schema = kcu.constraint_schema
          and tco.constraint_name = kcu.constraint_name
join information_schema.referential_constraints rco
          on tco.constraint_schema = rco.constraint_schema
          and tco.constraint_name = rco.constraint_name
join information_schema.key_column_usage rel_kcu
          on rco.unique_constraint_schema = rel_kcu.constraint_schema
          and rco.unique_constraint_name = rel_kcu.constraint_name
          and kcu.ordinal_position = rel_kcu.ordinal_position
where tco.constraint_type = 'FOREIGN KEY' and
    kcu.table_name = @table and
    kcu.table_catalog = @database
order by kcu.column_name"
         @table:x:@.arguments/*/table
         @database:x:@.arguments/*/database

      // Returning result to caller.
      return-nodes:x:@pgsql.select/*
