
/*
 * Lists all columns in some SQL Server database table.
 * 
 * Arguments
 * 
 * - [connection-string] - What connection string to use
 * - [database] - What database you want to check
 * - [table] - What table you want to check
 */
slots.create:magic.db.mssql.columns

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table

   // Opens up our connection
   .connection:[master]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   mssql.connect:x:@.connection

      // Running our query to retrieve meta information.
      mssql.select:@"select c.name 'name', t.Name 'type', c.is_nullable 'nullable', isnull(i.is_primary_key, 0) 'primary', c.is_identity 'automatic', c.default_object_id 'default'
         from sys.columns c 
             inner join sys.types t on c.user_type_id = t.user_type_id
             left outer join sys.index_columns ic 
             left outer join sys.indexes i on ic.object_id = i.object_id and 
                 ic.index_id = i.index_id on ic.object_id = c.object_id and 
                 ic.column_id = c.column_id and i.is_primary_key = 1
         where c.object_id = OBJECT_ID(@table)"
         @table:x:@.arguments/*/table

      // Adding the returned values from the above SQL into our return invocation below.
      for-each:x:@mssql.select/*
         unwrap:x:+/*/*
         .tmp
            ""
               name:x:@.dp/#/*/name
               db:x:@.dp/#/*/type
               nullable:x:@.dp/#/*/nullable
               primary:x:@.dp/#/*/primary
               automatic:x:@.dp/#/*/automatic

         /*
          * Checking if column is not automatic,
          * but still seems to have a default value.
          */
         if
            mt
               get-value:x:@.dp/#/*/default
               .:int:0
            .lambda

               // Column has default value.
               set-value:x:@.tmp/*/*/automatic
                  .:bool:true

         /*
          * Figuring our which Hyperlambda type to project
          * its database type to.
          */
         .type
         switch:x:@.dp/#/*/type

            // Everything transformed into date values.
            case:date
            case:datetime
            case:datetime2
            case:datetimeoffset
            case:smalldatetime
            case:time
               set-value:x:@.type
                  .:date

            // Everything transformed into decimal values.
            case:numeric
            case:decimal
            case:smallmoney
            case:money
            case:float
            case:real
               set-value:x:@.type
                  .:decimal

            // Everything transformed into integer long values.
            case:bigint
            case:smallint
            case:int
            case:tinyint
               set-value:x:@.type
                  .:long

            // Everything transformed into boolean values.
            case:bit
               set-value:x:@.type
                  .:bool

            // Everything transformed into string values.
            case:char
            case:varchar
            case:text
            case:nchar
            case:nvarchar
            case:ntext
            case:binary
            case:image
            case:varbinary
            case:uniqueidentifier
               set-value:x:@.type
                  .:string

            // Special case for timestamp, since it's actually an "automatic" column.
            case:rowversion
            case:timestamp
               set-value:x:@.type
                  .:string
               set-value:x:@.tmp/*/*/automatic
                  .:bool:true

            // Defaulting Hyperlambda type to string.
            default
               set-value:x:@.type
                  .:string

         // Adding Hyperlambda type to [.tmp] above.
         unwrap:x:+/*/*
         add:x:@.tmp/*
            .
               hl:x:@.type

         // Adding [.tmp] to [return-nodes] below.
         add:x:../*/mssql.connect/*/return-nodes
            get-nodes:x:@.tmp/*

      // Returning results to caller.
      return-nodes
