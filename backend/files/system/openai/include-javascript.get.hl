
// Returns the specified JavaScript file wrapping the specified model to caller.
.arguments
   css:string
   file:string
   type:string
   header:string
   button:string
   render_button:bool

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/button

// Defaulting button to be rendered by default.
if
   not-exists:x:@.arguments/*/render_button
   .lambda
      add:x:@.arguments
         .
            render_button:bool:true

// Checking if custom JavaScript file exists.
.result
strings.concat
   .:/etc/system/openai/
   get-value:x:@.arguments/*/file
   .:.js
if
   io.file.exists:x:@strings.concat
   .lambda

      // Generic template file.
      set-value:x:@.result
         io.file.load:x:@strings.concat

else

   //Checking if system JavaScript file exists.
   strings.concat
      .:/system/openai/front.files/
      get-value:x:@.arguments/*/file
      .:.js
   if
      io.file.exists:x:@strings.concat
      .lambda

         // Generic template file.
         set-value:x:@.result
            io.file.load:x:@strings.concat
   else

      // Oops, no such file exists.
      throw:No such AI chat template file exists
         public:bool:true
         status:400


// Figuring out API URL.
.scheme
request.host
if
   strings.contains:x:@request.host
      .:localhost
   .lambda
      set-value:x:@.scheme
         .:"http"
else
   set-value:x:@.scheme
      .:"https"
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host

// Dynamically exchanging template fields in JavaScript file.
set-value:x:@.result
   strings.replace:x:@.result
      .:[[url]]
      get-value:x:@.url
set-value:x:@.result
   strings.replace:x:@.result
      .:[[type]]
      get-value:x:@.arguments/*/type
set-value:x:@.result
   strings.replace:x:@.result
      .:[[header]]
      get-first-value
         get-value:x:@.arguments/*/header
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[button]]
      get-first-value
         get-value:x:@.arguments/*/button
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[file]]
      get-first-value
         get-value:x:@.arguments/*/file
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[css]]
      get-first-value
         get-value:x:@.arguments/*/css
         get-value:x:@.arguments/*/file
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[render_button]]
      get-value:x:@.arguments/*/render_button

// Making sure we return correct Content-Type to caller, and applying some cache.
response.headers.set
   Content-Type:application/javascript
   Cache-Control:public, max-age=300

// Returning result to caller.
return:x:@.result
