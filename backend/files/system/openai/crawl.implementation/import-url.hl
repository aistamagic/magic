
/*
 * Imports the specified URL as training data by scraping the webpage
 * and generate training data from its content.
 */

// Figuring out base URL, such that we can correctly crawl hyperlinks in document.
.base
strings.split:x:@.arguments/*/url
   .:"://"
strings.split:x:@strings.split/1
   .:/
set-value:x:@.base
   strings.concat
      get-value:x:@strings.split/@strings.split/0
      .:"://"
      get-value:x:@strings.split/0

// Connecting to database.
data.connect:[generic|magic]

   // Checking if we've fetched this URL previously.
   data.read
      table:ml_training_snippets
      where
         and
            uri.like:x:@.arguments/*/url
            type.eq:x:@.arguments/*/type
      limit:1

   // Checking if above invocation yielded a result, at which point URL has been previously scraped.
   if
      exists:x:@data.read/*
      .lambda

         // URL has been fetched previously.
         return:bool:true

// Retrieving URL's content.
http.get:x:@.arguments/*/url
   headers
      User-Agent:Aista-MachineLearning-Spider

// Sanity checking above invocation.
if
   not
      and
         mte:x:@http.get
            .:int:200
         lt:x:@http.get
            .:int:300
   .lambda

      // Oops, logging error.
      lambda2hyper:x:@http.get
      log.error:Something went wrong while trying to crawl URL for Machine Learning snippets
         url:x:@.arguments/*/url
         error:x:@lambda2hyper
      return:bool:true

// Making sure URL returned HTML.
if
   not
      strings.starts-with:x:@http.get/*/headers/*/Content-Type
         .:text/html
   .lambda

      // Oops, doing some basic logging.
      lambda2hyper:x:@http.get
      log.error:URL did not return HTML content when crawling for Machine Learning snippets
         content:x:@lambda2hyper
         url:x:@.arguments/*/url
      return:bool:true

// Converting HTML to lambda.
html2lambda:x:@http.get/*/content

// Buffer for training snippets.
.snippets

// Buffer for URLs found in document.
.urls

// Temp buffer for completion.
.tmp-completion:

// Looping through each HTML tag in document.
for-each:x:@html2lambda/*/html/*/body/**

   // Checking if this is a tag we need to handle.
   get-name:x:@.dp/#
   switch:x:@get-name

      // Checking if this is code.
      case:pre

         // Verifying text node exists.
         if
            exists:x:@.dp/#/**/\#text
            .lambda

               // Checking if we need to append code to existing completion or create new completion.
               if
                  exists:x:@.snippets/0/-/*/completion
                  .lambda

                     // Appending to existing completion.
                     set-value:x:@.snippets/0/-/*/completion
                        strings.concat
                           get-value:x:@.snippets/0/-/*/completion
                           .:"\r\n\r\n```\r\n"
                           strings.trim:x:@.dp/#/**/\#text/[0,1]
                              .:"\r\n \t"
                           .:"\r\n```"

               else

                  // Adding new prompt to [.snippets] collection.
                  strings.concat
                     .:"```\r\n"
                     strings.trim:x:@.dp/#/**/\#text/[0,1]
                        .:"\r\n \t"
                     .:"\r\n```"
                  unwrap:x:+/*/*
                  add:x:@.snippets/0/-
                     .
                        completion:x:@strings.concat

      // Checking if this is a hyperlink.
      case:a

         // Checking if it's a 'local' URL, implying within the same domain as we're currently scraping.
         if
            and
               exists:x:@.dp/#/*/\@href
               not-null:x:@.dp/#/*/\@href
               strings.starts-with:x:@.dp/#/*/\@href
                  .:/
            .lambda

               // Local URL.
               strings.split:x:@.dp/#/*/\@href
                  .:#
               strings.trim-end:x:@strings.split/0
                  .:/
               strings.concat
                  get-value:x:@.base
                  get-value:x:@strings.trim-end
               if
                  not-exists:x:@.url/*/{@strings.concat}
                  .lambda
                     unwrap:x:+/*/*
                     add:x:@.urls
                        .
                           .:x:@strings.concat

         else-if
            and
               exists:x:@.dp/#/*/\@href
               not-null:x:@.dp/#/*/\@href
               strings.starts-with:x:@.dp/#/*/\@href
                  get-value:x:@.arguments/*/url
            .lambda

               // Absolute URL but still within base URL we're currently crawling.
               strings.split:x:@.dp/#/*/\@href
                  .:#
               strings.trim-end:x:@strings.split/0
                  .:/
               if
                  not-exists:x:@.urls/*/{@strings.split/0}
                  .lambda
                     unwrap:x:+/*/*
                     add:x:@.urls
                        .
                           .:x:@strings.trim-end

      // Headers becomes prompts.
      case:h1
      case:h2
      case:h3
      case:h4
      case:h5
      case:h6

         // Creating a new prompt.
         .prompt:

         // Trimming and adding one SP characters between each part.
         for-each:x:@.dp/#/**/\#text
            set-value:x:@.prompt
               strings.concat
                  get-value:x:@.prompt
                  strings.trim:x:@.dp/#
                     .:"\r\n\t "
                  .:" "
         set-value:x:@.prompt
            strings.trim:x:@.prompt
               .:" "

         // Adding new prompt to [.snippets] collection.
         unwrap:x:+/*/*/*
         add:x:@.snippets
            .
               .
                  prompt:x:@.prompt

      // Paragraphs becomes completions.
      case:p

         // Making sure we've added at least one prompt.
         if
            exists:x:@.snippets/*
            .lambda

               // Creating a new completion.
               .completion:

               // Trimming and adding one SP characters between each part.
               for-each:x:@.dp/#/**/\#text
                  if
                     and
                        neq:x:@.dp/#
                           .
                        neq:x:@.dp/#
                           .:
                     .lambda
                        strings.replace:x:@.dp/#
                           .:"\r"
                           .:" "
                        strings.replace:x:@strings.replace
                           .:"\n"
                           .:" "
                        strings.replace:x:@strings.replace
                           .:"\t"
                           .:" "
                        strings.replace:x:@strings.replace
                           .:"  "
                           .:" "
                        set-value:x:@.completion
                           strings.concat
                              get-value:x:@.completion
                              strings.trim:x:@strings.replace
                                 .:"\r\n\t "
                              .:" "
               set-value:x:@.completion
                  strings.trim:x:@.completion
                     .:" "

               // Verifying that paragraph actually contained some content.
               if
                  neq:x:@.completion
                     .:
                  .lambda

                     // Checking if we need to append paragraph to existing completion or create new completion.
                     if
                        exists:x:@.snippets/0/-/*/completion
                        .lambda

                           // Appending to existing completion.
                           set-value:x:@.snippets/0/-/*/completion
                              strings.concat
                                 get-value:x:@.snippets/0/-/*/completion
                                 .:"\r\n\r\n"
                                 get-value:x:@.completion

                     else

                        // Adding new prompt to [.snippets] collection.
                        unwrap:x:+/*/*
                        add:x:@.snippets/0/-
                           .
                              completion:x:@.completion

      // Lists becomes completions.
      case:ul
      case:ol

         // Making sure we've added at least one prompt.
         if
            exists:x:@.snippets/*
            .lambda

               // Looping through each list item below list element tag.
               .completion:"\r\n"
               for-each:x:@.dp/#/*/li

                  // Buffer for list item
                  .item:

                  // Trimming and adding one SP characters between each part.
                  for-each:x:@.dp/#/**/\#text
                     if
                        and
                           neq:x:@.dp/#
                              .
                           neq:x:@.dp/#
                              .:
                        .lambda
                           strings.replace:x:@.dp/#
                              .:"\r"
                              .:" "
                           strings.replace:x:@strings.replace
                              .:"\n"
                              .:" "
                           strings.replace:x:@strings.replace
                              .:"\t"
                              .:" "
                           strings.replace:x:@strings.replace
                              .:"  "
                              .:" "
                           set-value:x:@.item
                              strings.concat
                                 get-value:x:@.item
                                 strings.trim:x:@strings.replace
                                    .:"\r\n\t "
                                 .:" "
                  set-value:x:@.completion
                     strings.concat
                        get-value:x:@.completion
                        .:"\r\n- "
                        strings.trim:x:@.item
                           .:" "

               // Verifying that list actually contained some content.
               if
                  neq:x:@.completion
                     .:"\r\n"
                  .lambda

                     // Checking if we need to append paragraph to existing completion or create new completion.
                     if
                        exists:x:@.snippets/0/-/*/completion
                        .lambda

                           // Appending to existing completion.
                           set-value:x:@.snippets/0/-/*/completion
                              strings.concat
                                 get-value:x:@.snippets/0/-/*/completion
                                 get-value:x:@.completion

                     else

                        // Adding new prompt to [.snippets] collection.
                        unwrap:x:+/*/*
                        add:x:@.snippets/0/-
                           .
                              completion:x:@.completion

// Connecting to database.
data.connect:[generic|magic]

   // Creating training data from all [.snippets].
   for-each:x:@.snippets/*

      // Verifying that currently iterated snippet has both prompt and completion.
      if
         and
            exists:x:@.dp/#/*/prompt
            exists:x:@.dp/#/*/completion
            neq:x:@.dp/#/*/prompt
               .:
            neq:x:@.dp/#/*/completion
               .:
            mt
               strings.length:x:@.dp/#/*/completion
               get-value:x:@.arguments/*/threshold
         .lambda

            // Prompt.
            .prompt
            set-value:x:@.prompt
               strings.trim:x:@.dp/#/*/prompt
                  .:" \r\n\t"

            // Completion.
            .completion
            set-value:x:@.completion
               strings.trim:x:@.dp/#/*/completion
                  .:" \r\n\t"

            // Inserting prompt and completion into database.
            data.create
               table:ml_training_snippets
               values
                  prompt:x:@.prompt
                  completion:x:@.completion
                  type:x:@.arguments/*/type
                  uri:x:@.arguments/*/url

// Preserving some memory.
remove-nodes:x:@http.get/*
remove-nodes:x:@html2lambda/*
remove-nodes:x:@.snippets/*

// Decrementing max argument, and checking if we've reached limit.
math.decrement:x:@.arguments/*/max
if
   lte:x:@.arguments/*/max
      .:int:0
   .lambda
      return:bool:false

/*
 * To avoid having web server believe it's under DOS attack, we wait [delay] milliseconds
 * before we process the next URL.
 */
sleep:x:@.arguments/*/delay

// Checking if caller wants us to crawl URLs found in document.
if:x:@.arguments/*/crawl

   // Looping through all URLs found in document.
   for-each:x:@.urls/*

      // Crawling next URL.
      unwrap:x:+/*
      io.file.execute:/system/openai/crawl.implementation/import-url.hl
         url:x:@.dp/#
         type:x:@.arguments/*/type
         delay:x:@.arguments/*/delay
         max:x:@.arguments/*/max
      if
         eq:x:@io.file.execute
            .:bool:false
         .lambda

            // Reached max value and we should stop crawling URLs.
            return:bool:false

// Returning continue flag to caller.
return:bool:true
