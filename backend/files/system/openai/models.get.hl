
/*
 * Returns all models from OpenAI, including fine tuned models.
 */
.arguments
.type:internal
.description:Returns all models from OpenAI, including fine tuned models

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

/*
 * Creating our Bearer token by reading our OpenAI
 * configuration settings.
 */
.token
set-value:x:@.token
   strings.concat
      .:"Bearer "
      config.get:"magic:openai:key"

// Creating an HTTP POST request towards OpenAI, now decorated.
http.get:"https://api.openai.com/v1/models"
   headers
      Authorization:x:@.token
   convert:true

// Sanity checking above invocation
if
   neq:x:@http.get
      .:int:200
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.get
      log.error:Something went wrong while invoking OpenAI
         error:x:@lambda2hyper
      response.status.set:500
      return
         message:Something went wrong while invoking OpenAI, check your log for details

/*
 * Applying some HTTP caching to avoid invoking OpenAI again with
 * the same question before some minimum amount of time has passed.
 */
response.headers.set
   Cache-Control:private, max-age=180

// Returning results returned from invocation above to caller
add:x:../*/return
   get-nodes:x:@http.get/*/content/*/data/*
return
