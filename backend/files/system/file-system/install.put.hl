
// Installs the specified module by executing its Hyperlambda startup scripts.
.arguments
   folder:string
   app_version:string
   name:string
   token:string
.description:Installs the specified module by executing its Hyperlambda startup scripts
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Splitting up folder argument to ensure we're left only with module name.
strings.split:x:@.arguments/*/folder
   .:/

// Installing module.
unwrap:x:+/*
signal:magic.modules.install-module
   module:x:@strings.split/1

// Logging success.
log.info:Module successfully installed
   module:x:@.arguments/*/folder

// Creating our app's manifest.
.manifest
strings.concat
   get-value:x:@.arguments/*/folder
   .:/manifest.hl
if
   io.file.exists:x:@strings.concat
   .lambda

      // App has a manifest, hence appending data to it instead of creating a new file entirely.
      io.file.load:x:@strings.concat
      hyper2lambda:x:@io.file.load
      add:x:@.manifest
         get-nodes:x:@hyper2lambda/*

      /*
       * Removing [version] node from manifest if it exists, since we'll add
       * it according to arguments specified.
       * 
       * Notice, we only do this if an explicit version was supplied as an argument.
       */
      if
         and
            exists:x:@.arguments/*/name
            not
               eq
                  get-value:x:@.arguments/*/name
                  .
            not
               eq
                  get-value:x:@.arguments/*/name
                  .:
         .lambda

            // Removing [version] node from existing manifest, to use version supplied by caller.
            remove-nodes:x:@.manifest/*/version

/*
 * Adding name to our manifest.
 * 
 * Notice, if app is simply uploaded through "Files" menu item,
 * we don't have all the manifest data.
 */
if
   and
      exists:x:@.arguments/*/name
      not
         eq
            get-value:x:@.arguments/*/name
            .
      not
         eq
            get-value:x:@.arguments/*/name
            .:
   .lambda
      unwrap:x:+/*/*
      add:x:@.manifest
         .
            name:x:@.arguments/*/name

/*
 * Adding version to manifest.
 * 
 * Notice, if app is simply uploaded through "Files" menu item,
 * we don't have all the manifest data.
 */
if
   and
      exists:x:@.arguments/*/name
      not
         eq
            get-value:x:@.arguments/*/name
            .
      not
         eq
            get-value:x:@.arguments/*/name
            .:
   .lambda
      unwrap:x:+/*/*
      add:x:@.manifest
         .
            version:x:@.arguments/*/app_version

// Removing old [module_name], [installed_by] and [installed] nodes.
remove-nodes:x:@.manifest/*/module_name
remove-nodes:x:@.manifest/*/installed_by
remove-nodes:x:@.manifest/*/installed

/*
 * Adding version to manifest.
 * 
 * Notice, if app is simply uploaded through "Files" menu item,
 * we don't have all the manifest data.
 */
if
   and
      exists:x:@.arguments/*/token
      not
         eq
            get-value:x:@.arguments/*/token
            .
      not
         eq
            get-value:x:@.arguments/*/token
            .:
   .lambda
      unwrap:x:+/*/*
      add:x:@.manifest
         .
            token:x:@.arguments/*/token

// Adding module name to manifest.
unwrap:x:+/*/*
add:x:@.manifest
   .
      module_name:x:@strings.split/1

// Adding username of user installing app.
auth.ticket.get
unwrap:x:+/*/*
add:x:@.manifest
   .
      installed_by:x:@auth.ticket.get

// Adding installation date.
date.now
unwrap:x:+/*/*
add:x:@.manifest
   .
      installed:x:@date.now

// Saving manifest file.
io.file.save:x:@strings.concat
   lambda2hyper:x:@.manifest/*

// Returning result to caller.
return-nodes
   result:success
